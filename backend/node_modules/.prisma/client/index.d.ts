
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Autor
 * 
 */
export type Autor = $Result.DefaultSelection<Prisma.$AutorPayload>
/**
 * Model Cliente
 * 
 */
export type Cliente = $Result.DefaultSelection<Prisma.$ClientePayload>
/**
 * Model DetalleFactura
 * 
 */
export type DetalleFactura = $Result.DefaultSelection<Prisma.$DetalleFacturaPayload>
/**
 * Model Editorial
 * 
 */
export type Editorial = $Result.DefaultSelection<Prisma.$EditorialPayload>
/**
 * Model Factura
 * 
 */
export type Factura = $Result.DefaultSelection<Prisma.$FacturaPayload>
/**
 * Model Libro
 * 
 */
export type Libro = $Result.DefaultSelection<Prisma.$LibroPayload>
/**
 * Model Categoria
 * 
 */
export type Categoria = $Result.DefaultSelection<Prisma.$CategoriaPayload>
/**
 * Model Libro_Autor
 * 
 */
export type Libro_Autor = $Result.DefaultSelection<Prisma.$Libro_AutorPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Autor_Estado: {
  ACTIVO: 'ACTIVO',
  INACTIVO: 'INACTIVO'
};

export type Autor_Estado = (typeof Autor_Estado)[keyof typeof Autor_Estado]


export const Libro_Estado: {
  DISPONIBLE: 'DISPONIBLE',
  AGOTADO: 'AGOTADO'
};

export type Libro_Estado = (typeof Libro_Estado)[keyof typeof Libro_Estado]


export const Cliente_Estado: {
  ACTIVO: 'ACTIVO',
  INACTIVO: 'INACTIVO'
};

export type Cliente_Estado = (typeof Cliente_Estado)[keyof typeof Cliente_Estado]

}

export type Autor_Estado = $Enums.Autor_Estado

export const Autor_Estado: typeof $Enums.Autor_Estado

export type Libro_Estado = $Enums.Libro_Estado

export const Libro_Estado: typeof $Enums.Libro_Estado

export type Cliente_Estado = $Enums.Cliente_Estado

export const Cliente_Estado: typeof $Enums.Cliente_Estado

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Autors
 * const autors = await prisma.autor.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Autors
   * const autors = await prisma.autor.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.autor`: Exposes CRUD operations for the **Autor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Autors
    * const autors = await prisma.autor.findMany()
    * ```
    */
  get autor(): Prisma.AutorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cliente`: Exposes CRUD operations for the **Cliente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clientes
    * const clientes = await prisma.cliente.findMany()
    * ```
    */
  get cliente(): Prisma.ClienteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.detalleFactura`: Exposes CRUD operations for the **DetalleFactura** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DetalleFacturas
    * const detalleFacturas = await prisma.detalleFactura.findMany()
    * ```
    */
  get detalleFactura(): Prisma.DetalleFacturaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.editorial`: Exposes CRUD operations for the **Editorial** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Editorials
    * const editorials = await prisma.editorial.findMany()
    * ```
    */
  get editorial(): Prisma.EditorialDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.factura`: Exposes CRUD operations for the **Factura** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Facturas
    * const facturas = await prisma.factura.findMany()
    * ```
    */
  get factura(): Prisma.FacturaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.libro`: Exposes CRUD operations for the **Libro** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Libros
    * const libros = await prisma.libro.findMany()
    * ```
    */
  get libro(): Prisma.LibroDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.categoria`: Exposes CRUD operations for the **Categoria** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categorias
    * const categorias = await prisma.categoria.findMany()
    * ```
    */
  get categoria(): Prisma.CategoriaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.libro_Autor`: Exposes CRUD operations for the **Libro_Autor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Libro_Autors
    * const libro_Autors = await prisma.libro_Autor.findMany()
    * ```
    */
  get libro_Autor(): Prisma.Libro_AutorDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.10.1
   * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Autor: 'Autor',
    Cliente: 'Cliente',
    DetalleFactura: 'DetalleFactura',
    Editorial: 'Editorial',
    Factura: 'Factura',
    Libro: 'Libro',
    Categoria: 'Categoria',
    Libro_Autor: 'Libro_Autor'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "autor" | "cliente" | "detalleFactura" | "editorial" | "factura" | "libro" | "categoria" | "libro_Autor"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Autor: {
        payload: Prisma.$AutorPayload<ExtArgs>
        fields: Prisma.AutorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AutorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AutorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutorPayload>
          }
          findFirst: {
            args: Prisma.AutorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AutorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutorPayload>
          }
          findMany: {
            args: Prisma.AutorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutorPayload>[]
          }
          create: {
            args: Prisma.AutorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutorPayload>
          }
          createMany: {
            args: Prisma.AutorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AutorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutorPayload>
          }
          update: {
            args: Prisma.AutorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutorPayload>
          }
          deleteMany: {
            args: Prisma.AutorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AutorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AutorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AutorPayload>
          }
          aggregate: {
            args: Prisma.AutorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAutor>
          }
          groupBy: {
            args: Prisma.AutorGroupByArgs<ExtArgs>
            result: $Utils.Optional<AutorGroupByOutputType>[]
          }
          count: {
            args: Prisma.AutorCountArgs<ExtArgs>
            result: $Utils.Optional<AutorCountAggregateOutputType> | number
          }
        }
      }
      Cliente: {
        payload: Prisma.$ClientePayload<ExtArgs>
        fields: Prisma.ClienteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClienteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClienteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          findFirst: {
            args: Prisma.ClienteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClienteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          findMany: {
            args: Prisma.ClienteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>[]
          }
          create: {
            args: Prisma.ClienteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          createMany: {
            args: Prisma.ClienteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ClienteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          update: {
            args: Prisma.ClienteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          deleteMany: {
            args: Prisma.ClienteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClienteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClienteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          aggregate: {
            args: Prisma.ClienteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCliente>
          }
          groupBy: {
            args: Prisma.ClienteGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClienteGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClienteCountArgs<ExtArgs>
            result: $Utils.Optional<ClienteCountAggregateOutputType> | number
          }
        }
      }
      DetalleFactura: {
        payload: Prisma.$DetalleFacturaPayload<ExtArgs>
        fields: Prisma.DetalleFacturaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DetalleFacturaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DetalleFacturaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DetalleFacturaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DetalleFacturaPayload>
          }
          findFirst: {
            args: Prisma.DetalleFacturaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DetalleFacturaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DetalleFacturaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DetalleFacturaPayload>
          }
          findMany: {
            args: Prisma.DetalleFacturaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DetalleFacturaPayload>[]
          }
          create: {
            args: Prisma.DetalleFacturaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DetalleFacturaPayload>
          }
          createMany: {
            args: Prisma.DetalleFacturaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DetalleFacturaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DetalleFacturaPayload>
          }
          update: {
            args: Prisma.DetalleFacturaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DetalleFacturaPayload>
          }
          deleteMany: {
            args: Prisma.DetalleFacturaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DetalleFacturaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DetalleFacturaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DetalleFacturaPayload>
          }
          aggregate: {
            args: Prisma.DetalleFacturaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDetalleFactura>
          }
          groupBy: {
            args: Prisma.DetalleFacturaGroupByArgs<ExtArgs>
            result: $Utils.Optional<DetalleFacturaGroupByOutputType>[]
          }
          count: {
            args: Prisma.DetalleFacturaCountArgs<ExtArgs>
            result: $Utils.Optional<DetalleFacturaCountAggregateOutputType> | number
          }
        }
      }
      Editorial: {
        payload: Prisma.$EditorialPayload<ExtArgs>
        fields: Prisma.EditorialFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EditorialFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EditorialPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EditorialFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EditorialPayload>
          }
          findFirst: {
            args: Prisma.EditorialFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EditorialPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EditorialFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EditorialPayload>
          }
          findMany: {
            args: Prisma.EditorialFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EditorialPayload>[]
          }
          create: {
            args: Prisma.EditorialCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EditorialPayload>
          }
          createMany: {
            args: Prisma.EditorialCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.EditorialDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EditorialPayload>
          }
          update: {
            args: Prisma.EditorialUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EditorialPayload>
          }
          deleteMany: {
            args: Prisma.EditorialDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EditorialUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EditorialUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EditorialPayload>
          }
          aggregate: {
            args: Prisma.EditorialAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEditorial>
          }
          groupBy: {
            args: Prisma.EditorialGroupByArgs<ExtArgs>
            result: $Utils.Optional<EditorialGroupByOutputType>[]
          }
          count: {
            args: Prisma.EditorialCountArgs<ExtArgs>
            result: $Utils.Optional<EditorialCountAggregateOutputType> | number
          }
        }
      }
      Factura: {
        payload: Prisma.$FacturaPayload<ExtArgs>
        fields: Prisma.FacturaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FacturaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FacturaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaPayload>
          }
          findFirst: {
            args: Prisma.FacturaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FacturaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaPayload>
          }
          findMany: {
            args: Prisma.FacturaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaPayload>[]
          }
          create: {
            args: Prisma.FacturaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaPayload>
          }
          createMany: {
            args: Prisma.FacturaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.FacturaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaPayload>
          }
          update: {
            args: Prisma.FacturaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaPayload>
          }
          deleteMany: {
            args: Prisma.FacturaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FacturaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FacturaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaPayload>
          }
          aggregate: {
            args: Prisma.FacturaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFactura>
          }
          groupBy: {
            args: Prisma.FacturaGroupByArgs<ExtArgs>
            result: $Utils.Optional<FacturaGroupByOutputType>[]
          }
          count: {
            args: Prisma.FacturaCountArgs<ExtArgs>
            result: $Utils.Optional<FacturaCountAggregateOutputType> | number
          }
        }
      }
      Libro: {
        payload: Prisma.$LibroPayload<ExtArgs>
        fields: Prisma.LibroFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LibroFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LibroPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LibroFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LibroPayload>
          }
          findFirst: {
            args: Prisma.LibroFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LibroPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LibroFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LibroPayload>
          }
          findMany: {
            args: Prisma.LibroFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LibroPayload>[]
          }
          create: {
            args: Prisma.LibroCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LibroPayload>
          }
          createMany: {
            args: Prisma.LibroCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.LibroDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LibroPayload>
          }
          update: {
            args: Prisma.LibroUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LibroPayload>
          }
          deleteMany: {
            args: Prisma.LibroDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LibroUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LibroUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LibroPayload>
          }
          aggregate: {
            args: Prisma.LibroAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLibro>
          }
          groupBy: {
            args: Prisma.LibroGroupByArgs<ExtArgs>
            result: $Utils.Optional<LibroGroupByOutputType>[]
          }
          count: {
            args: Prisma.LibroCountArgs<ExtArgs>
            result: $Utils.Optional<LibroCountAggregateOutputType> | number
          }
        }
      }
      Categoria: {
        payload: Prisma.$CategoriaPayload<ExtArgs>
        fields: Prisma.CategoriaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoriaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoriaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          findFirst: {
            args: Prisma.CategoriaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoriaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          findMany: {
            args: Prisma.CategoriaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>[]
          }
          create: {
            args: Prisma.CategoriaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          createMany: {
            args: Prisma.CategoriaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CategoriaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          update: {
            args: Prisma.CategoriaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          deleteMany: {
            args: Prisma.CategoriaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoriaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoriaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          aggregate: {
            args: Prisma.CategoriaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategoria>
          }
          groupBy: {
            args: Prisma.CategoriaGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoriaGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoriaCountArgs<ExtArgs>
            result: $Utils.Optional<CategoriaCountAggregateOutputType> | number
          }
        }
      }
      Libro_Autor: {
        payload: Prisma.$Libro_AutorPayload<ExtArgs>
        fields: Prisma.Libro_AutorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Libro_AutorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Libro_AutorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Libro_AutorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Libro_AutorPayload>
          }
          findFirst: {
            args: Prisma.Libro_AutorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Libro_AutorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Libro_AutorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Libro_AutorPayload>
          }
          findMany: {
            args: Prisma.Libro_AutorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Libro_AutorPayload>[]
          }
          create: {
            args: Prisma.Libro_AutorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Libro_AutorPayload>
          }
          createMany: {
            args: Prisma.Libro_AutorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.Libro_AutorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Libro_AutorPayload>
          }
          update: {
            args: Prisma.Libro_AutorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Libro_AutorPayload>
          }
          deleteMany: {
            args: Prisma.Libro_AutorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Libro_AutorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.Libro_AutorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Libro_AutorPayload>
          }
          aggregate: {
            args: Prisma.Libro_AutorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLibro_Autor>
          }
          groupBy: {
            args: Prisma.Libro_AutorGroupByArgs<ExtArgs>
            result: $Utils.Optional<Libro_AutorGroupByOutputType>[]
          }
          count: {
            args: Prisma.Libro_AutorCountArgs<ExtArgs>
            result: $Utils.Optional<Libro_AutorCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    autor?: AutorOmit
    cliente?: ClienteOmit
    detalleFactura?: DetalleFacturaOmit
    editorial?: EditorialOmit
    factura?: FacturaOmit
    libro?: LibroOmit
    categoria?: CategoriaOmit
    libro_Autor?: Libro_AutorOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AutorCountOutputType
   */

  export type AutorCountOutputType = {
    Libro_Autor: number
  }

  export type AutorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Libro_Autor?: boolean | AutorCountOutputTypeCountLibro_AutorArgs
  }

  // Custom InputTypes
  /**
   * AutorCountOutputType without action
   */
  export type AutorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AutorCountOutputType
     */
    select?: AutorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AutorCountOutputType without action
   */
  export type AutorCountOutputTypeCountLibro_AutorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Libro_AutorWhereInput
  }


  /**
   * Count Type ClienteCountOutputType
   */

  export type ClienteCountOutputType = {
    facturas: number
  }

  export type ClienteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    facturas?: boolean | ClienteCountOutputTypeCountFacturasArgs
  }

  // Custom InputTypes
  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteCountOutputType
     */
    select?: ClienteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeCountFacturasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FacturaWhereInput
  }


  /**
   * Count Type EditorialCountOutputType
   */

  export type EditorialCountOutputType = {
    libros: number
  }

  export type EditorialCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    libros?: boolean | EditorialCountOutputTypeCountLibrosArgs
  }

  // Custom InputTypes
  /**
   * EditorialCountOutputType without action
   */
  export type EditorialCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EditorialCountOutputType
     */
    select?: EditorialCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EditorialCountOutputType without action
   */
  export type EditorialCountOutputTypeCountLibrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LibroWhereInput
  }


  /**
   * Count Type FacturaCountOutputType
   */

  export type FacturaCountOutputType = {
    DetalleFactura: number
  }

  export type FacturaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    DetalleFactura?: boolean | FacturaCountOutputTypeCountDetalleFacturaArgs
  }

  // Custom InputTypes
  /**
   * FacturaCountOutputType without action
   */
  export type FacturaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacturaCountOutputType
     */
    select?: FacturaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FacturaCountOutputType without action
   */
  export type FacturaCountOutputTypeCountDetalleFacturaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DetalleFacturaWhereInput
  }


  /**
   * Count Type LibroCountOutputType
   */

  export type LibroCountOutputType = {
    detalles: number
    Libro_Autor: number
  }

  export type LibroCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    detalles?: boolean | LibroCountOutputTypeCountDetallesArgs
    Libro_Autor?: boolean | LibroCountOutputTypeCountLibro_AutorArgs
  }

  // Custom InputTypes
  /**
   * LibroCountOutputType without action
   */
  export type LibroCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LibroCountOutputType
     */
    select?: LibroCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LibroCountOutputType without action
   */
  export type LibroCountOutputTypeCountDetallesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DetalleFacturaWhereInput
  }

  /**
   * LibroCountOutputType without action
   */
  export type LibroCountOutputTypeCountLibro_AutorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Libro_AutorWhereInput
  }


  /**
   * Count Type CategoriaCountOutputType
   */

  export type CategoriaCountOutputType = {
    libros: number
  }

  export type CategoriaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    libros?: boolean | CategoriaCountOutputTypeCountLibrosArgs
  }

  // Custom InputTypes
  /**
   * CategoriaCountOutputType without action
   */
  export type CategoriaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaCountOutputType
     */
    select?: CategoriaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoriaCountOutputType without action
   */
  export type CategoriaCountOutputTypeCountLibrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LibroWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Autor
   */

  export type AggregateAutor = {
    _count: AutorCountAggregateOutputType | null
    _avg: AutorAvgAggregateOutputType | null
    _sum: AutorSumAggregateOutputType | null
    _min: AutorMinAggregateOutputType | null
    _max: AutorMaxAggregateOutputType | null
  }

  export type AutorAvgAggregateOutputType = {
    id_Autor: number | null
  }

  export type AutorSumAggregateOutputType = {
    id_Autor: number | null
  }

  export type AutorMinAggregateOutputType = {
    id_Autor: number | null
    Nombre: string | null
    Email: string | null
    Estado: $Enums.Autor_Estado | null
  }

  export type AutorMaxAggregateOutputType = {
    id_Autor: number | null
    Nombre: string | null
    Email: string | null
    Estado: $Enums.Autor_Estado | null
  }

  export type AutorCountAggregateOutputType = {
    id_Autor: number
    Nombre: number
    Email: number
    Estado: number
    _all: number
  }


  export type AutorAvgAggregateInputType = {
    id_Autor?: true
  }

  export type AutorSumAggregateInputType = {
    id_Autor?: true
  }

  export type AutorMinAggregateInputType = {
    id_Autor?: true
    Nombre?: true
    Email?: true
    Estado?: true
  }

  export type AutorMaxAggregateInputType = {
    id_Autor?: true
    Nombre?: true
    Email?: true
    Estado?: true
  }

  export type AutorCountAggregateInputType = {
    id_Autor?: true
    Nombre?: true
    Email?: true
    Estado?: true
    _all?: true
  }

  export type AutorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Autor to aggregate.
     */
    where?: AutorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Autors to fetch.
     */
    orderBy?: AutorOrderByWithRelationInput | AutorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AutorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Autors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Autors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Autors
    **/
    _count?: true | AutorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AutorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AutorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AutorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AutorMaxAggregateInputType
  }

  export type GetAutorAggregateType<T extends AutorAggregateArgs> = {
        [P in keyof T & keyof AggregateAutor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAutor[P]>
      : GetScalarType<T[P], AggregateAutor[P]>
  }




  export type AutorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AutorWhereInput
    orderBy?: AutorOrderByWithAggregationInput | AutorOrderByWithAggregationInput[]
    by: AutorScalarFieldEnum[] | AutorScalarFieldEnum
    having?: AutorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AutorCountAggregateInputType | true
    _avg?: AutorAvgAggregateInputType
    _sum?: AutorSumAggregateInputType
    _min?: AutorMinAggregateInputType
    _max?: AutorMaxAggregateInputType
  }

  export type AutorGroupByOutputType = {
    id_Autor: number
    Nombre: string
    Email: string | null
    Estado: $Enums.Autor_Estado | null
    _count: AutorCountAggregateOutputType | null
    _avg: AutorAvgAggregateOutputType | null
    _sum: AutorSumAggregateOutputType | null
    _min: AutorMinAggregateOutputType | null
    _max: AutorMaxAggregateOutputType | null
  }

  type GetAutorGroupByPayload<T extends AutorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AutorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AutorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AutorGroupByOutputType[P]>
            : GetScalarType<T[P], AutorGroupByOutputType[P]>
        }
      >
    >


  export type AutorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_Autor?: boolean
    Nombre?: boolean
    Email?: boolean
    Estado?: boolean
    Libro_Autor?: boolean | Autor$Libro_AutorArgs<ExtArgs>
    _count?: boolean | AutorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["autor"]>



  export type AutorSelectScalar = {
    id_Autor?: boolean
    Nombre?: boolean
    Email?: boolean
    Estado?: boolean
  }

  export type AutorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id_Autor" | "Nombre" | "Email" | "Estado", ExtArgs["result"]["autor"]>
  export type AutorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Libro_Autor?: boolean | Autor$Libro_AutorArgs<ExtArgs>
    _count?: boolean | AutorCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $AutorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Autor"
    objects: {
      Libro_Autor: Prisma.$Libro_AutorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_Autor: number
      Nombre: string
      Email: string | null
      Estado: $Enums.Autor_Estado | null
    }, ExtArgs["result"]["autor"]>
    composites: {}
  }

  type AutorGetPayload<S extends boolean | null | undefined | AutorDefaultArgs> = $Result.GetResult<Prisma.$AutorPayload, S>

  type AutorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AutorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AutorCountAggregateInputType | true
    }

  export interface AutorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Autor'], meta: { name: 'Autor' } }
    /**
     * Find zero or one Autor that matches the filter.
     * @param {AutorFindUniqueArgs} args - Arguments to find a Autor
     * @example
     * // Get one Autor
     * const autor = await prisma.autor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AutorFindUniqueArgs>(args: SelectSubset<T, AutorFindUniqueArgs<ExtArgs>>): Prisma__AutorClient<$Result.GetResult<Prisma.$AutorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Autor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AutorFindUniqueOrThrowArgs} args - Arguments to find a Autor
     * @example
     * // Get one Autor
     * const autor = await prisma.autor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AutorFindUniqueOrThrowArgs>(args: SelectSubset<T, AutorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AutorClient<$Result.GetResult<Prisma.$AutorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Autor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutorFindFirstArgs} args - Arguments to find a Autor
     * @example
     * // Get one Autor
     * const autor = await prisma.autor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AutorFindFirstArgs>(args?: SelectSubset<T, AutorFindFirstArgs<ExtArgs>>): Prisma__AutorClient<$Result.GetResult<Prisma.$AutorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Autor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutorFindFirstOrThrowArgs} args - Arguments to find a Autor
     * @example
     * // Get one Autor
     * const autor = await prisma.autor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AutorFindFirstOrThrowArgs>(args?: SelectSubset<T, AutorFindFirstOrThrowArgs<ExtArgs>>): Prisma__AutorClient<$Result.GetResult<Prisma.$AutorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Autors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Autors
     * const autors = await prisma.autor.findMany()
     * 
     * // Get first 10 Autors
     * const autors = await prisma.autor.findMany({ take: 10 })
     * 
     * // Only select the `id_Autor`
     * const autorWithId_AutorOnly = await prisma.autor.findMany({ select: { id_Autor: true } })
     * 
     */
    findMany<T extends AutorFindManyArgs>(args?: SelectSubset<T, AutorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AutorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Autor.
     * @param {AutorCreateArgs} args - Arguments to create a Autor.
     * @example
     * // Create one Autor
     * const Autor = await prisma.autor.create({
     *   data: {
     *     // ... data to create a Autor
     *   }
     * })
     * 
     */
    create<T extends AutorCreateArgs>(args: SelectSubset<T, AutorCreateArgs<ExtArgs>>): Prisma__AutorClient<$Result.GetResult<Prisma.$AutorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Autors.
     * @param {AutorCreateManyArgs} args - Arguments to create many Autors.
     * @example
     * // Create many Autors
     * const autor = await prisma.autor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AutorCreateManyArgs>(args?: SelectSubset<T, AutorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Autor.
     * @param {AutorDeleteArgs} args - Arguments to delete one Autor.
     * @example
     * // Delete one Autor
     * const Autor = await prisma.autor.delete({
     *   where: {
     *     // ... filter to delete one Autor
     *   }
     * })
     * 
     */
    delete<T extends AutorDeleteArgs>(args: SelectSubset<T, AutorDeleteArgs<ExtArgs>>): Prisma__AutorClient<$Result.GetResult<Prisma.$AutorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Autor.
     * @param {AutorUpdateArgs} args - Arguments to update one Autor.
     * @example
     * // Update one Autor
     * const autor = await prisma.autor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AutorUpdateArgs>(args: SelectSubset<T, AutorUpdateArgs<ExtArgs>>): Prisma__AutorClient<$Result.GetResult<Prisma.$AutorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Autors.
     * @param {AutorDeleteManyArgs} args - Arguments to filter Autors to delete.
     * @example
     * // Delete a few Autors
     * const { count } = await prisma.autor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AutorDeleteManyArgs>(args?: SelectSubset<T, AutorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Autors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Autors
     * const autor = await prisma.autor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AutorUpdateManyArgs>(args: SelectSubset<T, AutorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Autor.
     * @param {AutorUpsertArgs} args - Arguments to update or create a Autor.
     * @example
     * // Update or create a Autor
     * const autor = await prisma.autor.upsert({
     *   create: {
     *     // ... data to create a Autor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Autor we want to update
     *   }
     * })
     */
    upsert<T extends AutorUpsertArgs>(args: SelectSubset<T, AutorUpsertArgs<ExtArgs>>): Prisma__AutorClient<$Result.GetResult<Prisma.$AutorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Autors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutorCountArgs} args - Arguments to filter Autors to count.
     * @example
     * // Count the number of Autors
     * const count = await prisma.autor.count({
     *   where: {
     *     // ... the filter for the Autors we want to count
     *   }
     * })
    **/
    count<T extends AutorCountArgs>(
      args?: Subset<T, AutorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AutorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Autor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AutorAggregateArgs>(args: Subset<T, AutorAggregateArgs>): Prisma.PrismaPromise<GetAutorAggregateType<T>>

    /**
     * Group by Autor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AutorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AutorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AutorGroupByArgs['orderBy'] }
        : { orderBy?: AutorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AutorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAutorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Autor model
   */
  readonly fields: AutorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Autor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AutorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Libro_Autor<T extends Autor$Libro_AutorArgs<ExtArgs> = {}>(args?: Subset<T, Autor$Libro_AutorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Libro_AutorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Autor model
   */
  interface AutorFieldRefs {
    readonly id_Autor: FieldRef<"Autor", 'Int'>
    readonly Nombre: FieldRef<"Autor", 'String'>
    readonly Email: FieldRef<"Autor", 'String'>
    readonly Estado: FieldRef<"Autor", 'Autor_Estado'>
  }
    

  // Custom InputTypes
  /**
   * Autor findUnique
   */
  export type AutorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Autor
     */
    select?: AutorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Autor
     */
    omit?: AutorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutorInclude<ExtArgs> | null
    /**
     * Filter, which Autor to fetch.
     */
    where: AutorWhereUniqueInput
  }

  /**
   * Autor findUniqueOrThrow
   */
  export type AutorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Autor
     */
    select?: AutorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Autor
     */
    omit?: AutorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutorInclude<ExtArgs> | null
    /**
     * Filter, which Autor to fetch.
     */
    where: AutorWhereUniqueInput
  }

  /**
   * Autor findFirst
   */
  export type AutorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Autor
     */
    select?: AutorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Autor
     */
    omit?: AutorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutorInclude<ExtArgs> | null
    /**
     * Filter, which Autor to fetch.
     */
    where?: AutorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Autors to fetch.
     */
    orderBy?: AutorOrderByWithRelationInput | AutorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Autors.
     */
    cursor?: AutorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Autors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Autors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Autors.
     */
    distinct?: AutorScalarFieldEnum | AutorScalarFieldEnum[]
  }

  /**
   * Autor findFirstOrThrow
   */
  export type AutorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Autor
     */
    select?: AutorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Autor
     */
    omit?: AutorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutorInclude<ExtArgs> | null
    /**
     * Filter, which Autor to fetch.
     */
    where?: AutorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Autors to fetch.
     */
    orderBy?: AutorOrderByWithRelationInput | AutorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Autors.
     */
    cursor?: AutorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Autors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Autors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Autors.
     */
    distinct?: AutorScalarFieldEnum | AutorScalarFieldEnum[]
  }

  /**
   * Autor findMany
   */
  export type AutorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Autor
     */
    select?: AutorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Autor
     */
    omit?: AutorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutorInclude<ExtArgs> | null
    /**
     * Filter, which Autors to fetch.
     */
    where?: AutorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Autors to fetch.
     */
    orderBy?: AutorOrderByWithRelationInput | AutorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Autors.
     */
    cursor?: AutorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Autors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Autors.
     */
    skip?: number
    distinct?: AutorScalarFieldEnum | AutorScalarFieldEnum[]
  }

  /**
   * Autor create
   */
  export type AutorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Autor
     */
    select?: AutorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Autor
     */
    omit?: AutorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutorInclude<ExtArgs> | null
    /**
     * The data needed to create a Autor.
     */
    data: XOR<AutorCreateInput, AutorUncheckedCreateInput>
  }

  /**
   * Autor createMany
   */
  export type AutorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Autors.
     */
    data: AutorCreateManyInput | AutorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Autor update
   */
  export type AutorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Autor
     */
    select?: AutorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Autor
     */
    omit?: AutorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutorInclude<ExtArgs> | null
    /**
     * The data needed to update a Autor.
     */
    data: XOR<AutorUpdateInput, AutorUncheckedUpdateInput>
    /**
     * Choose, which Autor to update.
     */
    where: AutorWhereUniqueInput
  }

  /**
   * Autor updateMany
   */
  export type AutorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Autors.
     */
    data: XOR<AutorUpdateManyMutationInput, AutorUncheckedUpdateManyInput>
    /**
     * Filter which Autors to update
     */
    where?: AutorWhereInput
    /**
     * Limit how many Autors to update.
     */
    limit?: number
  }

  /**
   * Autor upsert
   */
  export type AutorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Autor
     */
    select?: AutorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Autor
     */
    omit?: AutorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutorInclude<ExtArgs> | null
    /**
     * The filter to search for the Autor to update in case it exists.
     */
    where: AutorWhereUniqueInput
    /**
     * In case the Autor found by the `where` argument doesn't exist, create a new Autor with this data.
     */
    create: XOR<AutorCreateInput, AutorUncheckedCreateInput>
    /**
     * In case the Autor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AutorUpdateInput, AutorUncheckedUpdateInput>
  }

  /**
   * Autor delete
   */
  export type AutorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Autor
     */
    select?: AutorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Autor
     */
    omit?: AutorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutorInclude<ExtArgs> | null
    /**
     * Filter which Autor to delete.
     */
    where: AutorWhereUniqueInput
  }

  /**
   * Autor deleteMany
   */
  export type AutorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Autors to delete
     */
    where?: AutorWhereInput
    /**
     * Limit how many Autors to delete.
     */
    limit?: number
  }

  /**
   * Autor.Libro_Autor
   */
  export type Autor$Libro_AutorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Libro_Autor
     */
    select?: Libro_AutorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Libro_Autor
     */
    omit?: Libro_AutorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Libro_AutorInclude<ExtArgs> | null
    where?: Libro_AutorWhereInput
    orderBy?: Libro_AutorOrderByWithRelationInput | Libro_AutorOrderByWithRelationInput[]
    cursor?: Libro_AutorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Libro_AutorScalarFieldEnum | Libro_AutorScalarFieldEnum[]
  }

  /**
   * Autor without action
   */
  export type AutorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Autor
     */
    select?: AutorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Autor
     */
    omit?: AutorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AutorInclude<ExtArgs> | null
  }


  /**
   * Model Cliente
   */

  export type AggregateCliente = {
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  export type ClienteAvgAggregateOutputType = {
    id_Cliente: number | null
  }

  export type ClienteSumAggregateOutputType = {
    id_Cliente: number | null
  }

  export type ClienteMinAggregateOutputType = {
    id_Cliente: number | null
    Cedula: string | null
    Nombre: string | null
    Apellido: string | null
    FechaN: Date | null
    Direccion: string | null
    Telefono: string | null
    Estado: $Enums.Cliente_Estado | null
  }

  export type ClienteMaxAggregateOutputType = {
    id_Cliente: number | null
    Cedula: string | null
    Nombre: string | null
    Apellido: string | null
    FechaN: Date | null
    Direccion: string | null
    Telefono: string | null
    Estado: $Enums.Cliente_Estado | null
  }

  export type ClienteCountAggregateOutputType = {
    id_Cliente: number
    Cedula: number
    Nombre: number
    Apellido: number
    FechaN: number
    Direccion: number
    Telefono: number
    Estado: number
    _all: number
  }


  export type ClienteAvgAggregateInputType = {
    id_Cliente?: true
  }

  export type ClienteSumAggregateInputType = {
    id_Cliente?: true
  }

  export type ClienteMinAggregateInputType = {
    id_Cliente?: true
    Cedula?: true
    Nombre?: true
    Apellido?: true
    FechaN?: true
    Direccion?: true
    Telefono?: true
    Estado?: true
  }

  export type ClienteMaxAggregateInputType = {
    id_Cliente?: true
    Cedula?: true
    Nombre?: true
    Apellido?: true
    FechaN?: true
    Direccion?: true
    Telefono?: true
    Estado?: true
  }

  export type ClienteCountAggregateInputType = {
    id_Cliente?: true
    Cedula?: true
    Nombre?: true
    Apellido?: true
    FechaN?: true
    Direccion?: true
    Telefono?: true
    Estado?: true
    _all?: true
  }

  export type ClienteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cliente to aggregate.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clientes
    **/
    _count?: true | ClienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClienteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClienteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClienteMaxAggregateInputType
  }

  export type GetClienteAggregateType<T extends ClienteAggregateArgs> = {
        [P in keyof T & keyof AggregateCliente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCliente[P]>
      : GetScalarType<T[P], AggregateCliente[P]>
  }




  export type ClienteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteWhereInput
    orderBy?: ClienteOrderByWithAggregationInput | ClienteOrderByWithAggregationInput[]
    by: ClienteScalarFieldEnum[] | ClienteScalarFieldEnum
    having?: ClienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClienteCountAggregateInputType | true
    _avg?: ClienteAvgAggregateInputType
    _sum?: ClienteSumAggregateInputType
    _min?: ClienteMinAggregateInputType
    _max?: ClienteMaxAggregateInputType
  }

  export type ClienteGroupByOutputType = {
    id_Cliente: number
    Cedula: string
    Nombre: string
    Apellido: string
    FechaN: Date | null
    Direccion: string | null
    Telefono: string | null
    Estado: $Enums.Cliente_Estado | null
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  type GetClienteGroupByPayload<T extends ClienteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClienteGroupByOutputType[P]>
            : GetScalarType<T[P], ClienteGroupByOutputType[P]>
        }
      >
    >


  export type ClienteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_Cliente?: boolean
    Cedula?: boolean
    Nombre?: boolean
    Apellido?: boolean
    FechaN?: boolean
    Direccion?: boolean
    Telefono?: boolean
    Estado?: boolean
    facturas?: boolean | Cliente$facturasArgs<ExtArgs>
    _count?: boolean | ClienteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cliente"]>



  export type ClienteSelectScalar = {
    id_Cliente?: boolean
    Cedula?: boolean
    Nombre?: boolean
    Apellido?: boolean
    FechaN?: boolean
    Direccion?: boolean
    Telefono?: boolean
    Estado?: boolean
  }

  export type ClienteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id_Cliente" | "Cedula" | "Nombre" | "Apellido" | "FechaN" | "Direccion" | "Telefono" | "Estado", ExtArgs["result"]["cliente"]>
  export type ClienteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    facturas?: boolean | Cliente$facturasArgs<ExtArgs>
    _count?: boolean | ClienteCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ClientePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cliente"
    objects: {
      facturas: Prisma.$FacturaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_Cliente: number
      Cedula: string
      Nombre: string
      Apellido: string
      FechaN: Date | null
      Direccion: string | null
      Telefono: string | null
      Estado: $Enums.Cliente_Estado | null
    }, ExtArgs["result"]["cliente"]>
    composites: {}
  }

  type ClienteGetPayload<S extends boolean | null | undefined | ClienteDefaultArgs> = $Result.GetResult<Prisma.$ClientePayload, S>

  type ClienteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClienteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClienteCountAggregateInputType | true
    }

  export interface ClienteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cliente'], meta: { name: 'Cliente' } }
    /**
     * Find zero or one Cliente that matches the filter.
     * @param {ClienteFindUniqueArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClienteFindUniqueArgs>(args: SelectSubset<T, ClienteFindUniqueArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Cliente that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClienteFindUniqueOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClienteFindUniqueOrThrowArgs>(args: SelectSubset<T, ClienteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cliente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClienteFindFirstArgs>(args?: SelectSubset<T, ClienteFindFirstArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cliente that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClienteFindFirstOrThrowArgs>(args?: SelectSubset<T, ClienteFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clientes
     * const clientes = await prisma.cliente.findMany()
     * 
     * // Get first 10 Clientes
     * const clientes = await prisma.cliente.findMany({ take: 10 })
     * 
     * // Only select the `id_Cliente`
     * const clienteWithId_ClienteOnly = await prisma.cliente.findMany({ select: { id_Cliente: true } })
     * 
     */
    findMany<T extends ClienteFindManyArgs>(args?: SelectSubset<T, ClienteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Cliente.
     * @param {ClienteCreateArgs} args - Arguments to create a Cliente.
     * @example
     * // Create one Cliente
     * const Cliente = await prisma.cliente.create({
     *   data: {
     *     // ... data to create a Cliente
     *   }
     * })
     * 
     */
    create<T extends ClienteCreateArgs>(args: SelectSubset<T, ClienteCreateArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Clientes.
     * @param {ClienteCreateManyArgs} args - Arguments to create many Clientes.
     * @example
     * // Create many Clientes
     * const cliente = await prisma.cliente.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClienteCreateManyArgs>(args?: SelectSubset<T, ClienteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cliente.
     * @param {ClienteDeleteArgs} args - Arguments to delete one Cliente.
     * @example
     * // Delete one Cliente
     * const Cliente = await prisma.cliente.delete({
     *   where: {
     *     // ... filter to delete one Cliente
     *   }
     * })
     * 
     */
    delete<T extends ClienteDeleteArgs>(args: SelectSubset<T, ClienteDeleteArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Cliente.
     * @param {ClienteUpdateArgs} args - Arguments to update one Cliente.
     * @example
     * // Update one Cliente
     * const cliente = await prisma.cliente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClienteUpdateArgs>(args: SelectSubset<T, ClienteUpdateArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Clientes.
     * @param {ClienteDeleteManyArgs} args - Arguments to filter Clientes to delete.
     * @example
     * // Delete a few Clientes
     * const { count } = await prisma.cliente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClienteDeleteManyArgs>(args?: SelectSubset<T, ClienteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clientes
     * const cliente = await prisma.cliente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClienteUpdateManyArgs>(args: SelectSubset<T, ClienteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cliente.
     * @param {ClienteUpsertArgs} args - Arguments to update or create a Cliente.
     * @example
     * // Update or create a Cliente
     * const cliente = await prisma.cliente.upsert({
     *   create: {
     *     // ... data to create a Cliente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cliente we want to update
     *   }
     * })
     */
    upsert<T extends ClienteUpsertArgs>(args: SelectSubset<T, ClienteUpsertArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteCountArgs} args - Arguments to filter Clientes to count.
     * @example
     * // Count the number of Clientes
     * const count = await prisma.cliente.count({
     *   where: {
     *     // ... the filter for the Clientes we want to count
     *   }
     * })
    **/
    count<T extends ClienteCountArgs>(
      args?: Subset<T, ClienteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClienteAggregateArgs>(args: Subset<T, ClienteAggregateArgs>): Prisma.PrismaPromise<GetClienteAggregateType<T>>

    /**
     * Group by Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClienteGroupByArgs['orderBy'] }
        : { orderBy?: ClienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClienteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cliente model
   */
  readonly fields: ClienteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cliente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClienteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    facturas<T extends Cliente$facturasArgs<ExtArgs> = {}>(args?: Subset<T, Cliente$facturasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Cliente model
   */
  interface ClienteFieldRefs {
    readonly id_Cliente: FieldRef<"Cliente", 'Int'>
    readonly Cedula: FieldRef<"Cliente", 'String'>
    readonly Nombre: FieldRef<"Cliente", 'String'>
    readonly Apellido: FieldRef<"Cliente", 'String'>
    readonly FechaN: FieldRef<"Cliente", 'DateTime'>
    readonly Direccion: FieldRef<"Cliente", 'String'>
    readonly Telefono: FieldRef<"Cliente", 'String'>
    readonly Estado: FieldRef<"Cliente", 'Cliente_Estado'>
  }
    

  // Custom InputTypes
  /**
   * Cliente findUnique
   */
  export type ClienteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente findUniqueOrThrow
   */
  export type ClienteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente findFirst
   */
  export type ClienteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente findFirstOrThrow
   */
  export type ClienteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente findMany
   */
  export type ClienteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Clientes to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente create
   */
  export type ClienteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The data needed to create a Cliente.
     */
    data: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
  }

  /**
   * Cliente createMany
   */
  export type ClienteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clientes.
     */
    data: ClienteCreateManyInput | ClienteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cliente update
   */
  export type ClienteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The data needed to update a Cliente.
     */
    data: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
    /**
     * Choose, which Cliente to update.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente updateMany
   */
  export type ClienteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clientes.
     */
    data: XOR<ClienteUpdateManyMutationInput, ClienteUncheckedUpdateManyInput>
    /**
     * Filter which Clientes to update
     */
    where?: ClienteWhereInput
    /**
     * Limit how many Clientes to update.
     */
    limit?: number
  }

  /**
   * Cliente upsert
   */
  export type ClienteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The filter to search for the Cliente to update in case it exists.
     */
    where: ClienteWhereUniqueInput
    /**
     * In case the Cliente found by the `where` argument doesn't exist, create a new Cliente with this data.
     */
    create: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
    /**
     * In case the Cliente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
  }

  /**
   * Cliente delete
   */
  export type ClienteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter which Cliente to delete.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente deleteMany
   */
  export type ClienteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clientes to delete
     */
    where?: ClienteWhereInput
    /**
     * Limit how many Clientes to delete.
     */
    limit?: number
  }

  /**
   * Cliente.facturas
   */
  export type Cliente$facturasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Factura
     */
    omit?: FacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
    where?: FacturaWhereInput
    orderBy?: FacturaOrderByWithRelationInput | FacturaOrderByWithRelationInput[]
    cursor?: FacturaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FacturaScalarFieldEnum | FacturaScalarFieldEnum[]
  }

  /**
   * Cliente without action
   */
  export type ClienteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
  }


  /**
   * Model DetalleFactura
   */

  export type AggregateDetalleFactura = {
    _count: DetalleFacturaCountAggregateOutputType | null
    _avg: DetalleFacturaAvgAggregateOutputType | null
    _sum: DetalleFacturaSumAggregateOutputType | null
    _min: DetalleFacturaMinAggregateOutputType | null
    _max: DetalleFacturaMaxAggregateOutputType | null
  }

  export type DetalleFacturaAvgAggregateOutputType = {
    id_Detalle: number | null
    cantidad: number | null
    precio_uni: Decimal | null
    id_Compra: number | null
    id_Libro: number | null
  }

  export type DetalleFacturaSumAggregateOutputType = {
    id_Detalle: number | null
    cantidad: number | null
    precio_uni: Decimal | null
    id_Compra: number | null
    id_Libro: number | null
  }

  export type DetalleFacturaMinAggregateOutputType = {
    id_Detalle: number | null
    cantidad: number | null
    precio_uni: Decimal | null
    id_Compra: number | null
    id_Libro: number | null
  }

  export type DetalleFacturaMaxAggregateOutputType = {
    id_Detalle: number | null
    cantidad: number | null
    precio_uni: Decimal | null
    id_Compra: number | null
    id_Libro: number | null
  }

  export type DetalleFacturaCountAggregateOutputType = {
    id_Detalle: number
    cantidad: number
    precio_uni: number
    id_Compra: number
    id_Libro: number
    _all: number
  }


  export type DetalleFacturaAvgAggregateInputType = {
    id_Detalle?: true
    cantidad?: true
    precio_uni?: true
    id_Compra?: true
    id_Libro?: true
  }

  export type DetalleFacturaSumAggregateInputType = {
    id_Detalle?: true
    cantidad?: true
    precio_uni?: true
    id_Compra?: true
    id_Libro?: true
  }

  export type DetalleFacturaMinAggregateInputType = {
    id_Detalle?: true
    cantidad?: true
    precio_uni?: true
    id_Compra?: true
    id_Libro?: true
  }

  export type DetalleFacturaMaxAggregateInputType = {
    id_Detalle?: true
    cantidad?: true
    precio_uni?: true
    id_Compra?: true
    id_Libro?: true
  }

  export type DetalleFacturaCountAggregateInputType = {
    id_Detalle?: true
    cantidad?: true
    precio_uni?: true
    id_Compra?: true
    id_Libro?: true
    _all?: true
  }

  export type DetalleFacturaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DetalleFactura to aggregate.
     */
    where?: DetalleFacturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DetalleFacturas to fetch.
     */
    orderBy?: DetalleFacturaOrderByWithRelationInput | DetalleFacturaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DetalleFacturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DetalleFacturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DetalleFacturas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DetalleFacturas
    **/
    _count?: true | DetalleFacturaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DetalleFacturaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DetalleFacturaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DetalleFacturaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DetalleFacturaMaxAggregateInputType
  }

  export type GetDetalleFacturaAggregateType<T extends DetalleFacturaAggregateArgs> = {
        [P in keyof T & keyof AggregateDetalleFactura]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDetalleFactura[P]>
      : GetScalarType<T[P], AggregateDetalleFactura[P]>
  }




  export type DetalleFacturaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DetalleFacturaWhereInput
    orderBy?: DetalleFacturaOrderByWithAggregationInput | DetalleFacturaOrderByWithAggregationInput[]
    by: DetalleFacturaScalarFieldEnum[] | DetalleFacturaScalarFieldEnum
    having?: DetalleFacturaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DetalleFacturaCountAggregateInputType | true
    _avg?: DetalleFacturaAvgAggregateInputType
    _sum?: DetalleFacturaSumAggregateInputType
    _min?: DetalleFacturaMinAggregateInputType
    _max?: DetalleFacturaMaxAggregateInputType
  }

  export type DetalleFacturaGroupByOutputType = {
    id_Detalle: number
    cantidad: number
    precio_uni: Decimal
    id_Compra: number | null
    id_Libro: number | null
    _count: DetalleFacturaCountAggregateOutputType | null
    _avg: DetalleFacturaAvgAggregateOutputType | null
    _sum: DetalleFacturaSumAggregateOutputType | null
    _min: DetalleFacturaMinAggregateOutputType | null
    _max: DetalleFacturaMaxAggregateOutputType | null
  }

  type GetDetalleFacturaGroupByPayload<T extends DetalleFacturaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DetalleFacturaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DetalleFacturaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DetalleFacturaGroupByOutputType[P]>
            : GetScalarType<T[P], DetalleFacturaGroupByOutputType[P]>
        }
      >
    >


  export type DetalleFacturaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_Detalle?: boolean
    cantidad?: boolean
    precio_uni?: boolean
    id_Compra?: boolean
    id_Libro?: boolean
    Factura?: boolean | DetalleFactura$FacturaArgs<ExtArgs>
    libro?: boolean | DetalleFactura$libroArgs<ExtArgs>
  }, ExtArgs["result"]["detalleFactura"]>



  export type DetalleFacturaSelectScalar = {
    id_Detalle?: boolean
    cantidad?: boolean
    precio_uni?: boolean
    id_Compra?: boolean
    id_Libro?: boolean
  }

  export type DetalleFacturaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id_Detalle" | "cantidad" | "precio_uni" | "id_Compra" | "id_Libro", ExtArgs["result"]["detalleFactura"]>
  export type DetalleFacturaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Factura?: boolean | DetalleFactura$FacturaArgs<ExtArgs>
    libro?: boolean | DetalleFactura$libroArgs<ExtArgs>
  }

  export type $DetalleFacturaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DetalleFactura"
    objects: {
      Factura: Prisma.$FacturaPayload<ExtArgs> | null
      libro: Prisma.$LibroPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id_Detalle: number
      cantidad: number
      precio_uni: Prisma.Decimal
      id_Compra: number | null
      id_Libro: number | null
    }, ExtArgs["result"]["detalleFactura"]>
    composites: {}
  }

  type DetalleFacturaGetPayload<S extends boolean | null | undefined | DetalleFacturaDefaultArgs> = $Result.GetResult<Prisma.$DetalleFacturaPayload, S>

  type DetalleFacturaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DetalleFacturaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DetalleFacturaCountAggregateInputType | true
    }

  export interface DetalleFacturaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DetalleFactura'], meta: { name: 'DetalleFactura' } }
    /**
     * Find zero or one DetalleFactura that matches the filter.
     * @param {DetalleFacturaFindUniqueArgs} args - Arguments to find a DetalleFactura
     * @example
     * // Get one DetalleFactura
     * const detalleFactura = await prisma.detalleFactura.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DetalleFacturaFindUniqueArgs>(args: SelectSubset<T, DetalleFacturaFindUniqueArgs<ExtArgs>>): Prisma__DetalleFacturaClient<$Result.GetResult<Prisma.$DetalleFacturaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DetalleFactura that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DetalleFacturaFindUniqueOrThrowArgs} args - Arguments to find a DetalleFactura
     * @example
     * // Get one DetalleFactura
     * const detalleFactura = await prisma.detalleFactura.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DetalleFacturaFindUniqueOrThrowArgs>(args: SelectSubset<T, DetalleFacturaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DetalleFacturaClient<$Result.GetResult<Prisma.$DetalleFacturaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DetalleFactura that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetalleFacturaFindFirstArgs} args - Arguments to find a DetalleFactura
     * @example
     * // Get one DetalleFactura
     * const detalleFactura = await prisma.detalleFactura.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DetalleFacturaFindFirstArgs>(args?: SelectSubset<T, DetalleFacturaFindFirstArgs<ExtArgs>>): Prisma__DetalleFacturaClient<$Result.GetResult<Prisma.$DetalleFacturaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DetalleFactura that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetalleFacturaFindFirstOrThrowArgs} args - Arguments to find a DetalleFactura
     * @example
     * // Get one DetalleFactura
     * const detalleFactura = await prisma.detalleFactura.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DetalleFacturaFindFirstOrThrowArgs>(args?: SelectSubset<T, DetalleFacturaFindFirstOrThrowArgs<ExtArgs>>): Prisma__DetalleFacturaClient<$Result.GetResult<Prisma.$DetalleFacturaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DetalleFacturas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetalleFacturaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DetalleFacturas
     * const detalleFacturas = await prisma.detalleFactura.findMany()
     * 
     * // Get first 10 DetalleFacturas
     * const detalleFacturas = await prisma.detalleFactura.findMany({ take: 10 })
     * 
     * // Only select the `id_Detalle`
     * const detalleFacturaWithId_DetalleOnly = await prisma.detalleFactura.findMany({ select: { id_Detalle: true } })
     * 
     */
    findMany<T extends DetalleFacturaFindManyArgs>(args?: SelectSubset<T, DetalleFacturaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DetalleFacturaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DetalleFactura.
     * @param {DetalleFacturaCreateArgs} args - Arguments to create a DetalleFactura.
     * @example
     * // Create one DetalleFactura
     * const DetalleFactura = await prisma.detalleFactura.create({
     *   data: {
     *     // ... data to create a DetalleFactura
     *   }
     * })
     * 
     */
    create<T extends DetalleFacturaCreateArgs>(args: SelectSubset<T, DetalleFacturaCreateArgs<ExtArgs>>): Prisma__DetalleFacturaClient<$Result.GetResult<Prisma.$DetalleFacturaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DetalleFacturas.
     * @param {DetalleFacturaCreateManyArgs} args - Arguments to create many DetalleFacturas.
     * @example
     * // Create many DetalleFacturas
     * const detalleFactura = await prisma.detalleFactura.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DetalleFacturaCreateManyArgs>(args?: SelectSubset<T, DetalleFacturaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DetalleFactura.
     * @param {DetalleFacturaDeleteArgs} args - Arguments to delete one DetalleFactura.
     * @example
     * // Delete one DetalleFactura
     * const DetalleFactura = await prisma.detalleFactura.delete({
     *   where: {
     *     // ... filter to delete one DetalleFactura
     *   }
     * })
     * 
     */
    delete<T extends DetalleFacturaDeleteArgs>(args: SelectSubset<T, DetalleFacturaDeleteArgs<ExtArgs>>): Prisma__DetalleFacturaClient<$Result.GetResult<Prisma.$DetalleFacturaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DetalleFactura.
     * @param {DetalleFacturaUpdateArgs} args - Arguments to update one DetalleFactura.
     * @example
     * // Update one DetalleFactura
     * const detalleFactura = await prisma.detalleFactura.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DetalleFacturaUpdateArgs>(args: SelectSubset<T, DetalleFacturaUpdateArgs<ExtArgs>>): Prisma__DetalleFacturaClient<$Result.GetResult<Prisma.$DetalleFacturaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DetalleFacturas.
     * @param {DetalleFacturaDeleteManyArgs} args - Arguments to filter DetalleFacturas to delete.
     * @example
     * // Delete a few DetalleFacturas
     * const { count } = await prisma.detalleFactura.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DetalleFacturaDeleteManyArgs>(args?: SelectSubset<T, DetalleFacturaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DetalleFacturas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetalleFacturaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DetalleFacturas
     * const detalleFactura = await prisma.detalleFactura.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DetalleFacturaUpdateManyArgs>(args: SelectSubset<T, DetalleFacturaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DetalleFactura.
     * @param {DetalleFacturaUpsertArgs} args - Arguments to update or create a DetalleFactura.
     * @example
     * // Update or create a DetalleFactura
     * const detalleFactura = await prisma.detalleFactura.upsert({
     *   create: {
     *     // ... data to create a DetalleFactura
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DetalleFactura we want to update
     *   }
     * })
     */
    upsert<T extends DetalleFacturaUpsertArgs>(args: SelectSubset<T, DetalleFacturaUpsertArgs<ExtArgs>>): Prisma__DetalleFacturaClient<$Result.GetResult<Prisma.$DetalleFacturaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DetalleFacturas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetalleFacturaCountArgs} args - Arguments to filter DetalleFacturas to count.
     * @example
     * // Count the number of DetalleFacturas
     * const count = await prisma.detalleFactura.count({
     *   where: {
     *     // ... the filter for the DetalleFacturas we want to count
     *   }
     * })
    **/
    count<T extends DetalleFacturaCountArgs>(
      args?: Subset<T, DetalleFacturaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DetalleFacturaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DetalleFactura.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetalleFacturaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DetalleFacturaAggregateArgs>(args: Subset<T, DetalleFacturaAggregateArgs>): Prisma.PrismaPromise<GetDetalleFacturaAggregateType<T>>

    /**
     * Group by DetalleFactura.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetalleFacturaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DetalleFacturaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DetalleFacturaGroupByArgs['orderBy'] }
        : { orderBy?: DetalleFacturaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DetalleFacturaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDetalleFacturaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DetalleFactura model
   */
  readonly fields: DetalleFacturaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DetalleFactura.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DetalleFacturaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Factura<T extends DetalleFactura$FacturaArgs<ExtArgs> = {}>(args?: Subset<T, DetalleFactura$FacturaArgs<ExtArgs>>): Prisma__FacturaClient<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    libro<T extends DetalleFactura$libroArgs<ExtArgs> = {}>(args?: Subset<T, DetalleFactura$libroArgs<ExtArgs>>): Prisma__LibroClient<$Result.GetResult<Prisma.$LibroPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DetalleFactura model
   */
  interface DetalleFacturaFieldRefs {
    readonly id_Detalle: FieldRef<"DetalleFactura", 'Int'>
    readonly cantidad: FieldRef<"DetalleFactura", 'Int'>
    readonly precio_uni: FieldRef<"DetalleFactura", 'Decimal'>
    readonly id_Compra: FieldRef<"DetalleFactura", 'Int'>
    readonly id_Libro: FieldRef<"DetalleFactura", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * DetalleFactura findUnique
   */
  export type DetalleFacturaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetalleFactura
     */
    select?: DetalleFacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DetalleFactura
     */
    omit?: DetalleFacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetalleFacturaInclude<ExtArgs> | null
    /**
     * Filter, which DetalleFactura to fetch.
     */
    where: DetalleFacturaWhereUniqueInput
  }

  /**
   * DetalleFactura findUniqueOrThrow
   */
  export type DetalleFacturaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetalleFactura
     */
    select?: DetalleFacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DetalleFactura
     */
    omit?: DetalleFacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetalleFacturaInclude<ExtArgs> | null
    /**
     * Filter, which DetalleFactura to fetch.
     */
    where: DetalleFacturaWhereUniqueInput
  }

  /**
   * DetalleFactura findFirst
   */
  export type DetalleFacturaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetalleFactura
     */
    select?: DetalleFacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DetalleFactura
     */
    omit?: DetalleFacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetalleFacturaInclude<ExtArgs> | null
    /**
     * Filter, which DetalleFactura to fetch.
     */
    where?: DetalleFacturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DetalleFacturas to fetch.
     */
    orderBy?: DetalleFacturaOrderByWithRelationInput | DetalleFacturaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DetalleFacturas.
     */
    cursor?: DetalleFacturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DetalleFacturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DetalleFacturas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DetalleFacturas.
     */
    distinct?: DetalleFacturaScalarFieldEnum | DetalleFacturaScalarFieldEnum[]
  }

  /**
   * DetalleFactura findFirstOrThrow
   */
  export type DetalleFacturaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetalleFactura
     */
    select?: DetalleFacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DetalleFactura
     */
    omit?: DetalleFacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetalleFacturaInclude<ExtArgs> | null
    /**
     * Filter, which DetalleFactura to fetch.
     */
    where?: DetalleFacturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DetalleFacturas to fetch.
     */
    orderBy?: DetalleFacturaOrderByWithRelationInput | DetalleFacturaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DetalleFacturas.
     */
    cursor?: DetalleFacturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DetalleFacturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DetalleFacturas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DetalleFacturas.
     */
    distinct?: DetalleFacturaScalarFieldEnum | DetalleFacturaScalarFieldEnum[]
  }

  /**
   * DetalleFactura findMany
   */
  export type DetalleFacturaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetalleFactura
     */
    select?: DetalleFacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DetalleFactura
     */
    omit?: DetalleFacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetalleFacturaInclude<ExtArgs> | null
    /**
     * Filter, which DetalleFacturas to fetch.
     */
    where?: DetalleFacturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DetalleFacturas to fetch.
     */
    orderBy?: DetalleFacturaOrderByWithRelationInput | DetalleFacturaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DetalleFacturas.
     */
    cursor?: DetalleFacturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DetalleFacturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DetalleFacturas.
     */
    skip?: number
    distinct?: DetalleFacturaScalarFieldEnum | DetalleFacturaScalarFieldEnum[]
  }

  /**
   * DetalleFactura create
   */
  export type DetalleFacturaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetalleFactura
     */
    select?: DetalleFacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DetalleFactura
     */
    omit?: DetalleFacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetalleFacturaInclude<ExtArgs> | null
    /**
     * The data needed to create a DetalleFactura.
     */
    data: XOR<DetalleFacturaCreateInput, DetalleFacturaUncheckedCreateInput>
  }

  /**
   * DetalleFactura createMany
   */
  export type DetalleFacturaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DetalleFacturas.
     */
    data: DetalleFacturaCreateManyInput | DetalleFacturaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DetalleFactura update
   */
  export type DetalleFacturaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetalleFactura
     */
    select?: DetalleFacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DetalleFactura
     */
    omit?: DetalleFacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetalleFacturaInclude<ExtArgs> | null
    /**
     * The data needed to update a DetalleFactura.
     */
    data: XOR<DetalleFacturaUpdateInput, DetalleFacturaUncheckedUpdateInput>
    /**
     * Choose, which DetalleFactura to update.
     */
    where: DetalleFacturaWhereUniqueInput
  }

  /**
   * DetalleFactura updateMany
   */
  export type DetalleFacturaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DetalleFacturas.
     */
    data: XOR<DetalleFacturaUpdateManyMutationInput, DetalleFacturaUncheckedUpdateManyInput>
    /**
     * Filter which DetalleFacturas to update
     */
    where?: DetalleFacturaWhereInput
    /**
     * Limit how many DetalleFacturas to update.
     */
    limit?: number
  }

  /**
   * DetalleFactura upsert
   */
  export type DetalleFacturaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetalleFactura
     */
    select?: DetalleFacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DetalleFactura
     */
    omit?: DetalleFacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetalleFacturaInclude<ExtArgs> | null
    /**
     * The filter to search for the DetalleFactura to update in case it exists.
     */
    where: DetalleFacturaWhereUniqueInput
    /**
     * In case the DetalleFactura found by the `where` argument doesn't exist, create a new DetalleFactura with this data.
     */
    create: XOR<DetalleFacturaCreateInput, DetalleFacturaUncheckedCreateInput>
    /**
     * In case the DetalleFactura was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DetalleFacturaUpdateInput, DetalleFacturaUncheckedUpdateInput>
  }

  /**
   * DetalleFactura delete
   */
  export type DetalleFacturaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetalleFactura
     */
    select?: DetalleFacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DetalleFactura
     */
    omit?: DetalleFacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetalleFacturaInclude<ExtArgs> | null
    /**
     * Filter which DetalleFactura to delete.
     */
    where: DetalleFacturaWhereUniqueInput
  }

  /**
   * DetalleFactura deleteMany
   */
  export type DetalleFacturaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DetalleFacturas to delete
     */
    where?: DetalleFacturaWhereInput
    /**
     * Limit how many DetalleFacturas to delete.
     */
    limit?: number
  }

  /**
   * DetalleFactura.Factura
   */
  export type DetalleFactura$FacturaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Factura
     */
    omit?: FacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
    where?: FacturaWhereInput
  }

  /**
   * DetalleFactura.libro
   */
  export type DetalleFactura$libroArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Libro
     */
    select?: LibroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Libro
     */
    omit?: LibroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibroInclude<ExtArgs> | null
    where?: LibroWhereInput
  }

  /**
   * DetalleFactura without action
   */
  export type DetalleFacturaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetalleFactura
     */
    select?: DetalleFacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DetalleFactura
     */
    omit?: DetalleFacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetalleFacturaInclude<ExtArgs> | null
  }


  /**
   * Model Editorial
   */

  export type AggregateEditorial = {
    _count: EditorialCountAggregateOutputType | null
    _avg: EditorialAvgAggregateOutputType | null
    _sum: EditorialSumAggregateOutputType | null
    _min: EditorialMinAggregateOutputType | null
    _max: EditorialMaxAggregateOutputType | null
  }

  export type EditorialAvgAggregateOutputType = {
    id_Editorial: number | null
  }

  export type EditorialSumAggregateOutputType = {
    id_Editorial: number | null
  }

  export type EditorialMinAggregateOutputType = {
    id_Editorial: number | null
    Nombre: string | null
    Telefono: string | null
    Email: string | null
    SitioWeb: string | null
  }

  export type EditorialMaxAggregateOutputType = {
    id_Editorial: number | null
    Nombre: string | null
    Telefono: string | null
    Email: string | null
    SitioWeb: string | null
  }

  export type EditorialCountAggregateOutputType = {
    id_Editorial: number
    Nombre: number
    Telefono: number
    Email: number
    SitioWeb: number
    _all: number
  }


  export type EditorialAvgAggregateInputType = {
    id_Editorial?: true
  }

  export type EditorialSumAggregateInputType = {
    id_Editorial?: true
  }

  export type EditorialMinAggregateInputType = {
    id_Editorial?: true
    Nombre?: true
    Telefono?: true
    Email?: true
    SitioWeb?: true
  }

  export type EditorialMaxAggregateInputType = {
    id_Editorial?: true
    Nombre?: true
    Telefono?: true
    Email?: true
    SitioWeb?: true
  }

  export type EditorialCountAggregateInputType = {
    id_Editorial?: true
    Nombre?: true
    Telefono?: true
    Email?: true
    SitioWeb?: true
    _all?: true
  }

  export type EditorialAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Editorial to aggregate.
     */
    where?: EditorialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Editorials to fetch.
     */
    orderBy?: EditorialOrderByWithRelationInput | EditorialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EditorialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Editorials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Editorials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Editorials
    **/
    _count?: true | EditorialCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EditorialAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EditorialSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EditorialMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EditorialMaxAggregateInputType
  }

  export type GetEditorialAggregateType<T extends EditorialAggregateArgs> = {
        [P in keyof T & keyof AggregateEditorial]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEditorial[P]>
      : GetScalarType<T[P], AggregateEditorial[P]>
  }




  export type EditorialGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EditorialWhereInput
    orderBy?: EditorialOrderByWithAggregationInput | EditorialOrderByWithAggregationInput[]
    by: EditorialScalarFieldEnum[] | EditorialScalarFieldEnum
    having?: EditorialScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EditorialCountAggregateInputType | true
    _avg?: EditorialAvgAggregateInputType
    _sum?: EditorialSumAggregateInputType
    _min?: EditorialMinAggregateInputType
    _max?: EditorialMaxAggregateInputType
  }

  export type EditorialGroupByOutputType = {
    id_Editorial: number
    Nombre: string
    Telefono: string | null
    Email: string | null
    SitioWeb: string | null
    _count: EditorialCountAggregateOutputType | null
    _avg: EditorialAvgAggregateOutputType | null
    _sum: EditorialSumAggregateOutputType | null
    _min: EditorialMinAggregateOutputType | null
    _max: EditorialMaxAggregateOutputType | null
  }

  type GetEditorialGroupByPayload<T extends EditorialGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EditorialGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EditorialGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EditorialGroupByOutputType[P]>
            : GetScalarType<T[P], EditorialGroupByOutputType[P]>
        }
      >
    >


  export type EditorialSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_Editorial?: boolean
    Nombre?: boolean
    Telefono?: boolean
    Email?: boolean
    SitioWeb?: boolean
    libros?: boolean | Editorial$librosArgs<ExtArgs>
    _count?: boolean | EditorialCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["editorial"]>



  export type EditorialSelectScalar = {
    id_Editorial?: boolean
    Nombre?: boolean
    Telefono?: boolean
    Email?: boolean
    SitioWeb?: boolean
  }

  export type EditorialOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id_Editorial" | "Nombre" | "Telefono" | "Email" | "SitioWeb", ExtArgs["result"]["editorial"]>
  export type EditorialInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    libros?: boolean | Editorial$librosArgs<ExtArgs>
    _count?: boolean | EditorialCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $EditorialPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Editorial"
    objects: {
      libros: Prisma.$LibroPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_Editorial: number
      Nombre: string
      Telefono: string | null
      Email: string | null
      SitioWeb: string | null
    }, ExtArgs["result"]["editorial"]>
    composites: {}
  }

  type EditorialGetPayload<S extends boolean | null | undefined | EditorialDefaultArgs> = $Result.GetResult<Prisma.$EditorialPayload, S>

  type EditorialCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EditorialFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EditorialCountAggregateInputType | true
    }

  export interface EditorialDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Editorial'], meta: { name: 'Editorial' } }
    /**
     * Find zero or one Editorial that matches the filter.
     * @param {EditorialFindUniqueArgs} args - Arguments to find a Editorial
     * @example
     * // Get one Editorial
     * const editorial = await prisma.editorial.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EditorialFindUniqueArgs>(args: SelectSubset<T, EditorialFindUniqueArgs<ExtArgs>>): Prisma__EditorialClient<$Result.GetResult<Prisma.$EditorialPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Editorial that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EditorialFindUniqueOrThrowArgs} args - Arguments to find a Editorial
     * @example
     * // Get one Editorial
     * const editorial = await prisma.editorial.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EditorialFindUniqueOrThrowArgs>(args: SelectSubset<T, EditorialFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EditorialClient<$Result.GetResult<Prisma.$EditorialPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Editorial that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EditorialFindFirstArgs} args - Arguments to find a Editorial
     * @example
     * // Get one Editorial
     * const editorial = await prisma.editorial.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EditorialFindFirstArgs>(args?: SelectSubset<T, EditorialFindFirstArgs<ExtArgs>>): Prisma__EditorialClient<$Result.GetResult<Prisma.$EditorialPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Editorial that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EditorialFindFirstOrThrowArgs} args - Arguments to find a Editorial
     * @example
     * // Get one Editorial
     * const editorial = await prisma.editorial.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EditorialFindFirstOrThrowArgs>(args?: SelectSubset<T, EditorialFindFirstOrThrowArgs<ExtArgs>>): Prisma__EditorialClient<$Result.GetResult<Prisma.$EditorialPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Editorials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EditorialFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Editorials
     * const editorials = await prisma.editorial.findMany()
     * 
     * // Get first 10 Editorials
     * const editorials = await prisma.editorial.findMany({ take: 10 })
     * 
     * // Only select the `id_Editorial`
     * const editorialWithId_EditorialOnly = await prisma.editorial.findMany({ select: { id_Editorial: true } })
     * 
     */
    findMany<T extends EditorialFindManyArgs>(args?: SelectSubset<T, EditorialFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EditorialPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Editorial.
     * @param {EditorialCreateArgs} args - Arguments to create a Editorial.
     * @example
     * // Create one Editorial
     * const Editorial = await prisma.editorial.create({
     *   data: {
     *     // ... data to create a Editorial
     *   }
     * })
     * 
     */
    create<T extends EditorialCreateArgs>(args: SelectSubset<T, EditorialCreateArgs<ExtArgs>>): Prisma__EditorialClient<$Result.GetResult<Prisma.$EditorialPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Editorials.
     * @param {EditorialCreateManyArgs} args - Arguments to create many Editorials.
     * @example
     * // Create many Editorials
     * const editorial = await prisma.editorial.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EditorialCreateManyArgs>(args?: SelectSubset<T, EditorialCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Editorial.
     * @param {EditorialDeleteArgs} args - Arguments to delete one Editorial.
     * @example
     * // Delete one Editorial
     * const Editorial = await prisma.editorial.delete({
     *   where: {
     *     // ... filter to delete one Editorial
     *   }
     * })
     * 
     */
    delete<T extends EditorialDeleteArgs>(args: SelectSubset<T, EditorialDeleteArgs<ExtArgs>>): Prisma__EditorialClient<$Result.GetResult<Prisma.$EditorialPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Editorial.
     * @param {EditorialUpdateArgs} args - Arguments to update one Editorial.
     * @example
     * // Update one Editorial
     * const editorial = await prisma.editorial.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EditorialUpdateArgs>(args: SelectSubset<T, EditorialUpdateArgs<ExtArgs>>): Prisma__EditorialClient<$Result.GetResult<Prisma.$EditorialPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Editorials.
     * @param {EditorialDeleteManyArgs} args - Arguments to filter Editorials to delete.
     * @example
     * // Delete a few Editorials
     * const { count } = await prisma.editorial.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EditorialDeleteManyArgs>(args?: SelectSubset<T, EditorialDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Editorials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EditorialUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Editorials
     * const editorial = await prisma.editorial.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EditorialUpdateManyArgs>(args: SelectSubset<T, EditorialUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Editorial.
     * @param {EditorialUpsertArgs} args - Arguments to update or create a Editorial.
     * @example
     * // Update or create a Editorial
     * const editorial = await prisma.editorial.upsert({
     *   create: {
     *     // ... data to create a Editorial
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Editorial we want to update
     *   }
     * })
     */
    upsert<T extends EditorialUpsertArgs>(args: SelectSubset<T, EditorialUpsertArgs<ExtArgs>>): Prisma__EditorialClient<$Result.GetResult<Prisma.$EditorialPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Editorials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EditorialCountArgs} args - Arguments to filter Editorials to count.
     * @example
     * // Count the number of Editorials
     * const count = await prisma.editorial.count({
     *   where: {
     *     // ... the filter for the Editorials we want to count
     *   }
     * })
    **/
    count<T extends EditorialCountArgs>(
      args?: Subset<T, EditorialCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EditorialCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Editorial.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EditorialAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EditorialAggregateArgs>(args: Subset<T, EditorialAggregateArgs>): Prisma.PrismaPromise<GetEditorialAggregateType<T>>

    /**
     * Group by Editorial.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EditorialGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EditorialGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EditorialGroupByArgs['orderBy'] }
        : { orderBy?: EditorialGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EditorialGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEditorialGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Editorial model
   */
  readonly fields: EditorialFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Editorial.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EditorialClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    libros<T extends Editorial$librosArgs<ExtArgs> = {}>(args?: Subset<T, Editorial$librosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LibroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Editorial model
   */
  interface EditorialFieldRefs {
    readonly id_Editorial: FieldRef<"Editorial", 'Int'>
    readonly Nombre: FieldRef<"Editorial", 'String'>
    readonly Telefono: FieldRef<"Editorial", 'String'>
    readonly Email: FieldRef<"Editorial", 'String'>
    readonly SitioWeb: FieldRef<"Editorial", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Editorial findUnique
   */
  export type EditorialFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Editorial
     */
    select?: EditorialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Editorial
     */
    omit?: EditorialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EditorialInclude<ExtArgs> | null
    /**
     * Filter, which Editorial to fetch.
     */
    where: EditorialWhereUniqueInput
  }

  /**
   * Editorial findUniqueOrThrow
   */
  export type EditorialFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Editorial
     */
    select?: EditorialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Editorial
     */
    omit?: EditorialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EditorialInclude<ExtArgs> | null
    /**
     * Filter, which Editorial to fetch.
     */
    where: EditorialWhereUniqueInput
  }

  /**
   * Editorial findFirst
   */
  export type EditorialFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Editorial
     */
    select?: EditorialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Editorial
     */
    omit?: EditorialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EditorialInclude<ExtArgs> | null
    /**
     * Filter, which Editorial to fetch.
     */
    where?: EditorialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Editorials to fetch.
     */
    orderBy?: EditorialOrderByWithRelationInput | EditorialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Editorials.
     */
    cursor?: EditorialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Editorials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Editorials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Editorials.
     */
    distinct?: EditorialScalarFieldEnum | EditorialScalarFieldEnum[]
  }

  /**
   * Editorial findFirstOrThrow
   */
  export type EditorialFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Editorial
     */
    select?: EditorialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Editorial
     */
    omit?: EditorialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EditorialInclude<ExtArgs> | null
    /**
     * Filter, which Editorial to fetch.
     */
    where?: EditorialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Editorials to fetch.
     */
    orderBy?: EditorialOrderByWithRelationInput | EditorialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Editorials.
     */
    cursor?: EditorialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Editorials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Editorials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Editorials.
     */
    distinct?: EditorialScalarFieldEnum | EditorialScalarFieldEnum[]
  }

  /**
   * Editorial findMany
   */
  export type EditorialFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Editorial
     */
    select?: EditorialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Editorial
     */
    omit?: EditorialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EditorialInclude<ExtArgs> | null
    /**
     * Filter, which Editorials to fetch.
     */
    where?: EditorialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Editorials to fetch.
     */
    orderBy?: EditorialOrderByWithRelationInput | EditorialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Editorials.
     */
    cursor?: EditorialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Editorials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Editorials.
     */
    skip?: number
    distinct?: EditorialScalarFieldEnum | EditorialScalarFieldEnum[]
  }

  /**
   * Editorial create
   */
  export type EditorialCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Editorial
     */
    select?: EditorialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Editorial
     */
    omit?: EditorialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EditorialInclude<ExtArgs> | null
    /**
     * The data needed to create a Editorial.
     */
    data: XOR<EditorialCreateInput, EditorialUncheckedCreateInput>
  }

  /**
   * Editorial createMany
   */
  export type EditorialCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Editorials.
     */
    data: EditorialCreateManyInput | EditorialCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Editorial update
   */
  export type EditorialUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Editorial
     */
    select?: EditorialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Editorial
     */
    omit?: EditorialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EditorialInclude<ExtArgs> | null
    /**
     * The data needed to update a Editorial.
     */
    data: XOR<EditorialUpdateInput, EditorialUncheckedUpdateInput>
    /**
     * Choose, which Editorial to update.
     */
    where: EditorialWhereUniqueInput
  }

  /**
   * Editorial updateMany
   */
  export type EditorialUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Editorials.
     */
    data: XOR<EditorialUpdateManyMutationInput, EditorialUncheckedUpdateManyInput>
    /**
     * Filter which Editorials to update
     */
    where?: EditorialWhereInput
    /**
     * Limit how many Editorials to update.
     */
    limit?: number
  }

  /**
   * Editorial upsert
   */
  export type EditorialUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Editorial
     */
    select?: EditorialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Editorial
     */
    omit?: EditorialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EditorialInclude<ExtArgs> | null
    /**
     * The filter to search for the Editorial to update in case it exists.
     */
    where: EditorialWhereUniqueInput
    /**
     * In case the Editorial found by the `where` argument doesn't exist, create a new Editorial with this data.
     */
    create: XOR<EditorialCreateInput, EditorialUncheckedCreateInput>
    /**
     * In case the Editorial was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EditorialUpdateInput, EditorialUncheckedUpdateInput>
  }

  /**
   * Editorial delete
   */
  export type EditorialDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Editorial
     */
    select?: EditorialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Editorial
     */
    omit?: EditorialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EditorialInclude<ExtArgs> | null
    /**
     * Filter which Editorial to delete.
     */
    where: EditorialWhereUniqueInput
  }

  /**
   * Editorial deleteMany
   */
  export type EditorialDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Editorials to delete
     */
    where?: EditorialWhereInput
    /**
     * Limit how many Editorials to delete.
     */
    limit?: number
  }

  /**
   * Editorial.libros
   */
  export type Editorial$librosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Libro
     */
    select?: LibroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Libro
     */
    omit?: LibroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibroInclude<ExtArgs> | null
    where?: LibroWhereInput
    orderBy?: LibroOrderByWithRelationInput | LibroOrderByWithRelationInput[]
    cursor?: LibroWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LibroScalarFieldEnum | LibroScalarFieldEnum[]
  }

  /**
   * Editorial without action
   */
  export type EditorialDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Editorial
     */
    select?: EditorialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Editorial
     */
    omit?: EditorialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EditorialInclude<ExtArgs> | null
  }


  /**
   * Model Factura
   */

  export type AggregateFactura = {
    _count: FacturaCountAggregateOutputType | null
    _avg: FacturaAvgAggregateOutputType | null
    _sum: FacturaSumAggregateOutputType | null
    _min: FacturaMinAggregateOutputType | null
    _max: FacturaMaxAggregateOutputType | null
  }

  export type FacturaAvgAggregateOutputType = {
    id_Compra: number | null
    total: Decimal | null
    id_Cliente: number | null
  }

  export type FacturaSumAggregateOutputType = {
    id_Compra: number | null
    total: Decimal | null
    id_Cliente: number | null
  }

  export type FacturaMinAggregateOutputType = {
    id_Compra: number | null
    fecha_compra: Date | null
    total: Decimal | null
    id_Cliente: number | null
  }

  export type FacturaMaxAggregateOutputType = {
    id_Compra: number | null
    fecha_compra: Date | null
    total: Decimal | null
    id_Cliente: number | null
  }

  export type FacturaCountAggregateOutputType = {
    id_Compra: number
    fecha_compra: number
    total: number
    id_Cliente: number
    _all: number
  }


  export type FacturaAvgAggregateInputType = {
    id_Compra?: true
    total?: true
    id_Cliente?: true
  }

  export type FacturaSumAggregateInputType = {
    id_Compra?: true
    total?: true
    id_Cliente?: true
  }

  export type FacturaMinAggregateInputType = {
    id_Compra?: true
    fecha_compra?: true
    total?: true
    id_Cliente?: true
  }

  export type FacturaMaxAggregateInputType = {
    id_Compra?: true
    fecha_compra?: true
    total?: true
    id_Cliente?: true
  }

  export type FacturaCountAggregateInputType = {
    id_Compra?: true
    fecha_compra?: true
    total?: true
    id_Cliente?: true
    _all?: true
  }

  export type FacturaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Factura to aggregate.
     */
    where?: FacturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Facturas to fetch.
     */
    orderBy?: FacturaOrderByWithRelationInput | FacturaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FacturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Facturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Facturas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Facturas
    **/
    _count?: true | FacturaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FacturaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FacturaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FacturaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FacturaMaxAggregateInputType
  }

  export type GetFacturaAggregateType<T extends FacturaAggregateArgs> = {
        [P in keyof T & keyof AggregateFactura]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFactura[P]>
      : GetScalarType<T[P], AggregateFactura[P]>
  }




  export type FacturaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FacturaWhereInput
    orderBy?: FacturaOrderByWithAggregationInput | FacturaOrderByWithAggregationInput[]
    by: FacturaScalarFieldEnum[] | FacturaScalarFieldEnum
    having?: FacturaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FacturaCountAggregateInputType | true
    _avg?: FacturaAvgAggregateInputType
    _sum?: FacturaSumAggregateInputType
    _min?: FacturaMinAggregateInputType
    _max?: FacturaMaxAggregateInputType
  }

  export type FacturaGroupByOutputType = {
    id_Compra: number
    fecha_compra: Date | null
    total: Decimal
    id_Cliente: number | null
    _count: FacturaCountAggregateOutputType | null
    _avg: FacturaAvgAggregateOutputType | null
    _sum: FacturaSumAggregateOutputType | null
    _min: FacturaMinAggregateOutputType | null
    _max: FacturaMaxAggregateOutputType | null
  }

  type GetFacturaGroupByPayload<T extends FacturaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FacturaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FacturaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FacturaGroupByOutputType[P]>
            : GetScalarType<T[P], FacturaGroupByOutputType[P]>
        }
      >
    >


  export type FacturaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_Compra?: boolean
    fecha_compra?: boolean
    total?: boolean
    id_Cliente?: boolean
    DetalleFactura?: boolean | Factura$DetalleFacturaArgs<ExtArgs>
    cliente?: boolean | Factura$clienteArgs<ExtArgs>
    _count?: boolean | FacturaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["factura"]>



  export type FacturaSelectScalar = {
    id_Compra?: boolean
    fecha_compra?: boolean
    total?: boolean
    id_Cliente?: boolean
  }

  export type FacturaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id_Compra" | "fecha_compra" | "total" | "id_Cliente", ExtArgs["result"]["factura"]>
  export type FacturaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    DetalleFactura?: boolean | Factura$DetalleFacturaArgs<ExtArgs>
    cliente?: boolean | Factura$clienteArgs<ExtArgs>
    _count?: boolean | FacturaCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $FacturaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Factura"
    objects: {
      DetalleFactura: Prisma.$DetalleFacturaPayload<ExtArgs>[]
      cliente: Prisma.$ClientePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id_Compra: number
      fecha_compra: Date | null
      total: Prisma.Decimal
      id_Cliente: number | null
    }, ExtArgs["result"]["factura"]>
    composites: {}
  }

  type FacturaGetPayload<S extends boolean | null | undefined | FacturaDefaultArgs> = $Result.GetResult<Prisma.$FacturaPayload, S>

  type FacturaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FacturaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FacturaCountAggregateInputType | true
    }

  export interface FacturaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Factura'], meta: { name: 'Factura' } }
    /**
     * Find zero or one Factura that matches the filter.
     * @param {FacturaFindUniqueArgs} args - Arguments to find a Factura
     * @example
     * // Get one Factura
     * const factura = await prisma.factura.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FacturaFindUniqueArgs>(args: SelectSubset<T, FacturaFindUniqueArgs<ExtArgs>>): Prisma__FacturaClient<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Factura that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FacturaFindUniqueOrThrowArgs} args - Arguments to find a Factura
     * @example
     * // Get one Factura
     * const factura = await prisma.factura.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FacturaFindUniqueOrThrowArgs>(args: SelectSubset<T, FacturaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FacturaClient<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Factura that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaFindFirstArgs} args - Arguments to find a Factura
     * @example
     * // Get one Factura
     * const factura = await prisma.factura.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FacturaFindFirstArgs>(args?: SelectSubset<T, FacturaFindFirstArgs<ExtArgs>>): Prisma__FacturaClient<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Factura that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaFindFirstOrThrowArgs} args - Arguments to find a Factura
     * @example
     * // Get one Factura
     * const factura = await prisma.factura.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FacturaFindFirstOrThrowArgs>(args?: SelectSubset<T, FacturaFindFirstOrThrowArgs<ExtArgs>>): Prisma__FacturaClient<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Facturas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Facturas
     * const facturas = await prisma.factura.findMany()
     * 
     * // Get first 10 Facturas
     * const facturas = await prisma.factura.findMany({ take: 10 })
     * 
     * // Only select the `id_Compra`
     * const facturaWithId_CompraOnly = await prisma.factura.findMany({ select: { id_Compra: true } })
     * 
     */
    findMany<T extends FacturaFindManyArgs>(args?: SelectSubset<T, FacturaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Factura.
     * @param {FacturaCreateArgs} args - Arguments to create a Factura.
     * @example
     * // Create one Factura
     * const Factura = await prisma.factura.create({
     *   data: {
     *     // ... data to create a Factura
     *   }
     * })
     * 
     */
    create<T extends FacturaCreateArgs>(args: SelectSubset<T, FacturaCreateArgs<ExtArgs>>): Prisma__FacturaClient<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Facturas.
     * @param {FacturaCreateManyArgs} args - Arguments to create many Facturas.
     * @example
     * // Create many Facturas
     * const factura = await prisma.factura.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FacturaCreateManyArgs>(args?: SelectSubset<T, FacturaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Factura.
     * @param {FacturaDeleteArgs} args - Arguments to delete one Factura.
     * @example
     * // Delete one Factura
     * const Factura = await prisma.factura.delete({
     *   where: {
     *     // ... filter to delete one Factura
     *   }
     * })
     * 
     */
    delete<T extends FacturaDeleteArgs>(args: SelectSubset<T, FacturaDeleteArgs<ExtArgs>>): Prisma__FacturaClient<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Factura.
     * @param {FacturaUpdateArgs} args - Arguments to update one Factura.
     * @example
     * // Update one Factura
     * const factura = await prisma.factura.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FacturaUpdateArgs>(args: SelectSubset<T, FacturaUpdateArgs<ExtArgs>>): Prisma__FacturaClient<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Facturas.
     * @param {FacturaDeleteManyArgs} args - Arguments to filter Facturas to delete.
     * @example
     * // Delete a few Facturas
     * const { count } = await prisma.factura.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FacturaDeleteManyArgs>(args?: SelectSubset<T, FacturaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Facturas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Facturas
     * const factura = await prisma.factura.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FacturaUpdateManyArgs>(args: SelectSubset<T, FacturaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Factura.
     * @param {FacturaUpsertArgs} args - Arguments to update or create a Factura.
     * @example
     * // Update or create a Factura
     * const factura = await prisma.factura.upsert({
     *   create: {
     *     // ... data to create a Factura
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Factura we want to update
     *   }
     * })
     */
    upsert<T extends FacturaUpsertArgs>(args: SelectSubset<T, FacturaUpsertArgs<ExtArgs>>): Prisma__FacturaClient<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Facturas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaCountArgs} args - Arguments to filter Facturas to count.
     * @example
     * // Count the number of Facturas
     * const count = await prisma.factura.count({
     *   where: {
     *     // ... the filter for the Facturas we want to count
     *   }
     * })
    **/
    count<T extends FacturaCountArgs>(
      args?: Subset<T, FacturaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FacturaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Factura.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FacturaAggregateArgs>(args: Subset<T, FacturaAggregateArgs>): Prisma.PrismaPromise<GetFacturaAggregateType<T>>

    /**
     * Group by Factura.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FacturaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FacturaGroupByArgs['orderBy'] }
        : { orderBy?: FacturaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FacturaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacturaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Factura model
   */
  readonly fields: FacturaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Factura.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FacturaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    DetalleFactura<T extends Factura$DetalleFacturaArgs<ExtArgs> = {}>(args?: Subset<T, Factura$DetalleFacturaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DetalleFacturaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    cliente<T extends Factura$clienteArgs<ExtArgs> = {}>(args?: Subset<T, Factura$clienteArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Factura model
   */
  interface FacturaFieldRefs {
    readonly id_Compra: FieldRef<"Factura", 'Int'>
    readonly fecha_compra: FieldRef<"Factura", 'DateTime'>
    readonly total: FieldRef<"Factura", 'Decimal'>
    readonly id_Cliente: FieldRef<"Factura", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Factura findUnique
   */
  export type FacturaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Factura
     */
    omit?: FacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
    /**
     * Filter, which Factura to fetch.
     */
    where: FacturaWhereUniqueInput
  }

  /**
   * Factura findUniqueOrThrow
   */
  export type FacturaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Factura
     */
    omit?: FacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
    /**
     * Filter, which Factura to fetch.
     */
    where: FacturaWhereUniqueInput
  }

  /**
   * Factura findFirst
   */
  export type FacturaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Factura
     */
    omit?: FacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
    /**
     * Filter, which Factura to fetch.
     */
    where?: FacturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Facturas to fetch.
     */
    orderBy?: FacturaOrderByWithRelationInput | FacturaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Facturas.
     */
    cursor?: FacturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Facturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Facturas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Facturas.
     */
    distinct?: FacturaScalarFieldEnum | FacturaScalarFieldEnum[]
  }

  /**
   * Factura findFirstOrThrow
   */
  export type FacturaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Factura
     */
    omit?: FacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
    /**
     * Filter, which Factura to fetch.
     */
    where?: FacturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Facturas to fetch.
     */
    orderBy?: FacturaOrderByWithRelationInput | FacturaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Facturas.
     */
    cursor?: FacturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Facturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Facturas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Facturas.
     */
    distinct?: FacturaScalarFieldEnum | FacturaScalarFieldEnum[]
  }

  /**
   * Factura findMany
   */
  export type FacturaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Factura
     */
    omit?: FacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
    /**
     * Filter, which Facturas to fetch.
     */
    where?: FacturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Facturas to fetch.
     */
    orderBy?: FacturaOrderByWithRelationInput | FacturaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Facturas.
     */
    cursor?: FacturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Facturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Facturas.
     */
    skip?: number
    distinct?: FacturaScalarFieldEnum | FacturaScalarFieldEnum[]
  }

  /**
   * Factura create
   */
  export type FacturaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Factura
     */
    omit?: FacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
    /**
     * The data needed to create a Factura.
     */
    data: XOR<FacturaCreateInput, FacturaUncheckedCreateInput>
  }

  /**
   * Factura createMany
   */
  export type FacturaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Facturas.
     */
    data: FacturaCreateManyInput | FacturaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Factura update
   */
  export type FacturaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Factura
     */
    omit?: FacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
    /**
     * The data needed to update a Factura.
     */
    data: XOR<FacturaUpdateInput, FacturaUncheckedUpdateInput>
    /**
     * Choose, which Factura to update.
     */
    where: FacturaWhereUniqueInput
  }

  /**
   * Factura updateMany
   */
  export type FacturaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Facturas.
     */
    data: XOR<FacturaUpdateManyMutationInput, FacturaUncheckedUpdateManyInput>
    /**
     * Filter which Facturas to update
     */
    where?: FacturaWhereInput
    /**
     * Limit how many Facturas to update.
     */
    limit?: number
  }

  /**
   * Factura upsert
   */
  export type FacturaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Factura
     */
    omit?: FacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
    /**
     * The filter to search for the Factura to update in case it exists.
     */
    where: FacturaWhereUniqueInput
    /**
     * In case the Factura found by the `where` argument doesn't exist, create a new Factura with this data.
     */
    create: XOR<FacturaCreateInput, FacturaUncheckedCreateInput>
    /**
     * In case the Factura was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FacturaUpdateInput, FacturaUncheckedUpdateInput>
  }

  /**
   * Factura delete
   */
  export type FacturaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Factura
     */
    omit?: FacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
    /**
     * Filter which Factura to delete.
     */
    where: FacturaWhereUniqueInput
  }

  /**
   * Factura deleteMany
   */
  export type FacturaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Facturas to delete
     */
    where?: FacturaWhereInput
    /**
     * Limit how many Facturas to delete.
     */
    limit?: number
  }

  /**
   * Factura.DetalleFactura
   */
  export type Factura$DetalleFacturaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetalleFactura
     */
    select?: DetalleFacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DetalleFactura
     */
    omit?: DetalleFacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetalleFacturaInclude<ExtArgs> | null
    where?: DetalleFacturaWhereInput
    orderBy?: DetalleFacturaOrderByWithRelationInput | DetalleFacturaOrderByWithRelationInput[]
    cursor?: DetalleFacturaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DetalleFacturaScalarFieldEnum | DetalleFacturaScalarFieldEnum[]
  }

  /**
   * Factura.cliente
   */
  export type Factura$clienteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    where?: ClienteWhereInput
  }

  /**
   * Factura without action
   */
  export type FacturaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Factura
     */
    omit?: FacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
  }


  /**
   * Model Libro
   */

  export type AggregateLibro = {
    _count: LibroCountAggregateOutputType | null
    _avg: LibroAvgAggregateOutputType | null
    _sum: LibroSumAggregateOutputType | null
    _min: LibroMinAggregateOutputType | null
    _max: LibroMaxAggregateOutputType | null
  }

  export type LibroAvgAggregateOutputType = {
    id_Libro: number | null
    preciov: Decimal | null
    cantidad: number | null
    id_Editorial: number | null
    id_Categoria: number | null
  }

  export type LibroSumAggregateOutputType = {
    id_Libro: number | null
    preciov: Decimal | null
    cantidad: number | null
    id_Editorial: number | null
    id_Categoria: number | null
  }

  export type LibroMinAggregateOutputType = {
    id_Libro: number | null
    Titulo: string | null
    Fechap: Date | null
    preciov: Decimal | null
    cantidad: number | null
    id_Editorial: number | null
    Estado: $Enums.Libro_Estado | null
    ISBN: string | null
    BestSellers: boolean | null
    id_Categoria: number | null
  }

  export type LibroMaxAggregateOutputType = {
    id_Libro: number | null
    Titulo: string | null
    Fechap: Date | null
    preciov: Decimal | null
    cantidad: number | null
    id_Editorial: number | null
    Estado: $Enums.Libro_Estado | null
    ISBN: string | null
    BestSellers: boolean | null
    id_Categoria: number | null
  }

  export type LibroCountAggregateOutputType = {
    id_Libro: number
    Titulo: number
    Fechap: number
    preciov: number
    cantidad: number
    id_Editorial: number
    Estado: number
    ISBN: number
    BestSellers: number
    id_Categoria: number
    _all: number
  }


  export type LibroAvgAggregateInputType = {
    id_Libro?: true
    preciov?: true
    cantidad?: true
    id_Editorial?: true
    id_Categoria?: true
  }

  export type LibroSumAggregateInputType = {
    id_Libro?: true
    preciov?: true
    cantidad?: true
    id_Editorial?: true
    id_Categoria?: true
  }

  export type LibroMinAggregateInputType = {
    id_Libro?: true
    Titulo?: true
    Fechap?: true
    preciov?: true
    cantidad?: true
    id_Editorial?: true
    Estado?: true
    ISBN?: true
    BestSellers?: true
    id_Categoria?: true
  }

  export type LibroMaxAggregateInputType = {
    id_Libro?: true
    Titulo?: true
    Fechap?: true
    preciov?: true
    cantidad?: true
    id_Editorial?: true
    Estado?: true
    ISBN?: true
    BestSellers?: true
    id_Categoria?: true
  }

  export type LibroCountAggregateInputType = {
    id_Libro?: true
    Titulo?: true
    Fechap?: true
    preciov?: true
    cantidad?: true
    id_Editorial?: true
    Estado?: true
    ISBN?: true
    BestSellers?: true
    id_Categoria?: true
    _all?: true
  }

  export type LibroAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Libro to aggregate.
     */
    where?: LibroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Libros to fetch.
     */
    orderBy?: LibroOrderByWithRelationInput | LibroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LibroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Libros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Libros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Libros
    **/
    _count?: true | LibroCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LibroAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LibroSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LibroMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LibroMaxAggregateInputType
  }

  export type GetLibroAggregateType<T extends LibroAggregateArgs> = {
        [P in keyof T & keyof AggregateLibro]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLibro[P]>
      : GetScalarType<T[P], AggregateLibro[P]>
  }




  export type LibroGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LibroWhereInput
    orderBy?: LibroOrderByWithAggregationInput | LibroOrderByWithAggregationInput[]
    by: LibroScalarFieldEnum[] | LibroScalarFieldEnum
    having?: LibroScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LibroCountAggregateInputType | true
    _avg?: LibroAvgAggregateInputType
    _sum?: LibroSumAggregateInputType
    _min?: LibroMinAggregateInputType
    _max?: LibroMaxAggregateInputType
  }

  export type LibroGroupByOutputType = {
    id_Libro: number
    Titulo: string
    Fechap: Date | null
    preciov: Decimal
    cantidad: number | null
    id_Editorial: number | null
    Estado: $Enums.Libro_Estado | null
    ISBN: string
    BestSellers: boolean
    id_Categoria: number | null
    _count: LibroCountAggregateOutputType | null
    _avg: LibroAvgAggregateOutputType | null
    _sum: LibroSumAggregateOutputType | null
    _min: LibroMinAggregateOutputType | null
    _max: LibroMaxAggregateOutputType | null
  }

  type GetLibroGroupByPayload<T extends LibroGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LibroGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LibroGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LibroGroupByOutputType[P]>
            : GetScalarType<T[P], LibroGroupByOutputType[P]>
        }
      >
    >


  export type LibroSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_Libro?: boolean
    Titulo?: boolean
    Fechap?: boolean
    preciov?: boolean
    cantidad?: boolean
    id_Editorial?: boolean
    Estado?: boolean
    ISBN?: boolean
    BestSellers?: boolean
    id_Categoria?: boolean
    detalles?: boolean | Libro$detallesArgs<ExtArgs>
    editorial?: boolean | Libro$editorialArgs<ExtArgs>
    Libro_Autor?: boolean | Libro$Libro_AutorArgs<ExtArgs>
    categoria?: boolean | Libro$categoriaArgs<ExtArgs>
    _count?: boolean | LibroCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["libro"]>



  export type LibroSelectScalar = {
    id_Libro?: boolean
    Titulo?: boolean
    Fechap?: boolean
    preciov?: boolean
    cantidad?: boolean
    id_Editorial?: boolean
    Estado?: boolean
    ISBN?: boolean
    BestSellers?: boolean
    id_Categoria?: boolean
  }

  export type LibroOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id_Libro" | "Titulo" | "Fechap" | "preciov" | "cantidad" | "id_Editorial" | "Estado" | "ISBN" | "BestSellers" | "id_Categoria", ExtArgs["result"]["libro"]>
  export type LibroInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    detalles?: boolean | Libro$detallesArgs<ExtArgs>
    editorial?: boolean | Libro$editorialArgs<ExtArgs>
    Libro_Autor?: boolean | Libro$Libro_AutorArgs<ExtArgs>
    categoria?: boolean | Libro$categoriaArgs<ExtArgs>
    _count?: boolean | LibroCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $LibroPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Libro"
    objects: {
      detalles: Prisma.$DetalleFacturaPayload<ExtArgs>[]
      editorial: Prisma.$EditorialPayload<ExtArgs> | null
      Libro_Autor: Prisma.$Libro_AutorPayload<ExtArgs>[]
      categoria: Prisma.$CategoriaPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id_Libro: number
      Titulo: string
      Fechap: Date | null
      preciov: Prisma.Decimal
      cantidad: number | null
      id_Editorial: number | null
      Estado: $Enums.Libro_Estado | null
      ISBN: string
      BestSellers: boolean
      id_Categoria: number | null
    }, ExtArgs["result"]["libro"]>
    composites: {}
  }

  type LibroGetPayload<S extends boolean | null | undefined | LibroDefaultArgs> = $Result.GetResult<Prisma.$LibroPayload, S>

  type LibroCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LibroFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LibroCountAggregateInputType | true
    }

  export interface LibroDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Libro'], meta: { name: 'Libro' } }
    /**
     * Find zero or one Libro that matches the filter.
     * @param {LibroFindUniqueArgs} args - Arguments to find a Libro
     * @example
     * // Get one Libro
     * const libro = await prisma.libro.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LibroFindUniqueArgs>(args: SelectSubset<T, LibroFindUniqueArgs<ExtArgs>>): Prisma__LibroClient<$Result.GetResult<Prisma.$LibroPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Libro that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LibroFindUniqueOrThrowArgs} args - Arguments to find a Libro
     * @example
     * // Get one Libro
     * const libro = await prisma.libro.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LibroFindUniqueOrThrowArgs>(args: SelectSubset<T, LibroFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LibroClient<$Result.GetResult<Prisma.$LibroPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Libro that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibroFindFirstArgs} args - Arguments to find a Libro
     * @example
     * // Get one Libro
     * const libro = await prisma.libro.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LibroFindFirstArgs>(args?: SelectSubset<T, LibroFindFirstArgs<ExtArgs>>): Prisma__LibroClient<$Result.GetResult<Prisma.$LibroPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Libro that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibroFindFirstOrThrowArgs} args - Arguments to find a Libro
     * @example
     * // Get one Libro
     * const libro = await prisma.libro.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LibroFindFirstOrThrowArgs>(args?: SelectSubset<T, LibroFindFirstOrThrowArgs<ExtArgs>>): Prisma__LibroClient<$Result.GetResult<Prisma.$LibroPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Libros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibroFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Libros
     * const libros = await prisma.libro.findMany()
     * 
     * // Get first 10 Libros
     * const libros = await prisma.libro.findMany({ take: 10 })
     * 
     * // Only select the `id_Libro`
     * const libroWithId_LibroOnly = await prisma.libro.findMany({ select: { id_Libro: true } })
     * 
     */
    findMany<T extends LibroFindManyArgs>(args?: SelectSubset<T, LibroFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LibroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Libro.
     * @param {LibroCreateArgs} args - Arguments to create a Libro.
     * @example
     * // Create one Libro
     * const Libro = await prisma.libro.create({
     *   data: {
     *     // ... data to create a Libro
     *   }
     * })
     * 
     */
    create<T extends LibroCreateArgs>(args: SelectSubset<T, LibroCreateArgs<ExtArgs>>): Prisma__LibroClient<$Result.GetResult<Prisma.$LibroPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Libros.
     * @param {LibroCreateManyArgs} args - Arguments to create many Libros.
     * @example
     * // Create many Libros
     * const libro = await prisma.libro.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LibroCreateManyArgs>(args?: SelectSubset<T, LibroCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Libro.
     * @param {LibroDeleteArgs} args - Arguments to delete one Libro.
     * @example
     * // Delete one Libro
     * const Libro = await prisma.libro.delete({
     *   where: {
     *     // ... filter to delete one Libro
     *   }
     * })
     * 
     */
    delete<T extends LibroDeleteArgs>(args: SelectSubset<T, LibroDeleteArgs<ExtArgs>>): Prisma__LibroClient<$Result.GetResult<Prisma.$LibroPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Libro.
     * @param {LibroUpdateArgs} args - Arguments to update one Libro.
     * @example
     * // Update one Libro
     * const libro = await prisma.libro.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LibroUpdateArgs>(args: SelectSubset<T, LibroUpdateArgs<ExtArgs>>): Prisma__LibroClient<$Result.GetResult<Prisma.$LibroPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Libros.
     * @param {LibroDeleteManyArgs} args - Arguments to filter Libros to delete.
     * @example
     * // Delete a few Libros
     * const { count } = await prisma.libro.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LibroDeleteManyArgs>(args?: SelectSubset<T, LibroDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Libros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibroUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Libros
     * const libro = await prisma.libro.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LibroUpdateManyArgs>(args: SelectSubset<T, LibroUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Libro.
     * @param {LibroUpsertArgs} args - Arguments to update or create a Libro.
     * @example
     * // Update or create a Libro
     * const libro = await prisma.libro.upsert({
     *   create: {
     *     // ... data to create a Libro
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Libro we want to update
     *   }
     * })
     */
    upsert<T extends LibroUpsertArgs>(args: SelectSubset<T, LibroUpsertArgs<ExtArgs>>): Prisma__LibroClient<$Result.GetResult<Prisma.$LibroPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Libros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibroCountArgs} args - Arguments to filter Libros to count.
     * @example
     * // Count the number of Libros
     * const count = await prisma.libro.count({
     *   where: {
     *     // ... the filter for the Libros we want to count
     *   }
     * })
    **/
    count<T extends LibroCountArgs>(
      args?: Subset<T, LibroCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LibroCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Libro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibroAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LibroAggregateArgs>(args: Subset<T, LibroAggregateArgs>): Prisma.PrismaPromise<GetLibroAggregateType<T>>

    /**
     * Group by Libro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibroGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LibroGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LibroGroupByArgs['orderBy'] }
        : { orderBy?: LibroGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LibroGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLibroGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Libro model
   */
  readonly fields: LibroFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Libro.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LibroClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    detalles<T extends Libro$detallesArgs<ExtArgs> = {}>(args?: Subset<T, Libro$detallesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DetalleFacturaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    editorial<T extends Libro$editorialArgs<ExtArgs> = {}>(args?: Subset<T, Libro$editorialArgs<ExtArgs>>): Prisma__EditorialClient<$Result.GetResult<Prisma.$EditorialPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Libro_Autor<T extends Libro$Libro_AutorArgs<ExtArgs> = {}>(args?: Subset<T, Libro$Libro_AutorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Libro_AutorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    categoria<T extends Libro$categoriaArgs<ExtArgs> = {}>(args?: Subset<T, Libro$categoriaArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Libro model
   */
  interface LibroFieldRefs {
    readonly id_Libro: FieldRef<"Libro", 'Int'>
    readonly Titulo: FieldRef<"Libro", 'String'>
    readonly Fechap: FieldRef<"Libro", 'DateTime'>
    readonly preciov: FieldRef<"Libro", 'Decimal'>
    readonly cantidad: FieldRef<"Libro", 'Int'>
    readonly id_Editorial: FieldRef<"Libro", 'Int'>
    readonly Estado: FieldRef<"Libro", 'Libro_Estado'>
    readonly ISBN: FieldRef<"Libro", 'String'>
    readonly BestSellers: FieldRef<"Libro", 'Boolean'>
    readonly id_Categoria: FieldRef<"Libro", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Libro findUnique
   */
  export type LibroFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Libro
     */
    select?: LibroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Libro
     */
    omit?: LibroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibroInclude<ExtArgs> | null
    /**
     * Filter, which Libro to fetch.
     */
    where: LibroWhereUniqueInput
  }

  /**
   * Libro findUniqueOrThrow
   */
  export type LibroFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Libro
     */
    select?: LibroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Libro
     */
    omit?: LibroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibroInclude<ExtArgs> | null
    /**
     * Filter, which Libro to fetch.
     */
    where: LibroWhereUniqueInput
  }

  /**
   * Libro findFirst
   */
  export type LibroFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Libro
     */
    select?: LibroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Libro
     */
    omit?: LibroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibroInclude<ExtArgs> | null
    /**
     * Filter, which Libro to fetch.
     */
    where?: LibroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Libros to fetch.
     */
    orderBy?: LibroOrderByWithRelationInput | LibroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Libros.
     */
    cursor?: LibroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Libros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Libros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Libros.
     */
    distinct?: LibroScalarFieldEnum | LibroScalarFieldEnum[]
  }

  /**
   * Libro findFirstOrThrow
   */
  export type LibroFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Libro
     */
    select?: LibroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Libro
     */
    omit?: LibroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibroInclude<ExtArgs> | null
    /**
     * Filter, which Libro to fetch.
     */
    where?: LibroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Libros to fetch.
     */
    orderBy?: LibroOrderByWithRelationInput | LibroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Libros.
     */
    cursor?: LibroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Libros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Libros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Libros.
     */
    distinct?: LibroScalarFieldEnum | LibroScalarFieldEnum[]
  }

  /**
   * Libro findMany
   */
  export type LibroFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Libro
     */
    select?: LibroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Libro
     */
    omit?: LibroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibroInclude<ExtArgs> | null
    /**
     * Filter, which Libros to fetch.
     */
    where?: LibroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Libros to fetch.
     */
    orderBy?: LibroOrderByWithRelationInput | LibroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Libros.
     */
    cursor?: LibroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Libros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Libros.
     */
    skip?: number
    distinct?: LibroScalarFieldEnum | LibroScalarFieldEnum[]
  }

  /**
   * Libro create
   */
  export type LibroCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Libro
     */
    select?: LibroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Libro
     */
    omit?: LibroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibroInclude<ExtArgs> | null
    /**
     * The data needed to create a Libro.
     */
    data: XOR<LibroCreateInput, LibroUncheckedCreateInput>
  }

  /**
   * Libro createMany
   */
  export type LibroCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Libros.
     */
    data: LibroCreateManyInput | LibroCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Libro update
   */
  export type LibroUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Libro
     */
    select?: LibroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Libro
     */
    omit?: LibroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibroInclude<ExtArgs> | null
    /**
     * The data needed to update a Libro.
     */
    data: XOR<LibroUpdateInput, LibroUncheckedUpdateInput>
    /**
     * Choose, which Libro to update.
     */
    where: LibroWhereUniqueInput
  }

  /**
   * Libro updateMany
   */
  export type LibroUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Libros.
     */
    data: XOR<LibroUpdateManyMutationInput, LibroUncheckedUpdateManyInput>
    /**
     * Filter which Libros to update
     */
    where?: LibroWhereInput
    /**
     * Limit how many Libros to update.
     */
    limit?: number
  }

  /**
   * Libro upsert
   */
  export type LibroUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Libro
     */
    select?: LibroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Libro
     */
    omit?: LibroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibroInclude<ExtArgs> | null
    /**
     * The filter to search for the Libro to update in case it exists.
     */
    where: LibroWhereUniqueInput
    /**
     * In case the Libro found by the `where` argument doesn't exist, create a new Libro with this data.
     */
    create: XOR<LibroCreateInput, LibroUncheckedCreateInput>
    /**
     * In case the Libro was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LibroUpdateInput, LibroUncheckedUpdateInput>
  }

  /**
   * Libro delete
   */
  export type LibroDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Libro
     */
    select?: LibroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Libro
     */
    omit?: LibroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibroInclude<ExtArgs> | null
    /**
     * Filter which Libro to delete.
     */
    where: LibroWhereUniqueInput
  }

  /**
   * Libro deleteMany
   */
  export type LibroDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Libros to delete
     */
    where?: LibroWhereInput
    /**
     * Limit how many Libros to delete.
     */
    limit?: number
  }

  /**
   * Libro.detalles
   */
  export type Libro$detallesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetalleFactura
     */
    select?: DetalleFacturaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DetalleFactura
     */
    omit?: DetalleFacturaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetalleFacturaInclude<ExtArgs> | null
    where?: DetalleFacturaWhereInput
    orderBy?: DetalleFacturaOrderByWithRelationInput | DetalleFacturaOrderByWithRelationInput[]
    cursor?: DetalleFacturaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DetalleFacturaScalarFieldEnum | DetalleFacturaScalarFieldEnum[]
  }

  /**
   * Libro.editorial
   */
  export type Libro$editorialArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Editorial
     */
    select?: EditorialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Editorial
     */
    omit?: EditorialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EditorialInclude<ExtArgs> | null
    where?: EditorialWhereInput
  }

  /**
   * Libro.Libro_Autor
   */
  export type Libro$Libro_AutorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Libro_Autor
     */
    select?: Libro_AutorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Libro_Autor
     */
    omit?: Libro_AutorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Libro_AutorInclude<ExtArgs> | null
    where?: Libro_AutorWhereInput
    orderBy?: Libro_AutorOrderByWithRelationInput | Libro_AutorOrderByWithRelationInput[]
    cursor?: Libro_AutorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Libro_AutorScalarFieldEnum | Libro_AutorScalarFieldEnum[]
  }

  /**
   * Libro.categoria
   */
  export type Libro$categoriaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categoria
     */
    omit?: CategoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    where?: CategoriaWhereInput
  }

  /**
   * Libro without action
   */
  export type LibroDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Libro
     */
    select?: LibroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Libro
     */
    omit?: LibroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibroInclude<ExtArgs> | null
  }


  /**
   * Model Categoria
   */

  export type AggregateCategoria = {
    _count: CategoriaCountAggregateOutputType | null
    _avg: CategoriaAvgAggregateOutputType | null
    _sum: CategoriaSumAggregateOutputType | null
    _min: CategoriaMinAggregateOutputType | null
    _max: CategoriaMaxAggregateOutputType | null
  }

  export type CategoriaAvgAggregateOutputType = {
    id_Categoria: number | null
  }

  export type CategoriaSumAggregateOutputType = {
    id_Categoria: number | null
  }

  export type CategoriaMinAggregateOutputType = {
    id_Categoria: number | null
    Nombre: string | null
  }

  export type CategoriaMaxAggregateOutputType = {
    id_Categoria: number | null
    Nombre: string | null
  }

  export type CategoriaCountAggregateOutputType = {
    id_Categoria: number
    Nombre: number
    _all: number
  }


  export type CategoriaAvgAggregateInputType = {
    id_Categoria?: true
  }

  export type CategoriaSumAggregateInputType = {
    id_Categoria?: true
  }

  export type CategoriaMinAggregateInputType = {
    id_Categoria?: true
    Nombre?: true
  }

  export type CategoriaMaxAggregateInputType = {
    id_Categoria?: true
    Nombre?: true
  }

  export type CategoriaCountAggregateInputType = {
    id_Categoria?: true
    Nombre?: true
    _all?: true
  }

  export type CategoriaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categoria to aggregate.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categorias
    **/
    _count?: true | CategoriaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriaMaxAggregateInputType
  }

  export type GetCategoriaAggregateType<T extends CategoriaAggregateArgs> = {
        [P in keyof T & keyof AggregateCategoria]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategoria[P]>
      : GetScalarType<T[P], AggregateCategoria[P]>
  }




  export type CategoriaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoriaWhereInput
    orderBy?: CategoriaOrderByWithAggregationInput | CategoriaOrderByWithAggregationInput[]
    by: CategoriaScalarFieldEnum[] | CategoriaScalarFieldEnum
    having?: CategoriaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriaCountAggregateInputType | true
    _avg?: CategoriaAvgAggregateInputType
    _sum?: CategoriaSumAggregateInputType
    _min?: CategoriaMinAggregateInputType
    _max?: CategoriaMaxAggregateInputType
  }

  export type CategoriaGroupByOutputType = {
    id_Categoria: number
    Nombre: string
    _count: CategoriaCountAggregateOutputType | null
    _avg: CategoriaAvgAggregateOutputType | null
    _sum: CategoriaSumAggregateOutputType | null
    _min: CategoriaMinAggregateOutputType | null
    _max: CategoriaMaxAggregateOutputType | null
  }

  type GetCategoriaGroupByPayload<T extends CategoriaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriaGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriaGroupByOutputType[P]>
        }
      >
    >


  export type CategoriaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_Categoria?: boolean
    Nombre?: boolean
    libros?: boolean | Categoria$librosArgs<ExtArgs>
    _count?: boolean | CategoriaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categoria"]>



  export type CategoriaSelectScalar = {
    id_Categoria?: boolean
    Nombre?: boolean
  }

  export type CategoriaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id_Categoria" | "Nombre", ExtArgs["result"]["categoria"]>
  export type CategoriaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    libros?: boolean | Categoria$librosArgs<ExtArgs>
    _count?: boolean | CategoriaCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CategoriaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Categoria"
    objects: {
      libros: Prisma.$LibroPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_Categoria: number
      Nombre: string
    }, ExtArgs["result"]["categoria"]>
    composites: {}
  }

  type CategoriaGetPayload<S extends boolean | null | undefined | CategoriaDefaultArgs> = $Result.GetResult<Prisma.$CategoriaPayload, S>

  type CategoriaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CategoriaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoriaCountAggregateInputType | true
    }

  export interface CategoriaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Categoria'], meta: { name: 'Categoria' } }
    /**
     * Find zero or one Categoria that matches the filter.
     * @param {CategoriaFindUniqueArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoriaFindUniqueArgs>(args: SelectSubset<T, CategoriaFindUniqueArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Categoria that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategoriaFindUniqueOrThrowArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoriaFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoriaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Categoria that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaFindFirstArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoriaFindFirstArgs>(args?: SelectSubset<T, CategoriaFindFirstArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Categoria that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaFindFirstOrThrowArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoriaFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoriaFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Categorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categorias
     * const categorias = await prisma.categoria.findMany()
     * 
     * // Get first 10 Categorias
     * const categorias = await prisma.categoria.findMany({ take: 10 })
     * 
     * // Only select the `id_Categoria`
     * const categoriaWithId_CategoriaOnly = await prisma.categoria.findMany({ select: { id_Categoria: true } })
     * 
     */
    findMany<T extends CategoriaFindManyArgs>(args?: SelectSubset<T, CategoriaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Categoria.
     * @param {CategoriaCreateArgs} args - Arguments to create a Categoria.
     * @example
     * // Create one Categoria
     * const Categoria = await prisma.categoria.create({
     *   data: {
     *     // ... data to create a Categoria
     *   }
     * })
     * 
     */
    create<T extends CategoriaCreateArgs>(args: SelectSubset<T, CategoriaCreateArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Categorias.
     * @param {CategoriaCreateManyArgs} args - Arguments to create many Categorias.
     * @example
     * // Create many Categorias
     * const categoria = await prisma.categoria.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoriaCreateManyArgs>(args?: SelectSubset<T, CategoriaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Categoria.
     * @param {CategoriaDeleteArgs} args - Arguments to delete one Categoria.
     * @example
     * // Delete one Categoria
     * const Categoria = await prisma.categoria.delete({
     *   where: {
     *     // ... filter to delete one Categoria
     *   }
     * })
     * 
     */
    delete<T extends CategoriaDeleteArgs>(args: SelectSubset<T, CategoriaDeleteArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Categoria.
     * @param {CategoriaUpdateArgs} args - Arguments to update one Categoria.
     * @example
     * // Update one Categoria
     * const categoria = await prisma.categoria.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoriaUpdateArgs>(args: SelectSubset<T, CategoriaUpdateArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Categorias.
     * @param {CategoriaDeleteManyArgs} args - Arguments to filter Categorias to delete.
     * @example
     * // Delete a few Categorias
     * const { count } = await prisma.categoria.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoriaDeleteManyArgs>(args?: SelectSubset<T, CategoriaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categorias
     * const categoria = await prisma.categoria.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoriaUpdateManyArgs>(args: SelectSubset<T, CategoriaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Categoria.
     * @param {CategoriaUpsertArgs} args - Arguments to update or create a Categoria.
     * @example
     * // Update or create a Categoria
     * const categoria = await prisma.categoria.upsert({
     *   create: {
     *     // ... data to create a Categoria
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categoria we want to update
     *   }
     * })
     */
    upsert<T extends CategoriaUpsertArgs>(args: SelectSubset<T, CategoriaUpsertArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaCountArgs} args - Arguments to filter Categorias to count.
     * @example
     * // Count the number of Categorias
     * const count = await prisma.categoria.count({
     *   where: {
     *     // ... the filter for the Categorias we want to count
     *   }
     * })
    **/
    count<T extends CategoriaCountArgs>(
      args?: Subset<T, CategoriaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriaAggregateArgs>(args: Subset<T, CategoriaAggregateArgs>): Prisma.PrismaPromise<GetCategoriaAggregateType<T>>

    /**
     * Group by Categoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoriaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoriaGroupByArgs['orderBy'] }
        : { orderBy?: CategoriaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoriaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Categoria model
   */
  readonly fields: CategoriaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Categoria.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoriaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    libros<T extends Categoria$librosArgs<ExtArgs> = {}>(args?: Subset<T, Categoria$librosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LibroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Categoria model
   */
  interface CategoriaFieldRefs {
    readonly id_Categoria: FieldRef<"Categoria", 'Int'>
    readonly Nombre: FieldRef<"Categoria", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Categoria findUnique
   */
  export type CategoriaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categoria
     */
    omit?: CategoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where: CategoriaWhereUniqueInput
  }

  /**
   * Categoria findUniqueOrThrow
   */
  export type CategoriaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categoria
     */
    omit?: CategoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where: CategoriaWhereUniqueInput
  }

  /**
   * Categoria findFirst
   */
  export type CategoriaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categoria
     */
    omit?: CategoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categorias.
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categorias.
     */
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }

  /**
   * Categoria findFirstOrThrow
   */
  export type CategoriaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categoria
     */
    omit?: CategoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categorias.
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categorias.
     */
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }

  /**
   * Categoria findMany
   */
  export type CategoriaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categoria
     */
    omit?: CategoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categorias to fetch.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categorias.
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }

  /**
   * Categoria create
   */
  export type CategoriaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categoria
     */
    omit?: CategoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * The data needed to create a Categoria.
     */
    data: XOR<CategoriaCreateInput, CategoriaUncheckedCreateInput>
  }

  /**
   * Categoria createMany
   */
  export type CategoriaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categorias.
     */
    data: CategoriaCreateManyInput | CategoriaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Categoria update
   */
  export type CategoriaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categoria
     */
    omit?: CategoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * The data needed to update a Categoria.
     */
    data: XOR<CategoriaUpdateInput, CategoriaUncheckedUpdateInput>
    /**
     * Choose, which Categoria to update.
     */
    where: CategoriaWhereUniqueInput
  }

  /**
   * Categoria updateMany
   */
  export type CategoriaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categorias.
     */
    data: XOR<CategoriaUpdateManyMutationInput, CategoriaUncheckedUpdateManyInput>
    /**
     * Filter which Categorias to update
     */
    where?: CategoriaWhereInput
    /**
     * Limit how many Categorias to update.
     */
    limit?: number
  }

  /**
   * Categoria upsert
   */
  export type CategoriaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categoria
     */
    omit?: CategoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * The filter to search for the Categoria to update in case it exists.
     */
    where: CategoriaWhereUniqueInput
    /**
     * In case the Categoria found by the `where` argument doesn't exist, create a new Categoria with this data.
     */
    create: XOR<CategoriaCreateInput, CategoriaUncheckedCreateInput>
    /**
     * In case the Categoria was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoriaUpdateInput, CategoriaUncheckedUpdateInput>
  }

  /**
   * Categoria delete
   */
  export type CategoriaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categoria
     */
    omit?: CategoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter which Categoria to delete.
     */
    where: CategoriaWhereUniqueInput
  }

  /**
   * Categoria deleteMany
   */
  export type CategoriaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categorias to delete
     */
    where?: CategoriaWhereInput
    /**
     * Limit how many Categorias to delete.
     */
    limit?: number
  }

  /**
   * Categoria.libros
   */
  export type Categoria$librosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Libro
     */
    select?: LibroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Libro
     */
    omit?: LibroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LibroInclude<ExtArgs> | null
    where?: LibroWhereInput
    orderBy?: LibroOrderByWithRelationInput | LibroOrderByWithRelationInput[]
    cursor?: LibroWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LibroScalarFieldEnum | LibroScalarFieldEnum[]
  }

  /**
   * Categoria without action
   */
  export type CategoriaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categoria
     */
    omit?: CategoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
  }


  /**
   * Model Libro_Autor
   */

  export type AggregateLibro_Autor = {
    _count: Libro_AutorCountAggregateOutputType | null
    _avg: Libro_AutorAvgAggregateOutputType | null
    _sum: Libro_AutorSumAggregateOutputType | null
    _min: Libro_AutorMinAggregateOutputType | null
    _max: Libro_AutorMaxAggregateOutputType | null
  }

  export type Libro_AutorAvgAggregateOutputType = {
    id_Libro: number | null
    id_Autor: number | null
  }

  export type Libro_AutorSumAggregateOutputType = {
    id_Libro: number | null
    id_Autor: number | null
  }

  export type Libro_AutorMinAggregateOutputType = {
    id_Libro: number | null
    id_Autor: number | null
  }

  export type Libro_AutorMaxAggregateOutputType = {
    id_Libro: number | null
    id_Autor: number | null
  }

  export type Libro_AutorCountAggregateOutputType = {
    id_Libro: number
    id_Autor: number
    _all: number
  }


  export type Libro_AutorAvgAggregateInputType = {
    id_Libro?: true
    id_Autor?: true
  }

  export type Libro_AutorSumAggregateInputType = {
    id_Libro?: true
    id_Autor?: true
  }

  export type Libro_AutorMinAggregateInputType = {
    id_Libro?: true
    id_Autor?: true
  }

  export type Libro_AutorMaxAggregateInputType = {
    id_Libro?: true
    id_Autor?: true
  }

  export type Libro_AutorCountAggregateInputType = {
    id_Libro?: true
    id_Autor?: true
    _all?: true
  }

  export type Libro_AutorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Libro_Autor to aggregate.
     */
    where?: Libro_AutorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Libro_Autors to fetch.
     */
    orderBy?: Libro_AutorOrderByWithRelationInput | Libro_AutorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Libro_AutorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Libro_Autors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Libro_Autors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Libro_Autors
    **/
    _count?: true | Libro_AutorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Libro_AutorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Libro_AutorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Libro_AutorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Libro_AutorMaxAggregateInputType
  }

  export type GetLibro_AutorAggregateType<T extends Libro_AutorAggregateArgs> = {
        [P in keyof T & keyof AggregateLibro_Autor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLibro_Autor[P]>
      : GetScalarType<T[P], AggregateLibro_Autor[P]>
  }




  export type Libro_AutorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Libro_AutorWhereInput
    orderBy?: Libro_AutorOrderByWithAggregationInput | Libro_AutorOrderByWithAggregationInput[]
    by: Libro_AutorScalarFieldEnum[] | Libro_AutorScalarFieldEnum
    having?: Libro_AutorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Libro_AutorCountAggregateInputType | true
    _avg?: Libro_AutorAvgAggregateInputType
    _sum?: Libro_AutorSumAggregateInputType
    _min?: Libro_AutorMinAggregateInputType
    _max?: Libro_AutorMaxAggregateInputType
  }

  export type Libro_AutorGroupByOutputType = {
    id_Libro: number
    id_Autor: number
    _count: Libro_AutorCountAggregateOutputType | null
    _avg: Libro_AutorAvgAggregateOutputType | null
    _sum: Libro_AutorSumAggregateOutputType | null
    _min: Libro_AutorMinAggregateOutputType | null
    _max: Libro_AutorMaxAggregateOutputType | null
  }

  type GetLibro_AutorGroupByPayload<T extends Libro_AutorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Libro_AutorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Libro_AutorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Libro_AutorGroupByOutputType[P]>
            : GetScalarType<T[P], Libro_AutorGroupByOutputType[P]>
        }
      >
    >


  export type Libro_AutorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_Libro?: boolean
    id_Autor?: boolean
    Libro?: boolean | LibroDefaultArgs<ExtArgs>
    Autor?: boolean | AutorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["libro_Autor"]>



  export type Libro_AutorSelectScalar = {
    id_Libro?: boolean
    id_Autor?: boolean
  }

  export type Libro_AutorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id_Libro" | "id_Autor", ExtArgs["result"]["libro_Autor"]>
  export type Libro_AutorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Libro?: boolean | LibroDefaultArgs<ExtArgs>
    Autor?: boolean | AutorDefaultArgs<ExtArgs>
  }

  export type $Libro_AutorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Libro_Autor"
    objects: {
      Libro: Prisma.$LibroPayload<ExtArgs>
      Autor: Prisma.$AutorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_Libro: number
      id_Autor: number
    }, ExtArgs["result"]["libro_Autor"]>
    composites: {}
  }

  type Libro_AutorGetPayload<S extends boolean | null | undefined | Libro_AutorDefaultArgs> = $Result.GetResult<Prisma.$Libro_AutorPayload, S>

  type Libro_AutorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<Libro_AutorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Libro_AutorCountAggregateInputType | true
    }

  export interface Libro_AutorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Libro_Autor'], meta: { name: 'Libro_Autor' } }
    /**
     * Find zero or one Libro_Autor that matches the filter.
     * @param {Libro_AutorFindUniqueArgs} args - Arguments to find a Libro_Autor
     * @example
     * // Get one Libro_Autor
     * const libro_Autor = await prisma.libro_Autor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Libro_AutorFindUniqueArgs>(args: SelectSubset<T, Libro_AutorFindUniqueArgs<ExtArgs>>): Prisma__Libro_AutorClient<$Result.GetResult<Prisma.$Libro_AutorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Libro_Autor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {Libro_AutorFindUniqueOrThrowArgs} args - Arguments to find a Libro_Autor
     * @example
     * // Get one Libro_Autor
     * const libro_Autor = await prisma.libro_Autor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Libro_AutorFindUniqueOrThrowArgs>(args: SelectSubset<T, Libro_AutorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__Libro_AutorClient<$Result.GetResult<Prisma.$Libro_AutorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Libro_Autor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Libro_AutorFindFirstArgs} args - Arguments to find a Libro_Autor
     * @example
     * // Get one Libro_Autor
     * const libro_Autor = await prisma.libro_Autor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Libro_AutorFindFirstArgs>(args?: SelectSubset<T, Libro_AutorFindFirstArgs<ExtArgs>>): Prisma__Libro_AutorClient<$Result.GetResult<Prisma.$Libro_AutorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Libro_Autor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Libro_AutorFindFirstOrThrowArgs} args - Arguments to find a Libro_Autor
     * @example
     * // Get one Libro_Autor
     * const libro_Autor = await prisma.libro_Autor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Libro_AutorFindFirstOrThrowArgs>(args?: SelectSubset<T, Libro_AutorFindFirstOrThrowArgs<ExtArgs>>): Prisma__Libro_AutorClient<$Result.GetResult<Prisma.$Libro_AutorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Libro_Autors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Libro_AutorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Libro_Autors
     * const libro_Autors = await prisma.libro_Autor.findMany()
     * 
     * // Get first 10 Libro_Autors
     * const libro_Autors = await prisma.libro_Autor.findMany({ take: 10 })
     * 
     * // Only select the `id_Libro`
     * const libro_AutorWithId_LibroOnly = await prisma.libro_Autor.findMany({ select: { id_Libro: true } })
     * 
     */
    findMany<T extends Libro_AutorFindManyArgs>(args?: SelectSubset<T, Libro_AutorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Libro_AutorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Libro_Autor.
     * @param {Libro_AutorCreateArgs} args - Arguments to create a Libro_Autor.
     * @example
     * // Create one Libro_Autor
     * const Libro_Autor = await prisma.libro_Autor.create({
     *   data: {
     *     // ... data to create a Libro_Autor
     *   }
     * })
     * 
     */
    create<T extends Libro_AutorCreateArgs>(args: SelectSubset<T, Libro_AutorCreateArgs<ExtArgs>>): Prisma__Libro_AutorClient<$Result.GetResult<Prisma.$Libro_AutorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Libro_Autors.
     * @param {Libro_AutorCreateManyArgs} args - Arguments to create many Libro_Autors.
     * @example
     * // Create many Libro_Autors
     * const libro_Autor = await prisma.libro_Autor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Libro_AutorCreateManyArgs>(args?: SelectSubset<T, Libro_AutorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Libro_Autor.
     * @param {Libro_AutorDeleteArgs} args - Arguments to delete one Libro_Autor.
     * @example
     * // Delete one Libro_Autor
     * const Libro_Autor = await prisma.libro_Autor.delete({
     *   where: {
     *     // ... filter to delete one Libro_Autor
     *   }
     * })
     * 
     */
    delete<T extends Libro_AutorDeleteArgs>(args: SelectSubset<T, Libro_AutorDeleteArgs<ExtArgs>>): Prisma__Libro_AutorClient<$Result.GetResult<Prisma.$Libro_AutorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Libro_Autor.
     * @param {Libro_AutorUpdateArgs} args - Arguments to update one Libro_Autor.
     * @example
     * // Update one Libro_Autor
     * const libro_Autor = await prisma.libro_Autor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Libro_AutorUpdateArgs>(args: SelectSubset<T, Libro_AutorUpdateArgs<ExtArgs>>): Prisma__Libro_AutorClient<$Result.GetResult<Prisma.$Libro_AutorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Libro_Autors.
     * @param {Libro_AutorDeleteManyArgs} args - Arguments to filter Libro_Autors to delete.
     * @example
     * // Delete a few Libro_Autors
     * const { count } = await prisma.libro_Autor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Libro_AutorDeleteManyArgs>(args?: SelectSubset<T, Libro_AutorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Libro_Autors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Libro_AutorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Libro_Autors
     * const libro_Autor = await prisma.libro_Autor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Libro_AutorUpdateManyArgs>(args: SelectSubset<T, Libro_AutorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Libro_Autor.
     * @param {Libro_AutorUpsertArgs} args - Arguments to update or create a Libro_Autor.
     * @example
     * // Update or create a Libro_Autor
     * const libro_Autor = await prisma.libro_Autor.upsert({
     *   create: {
     *     // ... data to create a Libro_Autor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Libro_Autor we want to update
     *   }
     * })
     */
    upsert<T extends Libro_AutorUpsertArgs>(args: SelectSubset<T, Libro_AutorUpsertArgs<ExtArgs>>): Prisma__Libro_AutorClient<$Result.GetResult<Prisma.$Libro_AutorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Libro_Autors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Libro_AutorCountArgs} args - Arguments to filter Libro_Autors to count.
     * @example
     * // Count the number of Libro_Autors
     * const count = await prisma.libro_Autor.count({
     *   where: {
     *     // ... the filter for the Libro_Autors we want to count
     *   }
     * })
    **/
    count<T extends Libro_AutorCountArgs>(
      args?: Subset<T, Libro_AutorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Libro_AutorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Libro_Autor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Libro_AutorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Libro_AutorAggregateArgs>(args: Subset<T, Libro_AutorAggregateArgs>): Prisma.PrismaPromise<GetLibro_AutorAggregateType<T>>

    /**
     * Group by Libro_Autor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Libro_AutorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Libro_AutorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Libro_AutorGroupByArgs['orderBy'] }
        : { orderBy?: Libro_AutorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Libro_AutorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLibro_AutorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Libro_Autor model
   */
  readonly fields: Libro_AutorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Libro_Autor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Libro_AutorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Libro<T extends LibroDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LibroDefaultArgs<ExtArgs>>): Prisma__LibroClient<$Result.GetResult<Prisma.$LibroPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Autor<T extends AutorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AutorDefaultArgs<ExtArgs>>): Prisma__AutorClient<$Result.GetResult<Prisma.$AutorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Libro_Autor model
   */
  interface Libro_AutorFieldRefs {
    readonly id_Libro: FieldRef<"Libro_Autor", 'Int'>
    readonly id_Autor: FieldRef<"Libro_Autor", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Libro_Autor findUnique
   */
  export type Libro_AutorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Libro_Autor
     */
    select?: Libro_AutorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Libro_Autor
     */
    omit?: Libro_AutorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Libro_AutorInclude<ExtArgs> | null
    /**
     * Filter, which Libro_Autor to fetch.
     */
    where: Libro_AutorWhereUniqueInput
  }

  /**
   * Libro_Autor findUniqueOrThrow
   */
  export type Libro_AutorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Libro_Autor
     */
    select?: Libro_AutorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Libro_Autor
     */
    omit?: Libro_AutorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Libro_AutorInclude<ExtArgs> | null
    /**
     * Filter, which Libro_Autor to fetch.
     */
    where: Libro_AutorWhereUniqueInput
  }

  /**
   * Libro_Autor findFirst
   */
  export type Libro_AutorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Libro_Autor
     */
    select?: Libro_AutorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Libro_Autor
     */
    omit?: Libro_AutorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Libro_AutorInclude<ExtArgs> | null
    /**
     * Filter, which Libro_Autor to fetch.
     */
    where?: Libro_AutorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Libro_Autors to fetch.
     */
    orderBy?: Libro_AutorOrderByWithRelationInput | Libro_AutorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Libro_Autors.
     */
    cursor?: Libro_AutorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Libro_Autors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Libro_Autors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Libro_Autors.
     */
    distinct?: Libro_AutorScalarFieldEnum | Libro_AutorScalarFieldEnum[]
  }

  /**
   * Libro_Autor findFirstOrThrow
   */
  export type Libro_AutorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Libro_Autor
     */
    select?: Libro_AutorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Libro_Autor
     */
    omit?: Libro_AutorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Libro_AutorInclude<ExtArgs> | null
    /**
     * Filter, which Libro_Autor to fetch.
     */
    where?: Libro_AutorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Libro_Autors to fetch.
     */
    orderBy?: Libro_AutorOrderByWithRelationInput | Libro_AutorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Libro_Autors.
     */
    cursor?: Libro_AutorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Libro_Autors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Libro_Autors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Libro_Autors.
     */
    distinct?: Libro_AutorScalarFieldEnum | Libro_AutorScalarFieldEnum[]
  }

  /**
   * Libro_Autor findMany
   */
  export type Libro_AutorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Libro_Autor
     */
    select?: Libro_AutorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Libro_Autor
     */
    omit?: Libro_AutorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Libro_AutorInclude<ExtArgs> | null
    /**
     * Filter, which Libro_Autors to fetch.
     */
    where?: Libro_AutorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Libro_Autors to fetch.
     */
    orderBy?: Libro_AutorOrderByWithRelationInput | Libro_AutorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Libro_Autors.
     */
    cursor?: Libro_AutorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Libro_Autors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Libro_Autors.
     */
    skip?: number
    distinct?: Libro_AutorScalarFieldEnum | Libro_AutorScalarFieldEnum[]
  }

  /**
   * Libro_Autor create
   */
  export type Libro_AutorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Libro_Autor
     */
    select?: Libro_AutorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Libro_Autor
     */
    omit?: Libro_AutorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Libro_AutorInclude<ExtArgs> | null
    /**
     * The data needed to create a Libro_Autor.
     */
    data: XOR<Libro_AutorCreateInput, Libro_AutorUncheckedCreateInput>
  }

  /**
   * Libro_Autor createMany
   */
  export type Libro_AutorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Libro_Autors.
     */
    data: Libro_AutorCreateManyInput | Libro_AutorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Libro_Autor update
   */
  export type Libro_AutorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Libro_Autor
     */
    select?: Libro_AutorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Libro_Autor
     */
    omit?: Libro_AutorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Libro_AutorInclude<ExtArgs> | null
    /**
     * The data needed to update a Libro_Autor.
     */
    data: XOR<Libro_AutorUpdateInput, Libro_AutorUncheckedUpdateInput>
    /**
     * Choose, which Libro_Autor to update.
     */
    where: Libro_AutorWhereUniqueInput
  }

  /**
   * Libro_Autor updateMany
   */
  export type Libro_AutorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Libro_Autors.
     */
    data: XOR<Libro_AutorUpdateManyMutationInput, Libro_AutorUncheckedUpdateManyInput>
    /**
     * Filter which Libro_Autors to update
     */
    where?: Libro_AutorWhereInput
    /**
     * Limit how many Libro_Autors to update.
     */
    limit?: number
  }

  /**
   * Libro_Autor upsert
   */
  export type Libro_AutorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Libro_Autor
     */
    select?: Libro_AutorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Libro_Autor
     */
    omit?: Libro_AutorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Libro_AutorInclude<ExtArgs> | null
    /**
     * The filter to search for the Libro_Autor to update in case it exists.
     */
    where: Libro_AutorWhereUniqueInput
    /**
     * In case the Libro_Autor found by the `where` argument doesn't exist, create a new Libro_Autor with this data.
     */
    create: XOR<Libro_AutorCreateInput, Libro_AutorUncheckedCreateInput>
    /**
     * In case the Libro_Autor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Libro_AutorUpdateInput, Libro_AutorUncheckedUpdateInput>
  }

  /**
   * Libro_Autor delete
   */
  export type Libro_AutorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Libro_Autor
     */
    select?: Libro_AutorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Libro_Autor
     */
    omit?: Libro_AutorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Libro_AutorInclude<ExtArgs> | null
    /**
     * Filter which Libro_Autor to delete.
     */
    where: Libro_AutorWhereUniqueInput
  }

  /**
   * Libro_Autor deleteMany
   */
  export type Libro_AutorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Libro_Autors to delete
     */
    where?: Libro_AutorWhereInput
    /**
     * Limit how many Libro_Autors to delete.
     */
    limit?: number
  }

  /**
   * Libro_Autor without action
   */
  export type Libro_AutorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Libro_Autor
     */
    select?: Libro_AutorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Libro_Autor
     */
    omit?: Libro_AutorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Libro_AutorInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AutorScalarFieldEnum: {
    id_Autor: 'id_Autor',
    Nombre: 'Nombre',
    Email: 'Email',
    Estado: 'Estado'
  };

  export type AutorScalarFieldEnum = (typeof AutorScalarFieldEnum)[keyof typeof AutorScalarFieldEnum]


  export const ClienteScalarFieldEnum: {
    id_Cliente: 'id_Cliente',
    Cedula: 'Cedula',
    Nombre: 'Nombre',
    Apellido: 'Apellido',
    FechaN: 'FechaN',
    Direccion: 'Direccion',
    Telefono: 'Telefono',
    Estado: 'Estado'
  };

  export type ClienteScalarFieldEnum = (typeof ClienteScalarFieldEnum)[keyof typeof ClienteScalarFieldEnum]


  export const DetalleFacturaScalarFieldEnum: {
    id_Detalle: 'id_Detalle',
    cantidad: 'cantidad',
    precio_uni: 'precio_uni',
    id_Compra: 'id_Compra',
    id_Libro: 'id_Libro'
  };

  export type DetalleFacturaScalarFieldEnum = (typeof DetalleFacturaScalarFieldEnum)[keyof typeof DetalleFacturaScalarFieldEnum]


  export const EditorialScalarFieldEnum: {
    id_Editorial: 'id_Editorial',
    Nombre: 'Nombre',
    Telefono: 'Telefono',
    Email: 'Email',
    SitioWeb: 'SitioWeb'
  };

  export type EditorialScalarFieldEnum = (typeof EditorialScalarFieldEnum)[keyof typeof EditorialScalarFieldEnum]


  export const FacturaScalarFieldEnum: {
    id_Compra: 'id_Compra',
    fecha_compra: 'fecha_compra',
    total: 'total',
    id_Cliente: 'id_Cliente'
  };

  export type FacturaScalarFieldEnum = (typeof FacturaScalarFieldEnum)[keyof typeof FacturaScalarFieldEnum]


  export const LibroScalarFieldEnum: {
    id_Libro: 'id_Libro',
    Titulo: 'Titulo',
    Fechap: 'Fechap',
    preciov: 'preciov',
    cantidad: 'cantidad',
    id_Editorial: 'id_Editorial',
    Estado: 'Estado',
    ISBN: 'ISBN',
    BestSellers: 'BestSellers',
    id_Categoria: 'id_Categoria'
  };

  export type LibroScalarFieldEnum = (typeof LibroScalarFieldEnum)[keyof typeof LibroScalarFieldEnum]


  export const CategoriaScalarFieldEnum: {
    id_Categoria: 'id_Categoria',
    Nombre: 'Nombre'
  };

  export type CategoriaScalarFieldEnum = (typeof CategoriaScalarFieldEnum)[keyof typeof CategoriaScalarFieldEnum]


  export const Libro_AutorScalarFieldEnum: {
    id_Libro: 'id_Libro',
    id_Autor: 'id_Autor'
  };

  export type Libro_AutorScalarFieldEnum = (typeof Libro_AutorScalarFieldEnum)[keyof typeof Libro_AutorScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const AutorOrderByRelevanceFieldEnum: {
    Nombre: 'Nombre',
    Email: 'Email'
  };

  export type AutorOrderByRelevanceFieldEnum = (typeof AutorOrderByRelevanceFieldEnum)[keyof typeof AutorOrderByRelevanceFieldEnum]


  export const ClienteOrderByRelevanceFieldEnum: {
    Cedula: 'Cedula',
    Nombre: 'Nombre',
    Apellido: 'Apellido',
    Direccion: 'Direccion',
    Telefono: 'Telefono'
  };

  export type ClienteOrderByRelevanceFieldEnum = (typeof ClienteOrderByRelevanceFieldEnum)[keyof typeof ClienteOrderByRelevanceFieldEnum]


  export const EditorialOrderByRelevanceFieldEnum: {
    Nombre: 'Nombre',
    Telefono: 'Telefono',
    Email: 'Email',
    SitioWeb: 'SitioWeb'
  };

  export type EditorialOrderByRelevanceFieldEnum = (typeof EditorialOrderByRelevanceFieldEnum)[keyof typeof EditorialOrderByRelevanceFieldEnum]


  export const LibroOrderByRelevanceFieldEnum: {
    Titulo: 'Titulo',
    ISBN: 'ISBN'
  };

  export type LibroOrderByRelevanceFieldEnum = (typeof LibroOrderByRelevanceFieldEnum)[keyof typeof LibroOrderByRelevanceFieldEnum]


  export const CategoriaOrderByRelevanceFieldEnum: {
    Nombre: 'Nombre'
  };

  export type CategoriaOrderByRelevanceFieldEnum = (typeof CategoriaOrderByRelevanceFieldEnum)[keyof typeof CategoriaOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Autor_Estado'
   */
  export type EnumAutor_EstadoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Autor_Estado'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Cliente_Estado'
   */
  export type EnumCliente_EstadoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Cliente_Estado'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Libro_Estado'
   */
  export type EnumLibro_EstadoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Libro_Estado'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type AutorWhereInput = {
    AND?: AutorWhereInput | AutorWhereInput[]
    OR?: AutorWhereInput[]
    NOT?: AutorWhereInput | AutorWhereInput[]
    id_Autor?: IntFilter<"Autor"> | number
    Nombre?: StringFilter<"Autor"> | string
    Email?: StringNullableFilter<"Autor"> | string | null
    Estado?: EnumAutor_EstadoNullableFilter<"Autor"> | $Enums.Autor_Estado | null
    Libro_Autor?: Libro_AutorListRelationFilter
  }

  export type AutorOrderByWithRelationInput = {
    id_Autor?: SortOrder
    Nombre?: SortOrder
    Email?: SortOrderInput | SortOrder
    Estado?: SortOrderInput | SortOrder
    Libro_Autor?: Libro_AutorOrderByRelationAggregateInput
    _relevance?: AutorOrderByRelevanceInput
  }

  export type AutorWhereUniqueInput = Prisma.AtLeast<{
    id_Autor?: number
    AND?: AutorWhereInput | AutorWhereInput[]
    OR?: AutorWhereInput[]
    NOT?: AutorWhereInput | AutorWhereInput[]
    Nombre?: StringFilter<"Autor"> | string
    Email?: StringNullableFilter<"Autor"> | string | null
    Estado?: EnumAutor_EstadoNullableFilter<"Autor"> | $Enums.Autor_Estado | null
    Libro_Autor?: Libro_AutorListRelationFilter
  }, "id_Autor">

  export type AutorOrderByWithAggregationInput = {
    id_Autor?: SortOrder
    Nombre?: SortOrder
    Email?: SortOrderInput | SortOrder
    Estado?: SortOrderInput | SortOrder
    _count?: AutorCountOrderByAggregateInput
    _avg?: AutorAvgOrderByAggregateInput
    _max?: AutorMaxOrderByAggregateInput
    _min?: AutorMinOrderByAggregateInput
    _sum?: AutorSumOrderByAggregateInput
  }

  export type AutorScalarWhereWithAggregatesInput = {
    AND?: AutorScalarWhereWithAggregatesInput | AutorScalarWhereWithAggregatesInput[]
    OR?: AutorScalarWhereWithAggregatesInput[]
    NOT?: AutorScalarWhereWithAggregatesInput | AutorScalarWhereWithAggregatesInput[]
    id_Autor?: IntWithAggregatesFilter<"Autor"> | number
    Nombre?: StringWithAggregatesFilter<"Autor"> | string
    Email?: StringNullableWithAggregatesFilter<"Autor"> | string | null
    Estado?: EnumAutor_EstadoNullableWithAggregatesFilter<"Autor"> | $Enums.Autor_Estado | null
  }

  export type ClienteWhereInput = {
    AND?: ClienteWhereInput | ClienteWhereInput[]
    OR?: ClienteWhereInput[]
    NOT?: ClienteWhereInput | ClienteWhereInput[]
    id_Cliente?: IntFilter<"Cliente"> | number
    Cedula?: StringFilter<"Cliente"> | string
    Nombre?: StringFilter<"Cliente"> | string
    Apellido?: StringFilter<"Cliente"> | string
    FechaN?: DateTimeNullableFilter<"Cliente"> | Date | string | null
    Direccion?: StringNullableFilter<"Cliente"> | string | null
    Telefono?: StringNullableFilter<"Cliente"> | string | null
    Estado?: EnumCliente_EstadoNullableFilter<"Cliente"> | $Enums.Cliente_Estado | null
    facturas?: FacturaListRelationFilter
  }

  export type ClienteOrderByWithRelationInput = {
    id_Cliente?: SortOrder
    Cedula?: SortOrder
    Nombre?: SortOrder
    Apellido?: SortOrder
    FechaN?: SortOrderInput | SortOrder
    Direccion?: SortOrderInput | SortOrder
    Telefono?: SortOrderInput | SortOrder
    Estado?: SortOrderInput | SortOrder
    facturas?: FacturaOrderByRelationAggregateInput
    _relevance?: ClienteOrderByRelevanceInput
  }

  export type ClienteWhereUniqueInput = Prisma.AtLeast<{
    id_Cliente?: number
    Cedula?: string
    AND?: ClienteWhereInput | ClienteWhereInput[]
    OR?: ClienteWhereInput[]
    NOT?: ClienteWhereInput | ClienteWhereInput[]
    Nombre?: StringFilter<"Cliente"> | string
    Apellido?: StringFilter<"Cliente"> | string
    FechaN?: DateTimeNullableFilter<"Cliente"> | Date | string | null
    Direccion?: StringNullableFilter<"Cliente"> | string | null
    Telefono?: StringNullableFilter<"Cliente"> | string | null
    Estado?: EnumCliente_EstadoNullableFilter<"Cliente"> | $Enums.Cliente_Estado | null
    facturas?: FacturaListRelationFilter
  }, "id_Cliente" | "Cedula">

  export type ClienteOrderByWithAggregationInput = {
    id_Cliente?: SortOrder
    Cedula?: SortOrder
    Nombre?: SortOrder
    Apellido?: SortOrder
    FechaN?: SortOrderInput | SortOrder
    Direccion?: SortOrderInput | SortOrder
    Telefono?: SortOrderInput | SortOrder
    Estado?: SortOrderInput | SortOrder
    _count?: ClienteCountOrderByAggregateInput
    _avg?: ClienteAvgOrderByAggregateInput
    _max?: ClienteMaxOrderByAggregateInput
    _min?: ClienteMinOrderByAggregateInput
    _sum?: ClienteSumOrderByAggregateInput
  }

  export type ClienteScalarWhereWithAggregatesInput = {
    AND?: ClienteScalarWhereWithAggregatesInput | ClienteScalarWhereWithAggregatesInput[]
    OR?: ClienteScalarWhereWithAggregatesInput[]
    NOT?: ClienteScalarWhereWithAggregatesInput | ClienteScalarWhereWithAggregatesInput[]
    id_Cliente?: IntWithAggregatesFilter<"Cliente"> | number
    Cedula?: StringWithAggregatesFilter<"Cliente"> | string
    Nombre?: StringWithAggregatesFilter<"Cliente"> | string
    Apellido?: StringWithAggregatesFilter<"Cliente"> | string
    FechaN?: DateTimeNullableWithAggregatesFilter<"Cliente"> | Date | string | null
    Direccion?: StringNullableWithAggregatesFilter<"Cliente"> | string | null
    Telefono?: StringNullableWithAggregatesFilter<"Cliente"> | string | null
    Estado?: EnumCliente_EstadoNullableWithAggregatesFilter<"Cliente"> | $Enums.Cliente_Estado | null
  }

  export type DetalleFacturaWhereInput = {
    AND?: DetalleFacturaWhereInput | DetalleFacturaWhereInput[]
    OR?: DetalleFacturaWhereInput[]
    NOT?: DetalleFacturaWhereInput | DetalleFacturaWhereInput[]
    id_Detalle?: IntFilter<"DetalleFactura"> | number
    cantidad?: IntFilter<"DetalleFactura"> | number
    precio_uni?: DecimalFilter<"DetalleFactura"> | Decimal | DecimalJsLike | number | string
    id_Compra?: IntNullableFilter<"DetalleFactura"> | number | null
    id_Libro?: IntNullableFilter<"DetalleFactura"> | number | null
    Factura?: XOR<FacturaNullableScalarRelationFilter, FacturaWhereInput> | null
    libro?: XOR<LibroNullableScalarRelationFilter, LibroWhereInput> | null
  }

  export type DetalleFacturaOrderByWithRelationInput = {
    id_Detalle?: SortOrder
    cantidad?: SortOrder
    precio_uni?: SortOrder
    id_Compra?: SortOrderInput | SortOrder
    id_Libro?: SortOrderInput | SortOrder
    Factura?: FacturaOrderByWithRelationInput
    libro?: LibroOrderByWithRelationInput
  }

  export type DetalleFacturaWhereUniqueInput = Prisma.AtLeast<{
    id_Detalle?: number
    AND?: DetalleFacturaWhereInput | DetalleFacturaWhereInput[]
    OR?: DetalleFacturaWhereInput[]
    NOT?: DetalleFacturaWhereInput | DetalleFacturaWhereInput[]
    cantidad?: IntFilter<"DetalleFactura"> | number
    precio_uni?: DecimalFilter<"DetalleFactura"> | Decimal | DecimalJsLike | number | string
    id_Compra?: IntNullableFilter<"DetalleFactura"> | number | null
    id_Libro?: IntNullableFilter<"DetalleFactura"> | number | null
    Factura?: XOR<FacturaNullableScalarRelationFilter, FacturaWhereInput> | null
    libro?: XOR<LibroNullableScalarRelationFilter, LibroWhereInput> | null
  }, "id_Detalle">

  export type DetalleFacturaOrderByWithAggregationInput = {
    id_Detalle?: SortOrder
    cantidad?: SortOrder
    precio_uni?: SortOrder
    id_Compra?: SortOrderInput | SortOrder
    id_Libro?: SortOrderInput | SortOrder
    _count?: DetalleFacturaCountOrderByAggregateInput
    _avg?: DetalleFacturaAvgOrderByAggregateInput
    _max?: DetalleFacturaMaxOrderByAggregateInput
    _min?: DetalleFacturaMinOrderByAggregateInput
    _sum?: DetalleFacturaSumOrderByAggregateInput
  }

  export type DetalleFacturaScalarWhereWithAggregatesInput = {
    AND?: DetalleFacturaScalarWhereWithAggregatesInput | DetalleFacturaScalarWhereWithAggregatesInput[]
    OR?: DetalleFacturaScalarWhereWithAggregatesInput[]
    NOT?: DetalleFacturaScalarWhereWithAggregatesInput | DetalleFacturaScalarWhereWithAggregatesInput[]
    id_Detalle?: IntWithAggregatesFilter<"DetalleFactura"> | number
    cantidad?: IntWithAggregatesFilter<"DetalleFactura"> | number
    precio_uni?: DecimalWithAggregatesFilter<"DetalleFactura"> | Decimal | DecimalJsLike | number | string
    id_Compra?: IntNullableWithAggregatesFilter<"DetalleFactura"> | number | null
    id_Libro?: IntNullableWithAggregatesFilter<"DetalleFactura"> | number | null
  }

  export type EditorialWhereInput = {
    AND?: EditorialWhereInput | EditorialWhereInput[]
    OR?: EditorialWhereInput[]
    NOT?: EditorialWhereInput | EditorialWhereInput[]
    id_Editorial?: IntFilter<"Editorial"> | number
    Nombre?: StringFilter<"Editorial"> | string
    Telefono?: StringNullableFilter<"Editorial"> | string | null
    Email?: StringNullableFilter<"Editorial"> | string | null
    SitioWeb?: StringNullableFilter<"Editorial"> | string | null
    libros?: LibroListRelationFilter
  }

  export type EditorialOrderByWithRelationInput = {
    id_Editorial?: SortOrder
    Nombre?: SortOrder
    Telefono?: SortOrderInput | SortOrder
    Email?: SortOrderInput | SortOrder
    SitioWeb?: SortOrderInput | SortOrder
    libros?: LibroOrderByRelationAggregateInput
    _relevance?: EditorialOrderByRelevanceInput
  }

  export type EditorialWhereUniqueInput = Prisma.AtLeast<{
    id_Editorial?: number
    AND?: EditorialWhereInput | EditorialWhereInput[]
    OR?: EditorialWhereInput[]
    NOT?: EditorialWhereInput | EditorialWhereInput[]
    Nombre?: StringFilter<"Editorial"> | string
    Telefono?: StringNullableFilter<"Editorial"> | string | null
    Email?: StringNullableFilter<"Editorial"> | string | null
    SitioWeb?: StringNullableFilter<"Editorial"> | string | null
    libros?: LibroListRelationFilter
  }, "id_Editorial">

  export type EditorialOrderByWithAggregationInput = {
    id_Editorial?: SortOrder
    Nombre?: SortOrder
    Telefono?: SortOrderInput | SortOrder
    Email?: SortOrderInput | SortOrder
    SitioWeb?: SortOrderInput | SortOrder
    _count?: EditorialCountOrderByAggregateInput
    _avg?: EditorialAvgOrderByAggregateInput
    _max?: EditorialMaxOrderByAggregateInput
    _min?: EditorialMinOrderByAggregateInput
    _sum?: EditorialSumOrderByAggregateInput
  }

  export type EditorialScalarWhereWithAggregatesInput = {
    AND?: EditorialScalarWhereWithAggregatesInput | EditorialScalarWhereWithAggregatesInput[]
    OR?: EditorialScalarWhereWithAggregatesInput[]
    NOT?: EditorialScalarWhereWithAggregatesInput | EditorialScalarWhereWithAggregatesInput[]
    id_Editorial?: IntWithAggregatesFilter<"Editorial"> | number
    Nombre?: StringWithAggregatesFilter<"Editorial"> | string
    Telefono?: StringNullableWithAggregatesFilter<"Editorial"> | string | null
    Email?: StringNullableWithAggregatesFilter<"Editorial"> | string | null
    SitioWeb?: StringNullableWithAggregatesFilter<"Editorial"> | string | null
  }

  export type FacturaWhereInput = {
    AND?: FacturaWhereInput | FacturaWhereInput[]
    OR?: FacturaWhereInput[]
    NOT?: FacturaWhereInput | FacturaWhereInput[]
    id_Compra?: IntFilter<"Factura"> | number
    fecha_compra?: DateTimeNullableFilter<"Factura"> | Date | string | null
    total?: DecimalFilter<"Factura"> | Decimal | DecimalJsLike | number | string
    id_Cliente?: IntNullableFilter<"Factura"> | number | null
    DetalleFactura?: DetalleFacturaListRelationFilter
    cliente?: XOR<ClienteNullableScalarRelationFilter, ClienteWhereInput> | null
  }

  export type FacturaOrderByWithRelationInput = {
    id_Compra?: SortOrder
    fecha_compra?: SortOrderInput | SortOrder
    total?: SortOrder
    id_Cliente?: SortOrderInput | SortOrder
    DetalleFactura?: DetalleFacturaOrderByRelationAggregateInput
    cliente?: ClienteOrderByWithRelationInput
  }

  export type FacturaWhereUniqueInput = Prisma.AtLeast<{
    id_Compra?: number
    AND?: FacturaWhereInput | FacturaWhereInput[]
    OR?: FacturaWhereInput[]
    NOT?: FacturaWhereInput | FacturaWhereInput[]
    fecha_compra?: DateTimeNullableFilter<"Factura"> | Date | string | null
    total?: DecimalFilter<"Factura"> | Decimal | DecimalJsLike | number | string
    id_Cliente?: IntNullableFilter<"Factura"> | number | null
    DetalleFactura?: DetalleFacturaListRelationFilter
    cliente?: XOR<ClienteNullableScalarRelationFilter, ClienteWhereInput> | null
  }, "id_Compra">

  export type FacturaOrderByWithAggregationInput = {
    id_Compra?: SortOrder
    fecha_compra?: SortOrderInput | SortOrder
    total?: SortOrder
    id_Cliente?: SortOrderInput | SortOrder
    _count?: FacturaCountOrderByAggregateInput
    _avg?: FacturaAvgOrderByAggregateInput
    _max?: FacturaMaxOrderByAggregateInput
    _min?: FacturaMinOrderByAggregateInput
    _sum?: FacturaSumOrderByAggregateInput
  }

  export type FacturaScalarWhereWithAggregatesInput = {
    AND?: FacturaScalarWhereWithAggregatesInput | FacturaScalarWhereWithAggregatesInput[]
    OR?: FacturaScalarWhereWithAggregatesInput[]
    NOT?: FacturaScalarWhereWithAggregatesInput | FacturaScalarWhereWithAggregatesInput[]
    id_Compra?: IntWithAggregatesFilter<"Factura"> | number
    fecha_compra?: DateTimeNullableWithAggregatesFilter<"Factura"> | Date | string | null
    total?: DecimalWithAggregatesFilter<"Factura"> | Decimal | DecimalJsLike | number | string
    id_Cliente?: IntNullableWithAggregatesFilter<"Factura"> | number | null
  }

  export type LibroWhereInput = {
    AND?: LibroWhereInput | LibroWhereInput[]
    OR?: LibroWhereInput[]
    NOT?: LibroWhereInput | LibroWhereInput[]
    id_Libro?: IntFilter<"Libro"> | number
    Titulo?: StringFilter<"Libro"> | string
    Fechap?: DateTimeNullableFilter<"Libro"> | Date | string | null
    preciov?: DecimalFilter<"Libro"> | Decimal | DecimalJsLike | number | string
    cantidad?: IntNullableFilter<"Libro"> | number | null
    id_Editorial?: IntNullableFilter<"Libro"> | number | null
    Estado?: EnumLibro_EstadoNullableFilter<"Libro"> | $Enums.Libro_Estado | null
    ISBN?: StringFilter<"Libro"> | string
    BestSellers?: BoolFilter<"Libro"> | boolean
    id_Categoria?: IntNullableFilter<"Libro"> | number | null
    detalles?: DetalleFacturaListRelationFilter
    editorial?: XOR<EditorialNullableScalarRelationFilter, EditorialWhereInput> | null
    Libro_Autor?: Libro_AutorListRelationFilter
    categoria?: XOR<CategoriaNullableScalarRelationFilter, CategoriaWhereInput> | null
  }

  export type LibroOrderByWithRelationInput = {
    id_Libro?: SortOrder
    Titulo?: SortOrder
    Fechap?: SortOrderInput | SortOrder
    preciov?: SortOrder
    cantidad?: SortOrderInput | SortOrder
    id_Editorial?: SortOrderInput | SortOrder
    Estado?: SortOrderInput | SortOrder
    ISBN?: SortOrder
    BestSellers?: SortOrder
    id_Categoria?: SortOrderInput | SortOrder
    detalles?: DetalleFacturaOrderByRelationAggregateInput
    editorial?: EditorialOrderByWithRelationInput
    Libro_Autor?: Libro_AutorOrderByRelationAggregateInput
    categoria?: CategoriaOrderByWithRelationInput
    _relevance?: LibroOrderByRelevanceInput
  }

  export type LibroWhereUniqueInput = Prisma.AtLeast<{
    id_Libro?: number
    AND?: LibroWhereInput | LibroWhereInput[]
    OR?: LibroWhereInput[]
    NOT?: LibroWhereInput | LibroWhereInput[]
    Titulo?: StringFilter<"Libro"> | string
    Fechap?: DateTimeNullableFilter<"Libro"> | Date | string | null
    preciov?: DecimalFilter<"Libro"> | Decimal | DecimalJsLike | number | string
    cantidad?: IntNullableFilter<"Libro"> | number | null
    id_Editorial?: IntNullableFilter<"Libro"> | number | null
    Estado?: EnumLibro_EstadoNullableFilter<"Libro"> | $Enums.Libro_Estado | null
    ISBN?: StringFilter<"Libro"> | string
    BestSellers?: BoolFilter<"Libro"> | boolean
    id_Categoria?: IntNullableFilter<"Libro"> | number | null
    detalles?: DetalleFacturaListRelationFilter
    editorial?: XOR<EditorialNullableScalarRelationFilter, EditorialWhereInput> | null
    Libro_Autor?: Libro_AutorListRelationFilter
    categoria?: XOR<CategoriaNullableScalarRelationFilter, CategoriaWhereInput> | null
  }, "id_Libro">

  export type LibroOrderByWithAggregationInput = {
    id_Libro?: SortOrder
    Titulo?: SortOrder
    Fechap?: SortOrderInput | SortOrder
    preciov?: SortOrder
    cantidad?: SortOrderInput | SortOrder
    id_Editorial?: SortOrderInput | SortOrder
    Estado?: SortOrderInput | SortOrder
    ISBN?: SortOrder
    BestSellers?: SortOrder
    id_Categoria?: SortOrderInput | SortOrder
    _count?: LibroCountOrderByAggregateInput
    _avg?: LibroAvgOrderByAggregateInput
    _max?: LibroMaxOrderByAggregateInput
    _min?: LibroMinOrderByAggregateInput
    _sum?: LibroSumOrderByAggregateInput
  }

  export type LibroScalarWhereWithAggregatesInput = {
    AND?: LibroScalarWhereWithAggregatesInput | LibroScalarWhereWithAggregatesInput[]
    OR?: LibroScalarWhereWithAggregatesInput[]
    NOT?: LibroScalarWhereWithAggregatesInput | LibroScalarWhereWithAggregatesInput[]
    id_Libro?: IntWithAggregatesFilter<"Libro"> | number
    Titulo?: StringWithAggregatesFilter<"Libro"> | string
    Fechap?: DateTimeNullableWithAggregatesFilter<"Libro"> | Date | string | null
    preciov?: DecimalWithAggregatesFilter<"Libro"> | Decimal | DecimalJsLike | number | string
    cantidad?: IntNullableWithAggregatesFilter<"Libro"> | number | null
    id_Editorial?: IntNullableWithAggregatesFilter<"Libro"> | number | null
    Estado?: EnumLibro_EstadoNullableWithAggregatesFilter<"Libro"> | $Enums.Libro_Estado | null
    ISBN?: StringWithAggregatesFilter<"Libro"> | string
    BestSellers?: BoolWithAggregatesFilter<"Libro"> | boolean
    id_Categoria?: IntNullableWithAggregatesFilter<"Libro"> | number | null
  }

  export type CategoriaWhereInput = {
    AND?: CategoriaWhereInput | CategoriaWhereInput[]
    OR?: CategoriaWhereInput[]
    NOT?: CategoriaWhereInput | CategoriaWhereInput[]
    id_Categoria?: IntFilter<"Categoria"> | number
    Nombre?: StringFilter<"Categoria"> | string
    libros?: LibroListRelationFilter
  }

  export type CategoriaOrderByWithRelationInput = {
    id_Categoria?: SortOrder
    Nombre?: SortOrder
    libros?: LibroOrderByRelationAggregateInput
    _relevance?: CategoriaOrderByRelevanceInput
  }

  export type CategoriaWhereUniqueInput = Prisma.AtLeast<{
    id_Categoria?: number
    AND?: CategoriaWhereInput | CategoriaWhereInput[]
    OR?: CategoriaWhereInput[]
    NOT?: CategoriaWhereInput | CategoriaWhereInput[]
    Nombre?: StringFilter<"Categoria"> | string
    libros?: LibroListRelationFilter
  }, "id_Categoria">

  export type CategoriaOrderByWithAggregationInput = {
    id_Categoria?: SortOrder
    Nombre?: SortOrder
    _count?: CategoriaCountOrderByAggregateInput
    _avg?: CategoriaAvgOrderByAggregateInput
    _max?: CategoriaMaxOrderByAggregateInput
    _min?: CategoriaMinOrderByAggregateInput
    _sum?: CategoriaSumOrderByAggregateInput
  }

  export type CategoriaScalarWhereWithAggregatesInput = {
    AND?: CategoriaScalarWhereWithAggregatesInput | CategoriaScalarWhereWithAggregatesInput[]
    OR?: CategoriaScalarWhereWithAggregatesInput[]
    NOT?: CategoriaScalarWhereWithAggregatesInput | CategoriaScalarWhereWithAggregatesInput[]
    id_Categoria?: IntWithAggregatesFilter<"Categoria"> | number
    Nombre?: StringWithAggregatesFilter<"Categoria"> | string
  }

  export type Libro_AutorWhereInput = {
    AND?: Libro_AutorWhereInput | Libro_AutorWhereInput[]
    OR?: Libro_AutorWhereInput[]
    NOT?: Libro_AutorWhereInput | Libro_AutorWhereInput[]
    id_Libro?: IntFilter<"Libro_Autor"> | number
    id_Autor?: IntFilter<"Libro_Autor"> | number
    Libro?: XOR<LibroScalarRelationFilter, LibroWhereInput>
    Autor?: XOR<AutorScalarRelationFilter, AutorWhereInput>
  }

  export type Libro_AutorOrderByWithRelationInput = {
    id_Libro?: SortOrder
    id_Autor?: SortOrder
    Libro?: LibroOrderByWithRelationInput
    Autor?: AutorOrderByWithRelationInput
  }

  export type Libro_AutorWhereUniqueInput = Prisma.AtLeast<{
    id_Libro_id_Autor?: Libro_AutorId_LibroId_AutorCompoundUniqueInput
    AND?: Libro_AutorWhereInput | Libro_AutorWhereInput[]
    OR?: Libro_AutorWhereInput[]
    NOT?: Libro_AutorWhereInput | Libro_AutorWhereInput[]
    id_Libro?: IntFilter<"Libro_Autor"> | number
    id_Autor?: IntFilter<"Libro_Autor"> | number
    Libro?: XOR<LibroScalarRelationFilter, LibroWhereInput>
    Autor?: XOR<AutorScalarRelationFilter, AutorWhereInput>
  }, "id_Libro_id_Autor">

  export type Libro_AutorOrderByWithAggregationInput = {
    id_Libro?: SortOrder
    id_Autor?: SortOrder
    _count?: Libro_AutorCountOrderByAggregateInput
    _avg?: Libro_AutorAvgOrderByAggregateInput
    _max?: Libro_AutorMaxOrderByAggregateInput
    _min?: Libro_AutorMinOrderByAggregateInput
    _sum?: Libro_AutorSumOrderByAggregateInput
  }

  export type Libro_AutorScalarWhereWithAggregatesInput = {
    AND?: Libro_AutorScalarWhereWithAggregatesInput | Libro_AutorScalarWhereWithAggregatesInput[]
    OR?: Libro_AutorScalarWhereWithAggregatesInput[]
    NOT?: Libro_AutorScalarWhereWithAggregatesInput | Libro_AutorScalarWhereWithAggregatesInput[]
    id_Libro?: IntWithAggregatesFilter<"Libro_Autor"> | number
    id_Autor?: IntWithAggregatesFilter<"Libro_Autor"> | number
  }

  export type AutorCreateInput = {
    Nombre: string
    Email?: string | null
    Estado?: $Enums.Autor_Estado | null
    Libro_Autor?: Libro_AutorCreateNestedManyWithoutAutorInput
  }

  export type AutorUncheckedCreateInput = {
    id_Autor?: number
    Nombre: string
    Email?: string | null
    Estado?: $Enums.Autor_Estado | null
    Libro_Autor?: Libro_AutorUncheckedCreateNestedManyWithoutAutorInput
  }

  export type AutorUpdateInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    Estado?: NullableEnumAutor_EstadoFieldUpdateOperationsInput | $Enums.Autor_Estado | null
    Libro_Autor?: Libro_AutorUpdateManyWithoutAutorNestedInput
  }

  export type AutorUncheckedUpdateInput = {
    id_Autor?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    Estado?: NullableEnumAutor_EstadoFieldUpdateOperationsInput | $Enums.Autor_Estado | null
    Libro_Autor?: Libro_AutorUncheckedUpdateManyWithoutAutorNestedInput
  }

  export type AutorCreateManyInput = {
    id_Autor?: number
    Nombre: string
    Email?: string | null
    Estado?: $Enums.Autor_Estado | null
  }

  export type AutorUpdateManyMutationInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    Estado?: NullableEnumAutor_EstadoFieldUpdateOperationsInput | $Enums.Autor_Estado | null
  }

  export type AutorUncheckedUpdateManyInput = {
    id_Autor?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    Estado?: NullableEnumAutor_EstadoFieldUpdateOperationsInput | $Enums.Autor_Estado | null
  }

  export type ClienteCreateInput = {
    Cedula: string
    Nombre: string
    Apellido: string
    FechaN?: Date | string | null
    Direccion?: string | null
    Telefono?: string | null
    Estado?: $Enums.Cliente_Estado | null
    facturas?: FacturaCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateInput = {
    id_Cliente?: number
    Cedula: string
    Nombre: string
    Apellido: string
    FechaN?: Date | string | null
    Direccion?: string | null
    Telefono?: string | null
    Estado?: $Enums.Cliente_Estado | null
    facturas?: FacturaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteUpdateInput = {
    Cedula?: StringFieldUpdateOperationsInput | string
    Nombre?: StringFieldUpdateOperationsInput | string
    Apellido?: StringFieldUpdateOperationsInput | string
    FechaN?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Direccion?: NullableStringFieldUpdateOperationsInput | string | null
    Telefono?: NullableStringFieldUpdateOperationsInput | string | null
    Estado?: NullableEnumCliente_EstadoFieldUpdateOperationsInput | $Enums.Cliente_Estado | null
    facturas?: FacturaUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateInput = {
    id_Cliente?: IntFieldUpdateOperationsInput | number
    Cedula?: StringFieldUpdateOperationsInput | string
    Nombre?: StringFieldUpdateOperationsInput | string
    Apellido?: StringFieldUpdateOperationsInput | string
    FechaN?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Direccion?: NullableStringFieldUpdateOperationsInput | string | null
    Telefono?: NullableStringFieldUpdateOperationsInput | string | null
    Estado?: NullableEnumCliente_EstadoFieldUpdateOperationsInput | $Enums.Cliente_Estado | null
    facturas?: FacturaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ClienteCreateManyInput = {
    id_Cliente?: number
    Cedula: string
    Nombre: string
    Apellido: string
    FechaN?: Date | string | null
    Direccion?: string | null
    Telefono?: string | null
    Estado?: $Enums.Cliente_Estado | null
  }

  export type ClienteUpdateManyMutationInput = {
    Cedula?: StringFieldUpdateOperationsInput | string
    Nombre?: StringFieldUpdateOperationsInput | string
    Apellido?: StringFieldUpdateOperationsInput | string
    FechaN?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Direccion?: NullableStringFieldUpdateOperationsInput | string | null
    Telefono?: NullableStringFieldUpdateOperationsInput | string | null
    Estado?: NullableEnumCliente_EstadoFieldUpdateOperationsInput | $Enums.Cliente_Estado | null
  }

  export type ClienteUncheckedUpdateManyInput = {
    id_Cliente?: IntFieldUpdateOperationsInput | number
    Cedula?: StringFieldUpdateOperationsInput | string
    Nombre?: StringFieldUpdateOperationsInput | string
    Apellido?: StringFieldUpdateOperationsInput | string
    FechaN?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Direccion?: NullableStringFieldUpdateOperationsInput | string | null
    Telefono?: NullableStringFieldUpdateOperationsInput | string | null
    Estado?: NullableEnumCliente_EstadoFieldUpdateOperationsInput | $Enums.Cliente_Estado | null
  }

  export type DetalleFacturaCreateInput = {
    cantidad: number
    precio_uni: Decimal | DecimalJsLike | number | string
    Factura?: FacturaCreateNestedOneWithoutDetalleFacturaInput
    libro?: LibroCreateNestedOneWithoutDetallesInput
  }

  export type DetalleFacturaUncheckedCreateInput = {
    id_Detalle?: number
    cantidad: number
    precio_uni: Decimal | DecimalJsLike | number | string
    id_Compra?: number | null
    id_Libro?: number | null
  }

  export type DetalleFacturaUpdateInput = {
    cantidad?: IntFieldUpdateOperationsInput | number
    precio_uni?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Factura?: FacturaUpdateOneWithoutDetalleFacturaNestedInput
    libro?: LibroUpdateOneWithoutDetallesNestedInput
  }

  export type DetalleFacturaUncheckedUpdateInput = {
    id_Detalle?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precio_uni?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    id_Compra?: NullableIntFieldUpdateOperationsInput | number | null
    id_Libro?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DetalleFacturaCreateManyInput = {
    id_Detalle?: number
    cantidad: number
    precio_uni: Decimal | DecimalJsLike | number | string
    id_Compra?: number | null
    id_Libro?: number | null
  }

  export type DetalleFacturaUpdateManyMutationInput = {
    cantidad?: IntFieldUpdateOperationsInput | number
    precio_uni?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type DetalleFacturaUncheckedUpdateManyInput = {
    id_Detalle?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precio_uni?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    id_Compra?: NullableIntFieldUpdateOperationsInput | number | null
    id_Libro?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type EditorialCreateInput = {
    Nombre: string
    Telefono?: string | null
    Email?: string | null
    SitioWeb?: string | null
    libros?: LibroCreateNestedManyWithoutEditorialInput
  }

  export type EditorialUncheckedCreateInput = {
    id_Editorial?: number
    Nombre: string
    Telefono?: string | null
    Email?: string | null
    SitioWeb?: string | null
    libros?: LibroUncheckedCreateNestedManyWithoutEditorialInput
  }

  export type EditorialUpdateInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    Telefono?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    SitioWeb?: NullableStringFieldUpdateOperationsInput | string | null
    libros?: LibroUpdateManyWithoutEditorialNestedInput
  }

  export type EditorialUncheckedUpdateInput = {
    id_Editorial?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Telefono?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    SitioWeb?: NullableStringFieldUpdateOperationsInput | string | null
    libros?: LibroUncheckedUpdateManyWithoutEditorialNestedInput
  }

  export type EditorialCreateManyInput = {
    id_Editorial?: number
    Nombre: string
    Telefono?: string | null
    Email?: string | null
    SitioWeb?: string | null
  }

  export type EditorialUpdateManyMutationInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    Telefono?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    SitioWeb?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EditorialUncheckedUpdateManyInput = {
    id_Editorial?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Telefono?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    SitioWeb?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FacturaCreateInput = {
    fecha_compra?: Date | string | null
    total: Decimal | DecimalJsLike | number | string
    DetalleFactura?: DetalleFacturaCreateNestedManyWithoutFacturaInput
    cliente?: ClienteCreateNestedOneWithoutFacturasInput
  }

  export type FacturaUncheckedCreateInput = {
    id_Compra?: number
    fecha_compra?: Date | string | null
    total: Decimal | DecimalJsLike | number | string
    id_Cliente?: number | null
    DetalleFactura?: DetalleFacturaUncheckedCreateNestedManyWithoutFacturaInput
  }

  export type FacturaUpdateInput = {
    fecha_compra?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    DetalleFactura?: DetalleFacturaUpdateManyWithoutFacturaNestedInput
    cliente?: ClienteUpdateOneWithoutFacturasNestedInput
  }

  export type FacturaUncheckedUpdateInput = {
    id_Compra?: IntFieldUpdateOperationsInput | number
    fecha_compra?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    id_Cliente?: NullableIntFieldUpdateOperationsInput | number | null
    DetalleFactura?: DetalleFacturaUncheckedUpdateManyWithoutFacturaNestedInput
  }

  export type FacturaCreateManyInput = {
    id_Compra?: number
    fecha_compra?: Date | string | null
    total: Decimal | DecimalJsLike | number | string
    id_Cliente?: number | null
  }

  export type FacturaUpdateManyMutationInput = {
    fecha_compra?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type FacturaUncheckedUpdateManyInput = {
    id_Compra?: IntFieldUpdateOperationsInput | number
    fecha_compra?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    id_Cliente?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LibroCreateInput = {
    Titulo: string
    Fechap?: Date | string | null
    preciov: Decimal | DecimalJsLike | number | string
    cantidad?: number | null
    Estado?: $Enums.Libro_Estado | null
    ISBN: string
    BestSellers?: boolean
    detalles?: DetalleFacturaCreateNestedManyWithoutLibroInput
    editorial?: EditorialCreateNestedOneWithoutLibrosInput
    Libro_Autor?: Libro_AutorCreateNestedManyWithoutLibroInput
    categoria?: CategoriaCreateNestedOneWithoutLibrosInput
  }

  export type LibroUncheckedCreateInput = {
    id_Libro?: number
    Titulo: string
    Fechap?: Date | string | null
    preciov: Decimal | DecimalJsLike | number | string
    cantidad?: number | null
    id_Editorial?: number | null
    Estado?: $Enums.Libro_Estado | null
    ISBN: string
    BestSellers?: boolean
    id_Categoria?: number | null
    detalles?: DetalleFacturaUncheckedCreateNestedManyWithoutLibroInput
    Libro_Autor?: Libro_AutorUncheckedCreateNestedManyWithoutLibroInput
  }

  export type LibroUpdateInput = {
    Titulo?: StringFieldUpdateOperationsInput | string
    Fechap?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preciov?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cantidad?: NullableIntFieldUpdateOperationsInput | number | null
    Estado?: NullableEnumLibro_EstadoFieldUpdateOperationsInput | $Enums.Libro_Estado | null
    ISBN?: StringFieldUpdateOperationsInput | string
    BestSellers?: BoolFieldUpdateOperationsInput | boolean
    detalles?: DetalleFacturaUpdateManyWithoutLibroNestedInput
    editorial?: EditorialUpdateOneWithoutLibrosNestedInput
    Libro_Autor?: Libro_AutorUpdateManyWithoutLibroNestedInput
    categoria?: CategoriaUpdateOneWithoutLibrosNestedInput
  }

  export type LibroUncheckedUpdateInput = {
    id_Libro?: IntFieldUpdateOperationsInput | number
    Titulo?: StringFieldUpdateOperationsInput | string
    Fechap?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preciov?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cantidad?: NullableIntFieldUpdateOperationsInput | number | null
    id_Editorial?: NullableIntFieldUpdateOperationsInput | number | null
    Estado?: NullableEnumLibro_EstadoFieldUpdateOperationsInput | $Enums.Libro_Estado | null
    ISBN?: StringFieldUpdateOperationsInput | string
    BestSellers?: BoolFieldUpdateOperationsInput | boolean
    id_Categoria?: NullableIntFieldUpdateOperationsInput | number | null
    detalles?: DetalleFacturaUncheckedUpdateManyWithoutLibroNestedInput
    Libro_Autor?: Libro_AutorUncheckedUpdateManyWithoutLibroNestedInput
  }

  export type LibroCreateManyInput = {
    id_Libro?: number
    Titulo: string
    Fechap?: Date | string | null
    preciov: Decimal | DecimalJsLike | number | string
    cantidad?: number | null
    id_Editorial?: number | null
    Estado?: $Enums.Libro_Estado | null
    ISBN: string
    BestSellers?: boolean
    id_Categoria?: number | null
  }

  export type LibroUpdateManyMutationInput = {
    Titulo?: StringFieldUpdateOperationsInput | string
    Fechap?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preciov?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cantidad?: NullableIntFieldUpdateOperationsInput | number | null
    Estado?: NullableEnumLibro_EstadoFieldUpdateOperationsInput | $Enums.Libro_Estado | null
    ISBN?: StringFieldUpdateOperationsInput | string
    BestSellers?: BoolFieldUpdateOperationsInput | boolean
  }

  export type LibroUncheckedUpdateManyInput = {
    id_Libro?: IntFieldUpdateOperationsInput | number
    Titulo?: StringFieldUpdateOperationsInput | string
    Fechap?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preciov?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cantidad?: NullableIntFieldUpdateOperationsInput | number | null
    id_Editorial?: NullableIntFieldUpdateOperationsInput | number | null
    Estado?: NullableEnumLibro_EstadoFieldUpdateOperationsInput | $Enums.Libro_Estado | null
    ISBN?: StringFieldUpdateOperationsInput | string
    BestSellers?: BoolFieldUpdateOperationsInput | boolean
    id_Categoria?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CategoriaCreateInput = {
    Nombre: string
    libros?: LibroCreateNestedManyWithoutCategoriaInput
  }

  export type CategoriaUncheckedCreateInput = {
    id_Categoria?: number
    Nombre: string
    libros?: LibroUncheckedCreateNestedManyWithoutCategoriaInput
  }

  export type CategoriaUpdateInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    libros?: LibroUpdateManyWithoutCategoriaNestedInput
  }

  export type CategoriaUncheckedUpdateInput = {
    id_Categoria?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    libros?: LibroUncheckedUpdateManyWithoutCategoriaNestedInput
  }

  export type CategoriaCreateManyInput = {
    id_Categoria?: number
    Nombre: string
  }

  export type CategoriaUpdateManyMutationInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriaUncheckedUpdateManyInput = {
    id_Categoria?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
  }

  export type Libro_AutorCreateInput = {
    Libro: LibroCreateNestedOneWithoutLibro_AutorInput
    Autor: AutorCreateNestedOneWithoutLibro_AutorInput
  }

  export type Libro_AutorUncheckedCreateInput = {
    id_Libro: number
    id_Autor: number
  }

  export type Libro_AutorUpdateInput = {
    Libro?: LibroUpdateOneRequiredWithoutLibro_AutorNestedInput
    Autor?: AutorUpdateOneRequiredWithoutLibro_AutorNestedInput
  }

  export type Libro_AutorUncheckedUpdateInput = {
    id_Libro?: IntFieldUpdateOperationsInput | number
    id_Autor?: IntFieldUpdateOperationsInput | number
  }

  export type Libro_AutorCreateManyInput = {
    id_Libro: number
    id_Autor: number
  }

  export type Libro_AutorUpdateManyMutationInput = {

  }

  export type Libro_AutorUncheckedUpdateManyInput = {
    id_Libro?: IntFieldUpdateOperationsInput | number
    id_Autor?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumAutor_EstadoNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Autor_Estado | EnumAutor_EstadoFieldRefInput<$PrismaModel> | null
    in?: $Enums.Autor_Estado[] | null
    notIn?: $Enums.Autor_Estado[] | null
    not?: NestedEnumAutor_EstadoNullableFilter<$PrismaModel> | $Enums.Autor_Estado | null
  }

  export type Libro_AutorListRelationFilter = {
    every?: Libro_AutorWhereInput
    some?: Libro_AutorWhereInput
    none?: Libro_AutorWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type Libro_AutorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AutorOrderByRelevanceInput = {
    fields: AutorOrderByRelevanceFieldEnum | AutorOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AutorCountOrderByAggregateInput = {
    id_Autor?: SortOrder
    Nombre?: SortOrder
    Email?: SortOrder
    Estado?: SortOrder
  }

  export type AutorAvgOrderByAggregateInput = {
    id_Autor?: SortOrder
  }

  export type AutorMaxOrderByAggregateInput = {
    id_Autor?: SortOrder
    Nombre?: SortOrder
    Email?: SortOrder
    Estado?: SortOrder
  }

  export type AutorMinOrderByAggregateInput = {
    id_Autor?: SortOrder
    Nombre?: SortOrder
    Email?: SortOrder
    Estado?: SortOrder
  }

  export type AutorSumOrderByAggregateInput = {
    id_Autor?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumAutor_EstadoNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Autor_Estado | EnumAutor_EstadoFieldRefInput<$PrismaModel> | null
    in?: $Enums.Autor_Estado[] | null
    notIn?: $Enums.Autor_Estado[] | null
    not?: NestedEnumAutor_EstadoNullableWithAggregatesFilter<$PrismaModel> | $Enums.Autor_Estado | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumAutor_EstadoNullableFilter<$PrismaModel>
    _max?: NestedEnumAutor_EstadoNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumCliente_EstadoNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Cliente_Estado | EnumCliente_EstadoFieldRefInput<$PrismaModel> | null
    in?: $Enums.Cliente_Estado[] | null
    notIn?: $Enums.Cliente_Estado[] | null
    not?: NestedEnumCliente_EstadoNullableFilter<$PrismaModel> | $Enums.Cliente_Estado | null
  }

  export type FacturaListRelationFilter = {
    every?: FacturaWhereInput
    some?: FacturaWhereInput
    none?: FacturaWhereInput
  }

  export type FacturaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClienteOrderByRelevanceInput = {
    fields: ClienteOrderByRelevanceFieldEnum | ClienteOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ClienteCountOrderByAggregateInput = {
    id_Cliente?: SortOrder
    Cedula?: SortOrder
    Nombre?: SortOrder
    Apellido?: SortOrder
    FechaN?: SortOrder
    Direccion?: SortOrder
    Telefono?: SortOrder
    Estado?: SortOrder
  }

  export type ClienteAvgOrderByAggregateInput = {
    id_Cliente?: SortOrder
  }

  export type ClienteMaxOrderByAggregateInput = {
    id_Cliente?: SortOrder
    Cedula?: SortOrder
    Nombre?: SortOrder
    Apellido?: SortOrder
    FechaN?: SortOrder
    Direccion?: SortOrder
    Telefono?: SortOrder
    Estado?: SortOrder
  }

  export type ClienteMinOrderByAggregateInput = {
    id_Cliente?: SortOrder
    Cedula?: SortOrder
    Nombre?: SortOrder
    Apellido?: SortOrder
    FechaN?: SortOrder
    Direccion?: SortOrder
    Telefono?: SortOrder
    Estado?: SortOrder
  }

  export type ClienteSumOrderByAggregateInput = {
    id_Cliente?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumCliente_EstadoNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Cliente_Estado | EnumCliente_EstadoFieldRefInput<$PrismaModel> | null
    in?: $Enums.Cliente_Estado[] | null
    notIn?: $Enums.Cliente_Estado[] | null
    not?: NestedEnumCliente_EstadoNullableWithAggregatesFilter<$PrismaModel> | $Enums.Cliente_Estado | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumCliente_EstadoNullableFilter<$PrismaModel>
    _max?: NestedEnumCliente_EstadoNullableFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FacturaNullableScalarRelationFilter = {
    is?: FacturaWhereInput | null
    isNot?: FacturaWhereInput | null
  }

  export type LibroNullableScalarRelationFilter = {
    is?: LibroWhereInput | null
    isNot?: LibroWhereInput | null
  }

  export type DetalleFacturaCountOrderByAggregateInput = {
    id_Detalle?: SortOrder
    cantidad?: SortOrder
    precio_uni?: SortOrder
    id_Compra?: SortOrder
    id_Libro?: SortOrder
  }

  export type DetalleFacturaAvgOrderByAggregateInput = {
    id_Detalle?: SortOrder
    cantidad?: SortOrder
    precio_uni?: SortOrder
    id_Compra?: SortOrder
    id_Libro?: SortOrder
  }

  export type DetalleFacturaMaxOrderByAggregateInput = {
    id_Detalle?: SortOrder
    cantidad?: SortOrder
    precio_uni?: SortOrder
    id_Compra?: SortOrder
    id_Libro?: SortOrder
  }

  export type DetalleFacturaMinOrderByAggregateInput = {
    id_Detalle?: SortOrder
    cantidad?: SortOrder
    precio_uni?: SortOrder
    id_Compra?: SortOrder
    id_Libro?: SortOrder
  }

  export type DetalleFacturaSumOrderByAggregateInput = {
    id_Detalle?: SortOrder
    cantidad?: SortOrder
    precio_uni?: SortOrder
    id_Compra?: SortOrder
    id_Libro?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type LibroListRelationFilter = {
    every?: LibroWhereInput
    some?: LibroWhereInput
    none?: LibroWhereInput
  }

  export type LibroOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EditorialOrderByRelevanceInput = {
    fields: EditorialOrderByRelevanceFieldEnum | EditorialOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type EditorialCountOrderByAggregateInput = {
    id_Editorial?: SortOrder
    Nombre?: SortOrder
    Telefono?: SortOrder
    Email?: SortOrder
    SitioWeb?: SortOrder
  }

  export type EditorialAvgOrderByAggregateInput = {
    id_Editorial?: SortOrder
  }

  export type EditorialMaxOrderByAggregateInput = {
    id_Editorial?: SortOrder
    Nombre?: SortOrder
    Telefono?: SortOrder
    Email?: SortOrder
    SitioWeb?: SortOrder
  }

  export type EditorialMinOrderByAggregateInput = {
    id_Editorial?: SortOrder
    Nombre?: SortOrder
    Telefono?: SortOrder
    Email?: SortOrder
    SitioWeb?: SortOrder
  }

  export type EditorialSumOrderByAggregateInput = {
    id_Editorial?: SortOrder
  }

  export type DetalleFacturaListRelationFilter = {
    every?: DetalleFacturaWhereInput
    some?: DetalleFacturaWhereInput
    none?: DetalleFacturaWhereInput
  }

  export type ClienteNullableScalarRelationFilter = {
    is?: ClienteWhereInput | null
    isNot?: ClienteWhereInput | null
  }

  export type DetalleFacturaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FacturaCountOrderByAggregateInput = {
    id_Compra?: SortOrder
    fecha_compra?: SortOrder
    total?: SortOrder
    id_Cliente?: SortOrder
  }

  export type FacturaAvgOrderByAggregateInput = {
    id_Compra?: SortOrder
    total?: SortOrder
    id_Cliente?: SortOrder
  }

  export type FacturaMaxOrderByAggregateInput = {
    id_Compra?: SortOrder
    fecha_compra?: SortOrder
    total?: SortOrder
    id_Cliente?: SortOrder
  }

  export type FacturaMinOrderByAggregateInput = {
    id_Compra?: SortOrder
    fecha_compra?: SortOrder
    total?: SortOrder
    id_Cliente?: SortOrder
  }

  export type FacturaSumOrderByAggregateInput = {
    id_Compra?: SortOrder
    total?: SortOrder
    id_Cliente?: SortOrder
  }

  export type EnumLibro_EstadoNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Libro_Estado | EnumLibro_EstadoFieldRefInput<$PrismaModel> | null
    in?: $Enums.Libro_Estado[] | null
    notIn?: $Enums.Libro_Estado[] | null
    not?: NestedEnumLibro_EstadoNullableFilter<$PrismaModel> | $Enums.Libro_Estado | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EditorialNullableScalarRelationFilter = {
    is?: EditorialWhereInput | null
    isNot?: EditorialWhereInput | null
  }

  export type CategoriaNullableScalarRelationFilter = {
    is?: CategoriaWhereInput | null
    isNot?: CategoriaWhereInput | null
  }

  export type LibroOrderByRelevanceInput = {
    fields: LibroOrderByRelevanceFieldEnum | LibroOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type LibroCountOrderByAggregateInput = {
    id_Libro?: SortOrder
    Titulo?: SortOrder
    Fechap?: SortOrder
    preciov?: SortOrder
    cantidad?: SortOrder
    id_Editorial?: SortOrder
    Estado?: SortOrder
    ISBN?: SortOrder
    BestSellers?: SortOrder
    id_Categoria?: SortOrder
  }

  export type LibroAvgOrderByAggregateInput = {
    id_Libro?: SortOrder
    preciov?: SortOrder
    cantidad?: SortOrder
    id_Editorial?: SortOrder
    id_Categoria?: SortOrder
  }

  export type LibroMaxOrderByAggregateInput = {
    id_Libro?: SortOrder
    Titulo?: SortOrder
    Fechap?: SortOrder
    preciov?: SortOrder
    cantidad?: SortOrder
    id_Editorial?: SortOrder
    Estado?: SortOrder
    ISBN?: SortOrder
    BestSellers?: SortOrder
    id_Categoria?: SortOrder
  }

  export type LibroMinOrderByAggregateInput = {
    id_Libro?: SortOrder
    Titulo?: SortOrder
    Fechap?: SortOrder
    preciov?: SortOrder
    cantidad?: SortOrder
    id_Editorial?: SortOrder
    Estado?: SortOrder
    ISBN?: SortOrder
    BestSellers?: SortOrder
    id_Categoria?: SortOrder
  }

  export type LibroSumOrderByAggregateInput = {
    id_Libro?: SortOrder
    preciov?: SortOrder
    cantidad?: SortOrder
    id_Editorial?: SortOrder
    id_Categoria?: SortOrder
  }

  export type EnumLibro_EstadoNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Libro_Estado | EnumLibro_EstadoFieldRefInput<$PrismaModel> | null
    in?: $Enums.Libro_Estado[] | null
    notIn?: $Enums.Libro_Estado[] | null
    not?: NestedEnumLibro_EstadoNullableWithAggregatesFilter<$PrismaModel> | $Enums.Libro_Estado | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumLibro_EstadoNullableFilter<$PrismaModel>
    _max?: NestedEnumLibro_EstadoNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type CategoriaOrderByRelevanceInput = {
    fields: CategoriaOrderByRelevanceFieldEnum | CategoriaOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CategoriaCountOrderByAggregateInput = {
    id_Categoria?: SortOrder
    Nombre?: SortOrder
  }

  export type CategoriaAvgOrderByAggregateInput = {
    id_Categoria?: SortOrder
  }

  export type CategoriaMaxOrderByAggregateInput = {
    id_Categoria?: SortOrder
    Nombre?: SortOrder
  }

  export type CategoriaMinOrderByAggregateInput = {
    id_Categoria?: SortOrder
    Nombre?: SortOrder
  }

  export type CategoriaSumOrderByAggregateInput = {
    id_Categoria?: SortOrder
  }

  export type LibroScalarRelationFilter = {
    is?: LibroWhereInput
    isNot?: LibroWhereInput
  }

  export type AutorScalarRelationFilter = {
    is?: AutorWhereInput
    isNot?: AutorWhereInput
  }

  export type Libro_AutorId_LibroId_AutorCompoundUniqueInput = {
    id_Libro: number
    id_Autor: number
  }

  export type Libro_AutorCountOrderByAggregateInput = {
    id_Libro?: SortOrder
    id_Autor?: SortOrder
  }

  export type Libro_AutorAvgOrderByAggregateInput = {
    id_Libro?: SortOrder
    id_Autor?: SortOrder
  }

  export type Libro_AutorMaxOrderByAggregateInput = {
    id_Libro?: SortOrder
    id_Autor?: SortOrder
  }

  export type Libro_AutorMinOrderByAggregateInput = {
    id_Libro?: SortOrder
    id_Autor?: SortOrder
  }

  export type Libro_AutorSumOrderByAggregateInput = {
    id_Libro?: SortOrder
    id_Autor?: SortOrder
  }

  export type Libro_AutorCreateNestedManyWithoutAutorInput = {
    create?: XOR<Libro_AutorCreateWithoutAutorInput, Libro_AutorUncheckedCreateWithoutAutorInput> | Libro_AutorCreateWithoutAutorInput[] | Libro_AutorUncheckedCreateWithoutAutorInput[]
    connectOrCreate?: Libro_AutorCreateOrConnectWithoutAutorInput | Libro_AutorCreateOrConnectWithoutAutorInput[]
    createMany?: Libro_AutorCreateManyAutorInputEnvelope
    connect?: Libro_AutorWhereUniqueInput | Libro_AutorWhereUniqueInput[]
  }

  export type Libro_AutorUncheckedCreateNestedManyWithoutAutorInput = {
    create?: XOR<Libro_AutorCreateWithoutAutorInput, Libro_AutorUncheckedCreateWithoutAutorInput> | Libro_AutorCreateWithoutAutorInput[] | Libro_AutorUncheckedCreateWithoutAutorInput[]
    connectOrCreate?: Libro_AutorCreateOrConnectWithoutAutorInput | Libro_AutorCreateOrConnectWithoutAutorInput[]
    createMany?: Libro_AutorCreateManyAutorInputEnvelope
    connect?: Libro_AutorWhereUniqueInput | Libro_AutorWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableEnumAutor_EstadoFieldUpdateOperationsInput = {
    set?: $Enums.Autor_Estado | null
  }

  export type Libro_AutorUpdateManyWithoutAutorNestedInput = {
    create?: XOR<Libro_AutorCreateWithoutAutorInput, Libro_AutorUncheckedCreateWithoutAutorInput> | Libro_AutorCreateWithoutAutorInput[] | Libro_AutorUncheckedCreateWithoutAutorInput[]
    connectOrCreate?: Libro_AutorCreateOrConnectWithoutAutorInput | Libro_AutorCreateOrConnectWithoutAutorInput[]
    upsert?: Libro_AutorUpsertWithWhereUniqueWithoutAutorInput | Libro_AutorUpsertWithWhereUniqueWithoutAutorInput[]
    createMany?: Libro_AutorCreateManyAutorInputEnvelope
    set?: Libro_AutorWhereUniqueInput | Libro_AutorWhereUniqueInput[]
    disconnect?: Libro_AutorWhereUniqueInput | Libro_AutorWhereUniqueInput[]
    delete?: Libro_AutorWhereUniqueInput | Libro_AutorWhereUniqueInput[]
    connect?: Libro_AutorWhereUniqueInput | Libro_AutorWhereUniqueInput[]
    update?: Libro_AutorUpdateWithWhereUniqueWithoutAutorInput | Libro_AutorUpdateWithWhereUniqueWithoutAutorInput[]
    updateMany?: Libro_AutorUpdateManyWithWhereWithoutAutorInput | Libro_AutorUpdateManyWithWhereWithoutAutorInput[]
    deleteMany?: Libro_AutorScalarWhereInput | Libro_AutorScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type Libro_AutorUncheckedUpdateManyWithoutAutorNestedInput = {
    create?: XOR<Libro_AutorCreateWithoutAutorInput, Libro_AutorUncheckedCreateWithoutAutorInput> | Libro_AutorCreateWithoutAutorInput[] | Libro_AutorUncheckedCreateWithoutAutorInput[]
    connectOrCreate?: Libro_AutorCreateOrConnectWithoutAutorInput | Libro_AutorCreateOrConnectWithoutAutorInput[]
    upsert?: Libro_AutorUpsertWithWhereUniqueWithoutAutorInput | Libro_AutorUpsertWithWhereUniqueWithoutAutorInput[]
    createMany?: Libro_AutorCreateManyAutorInputEnvelope
    set?: Libro_AutorWhereUniqueInput | Libro_AutorWhereUniqueInput[]
    disconnect?: Libro_AutorWhereUniqueInput | Libro_AutorWhereUniqueInput[]
    delete?: Libro_AutorWhereUniqueInput | Libro_AutorWhereUniqueInput[]
    connect?: Libro_AutorWhereUniqueInput | Libro_AutorWhereUniqueInput[]
    update?: Libro_AutorUpdateWithWhereUniqueWithoutAutorInput | Libro_AutorUpdateWithWhereUniqueWithoutAutorInput[]
    updateMany?: Libro_AutorUpdateManyWithWhereWithoutAutorInput | Libro_AutorUpdateManyWithWhereWithoutAutorInput[]
    deleteMany?: Libro_AutorScalarWhereInput | Libro_AutorScalarWhereInput[]
  }

  export type FacturaCreateNestedManyWithoutClienteInput = {
    create?: XOR<FacturaCreateWithoutClienteInput, FacturaUncheckedCreateWithoutClienteInput> | FacturaCreateWithoutClienteInput[] | FacturaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: FacturaCreateOrConnectWithoutClienteInput | FacturaCreateOrConnectWithoutClienteInput[]
    createMany?: FacturaCreateManyClienteInputEnvelope
    connect?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
  }

  export type FacturaUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<FacturaCreateWithoutClienteInput, FacturaUncheckedCreateWithoutClienteInput> | FacturaCreateWithoutClienteInput[] | FacturaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: FacturaCreateOrConnectWithoutClienteInput | FacturaCreateOrConnectWithoutClienteInput[]
    createMany?: FacturaCreateManyClienteInputEnvelope
    connect?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableEnumCliente_EstadoFieldUpdateOperationsInput = {
    set?: $Enums.Cliente_Estado | null
  }

  export type FacturaUpdateManyWithoutClienteNestedInput = {
    create?: XOR<FacturaCreateWithoutClienteInput, FacturaUncheckedCreateWithoutClienteInput> | FacturaCreateWithoutClienteInput[] | FacturaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: FacturaCreateOrConnectWithoutClienteInput | FacturaCreateOrConnectWithoutClienteInput[]
    upsert?: FacturaUpsertWithWhereUniqueWithoutClienteInput | FacturaUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: FacturaCreateManyClienteInputEnvelope
    set?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
    disconnect?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
    delete?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
    connect?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
    update?: FacturaUpdateWithWhereUniqueWithoutClienteInput | FacturaUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: FacturaUpdateManyWithWhereWithoutClienteInput | FacturaUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: FacturaScalarWhereInput | FacturaScalarWhereInput[]
  }

  export type FacturaUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<FacturaCreateWithoutClienteInput, FacturaUncheckedCreateWithoutClienteInput> | FacturaCreateWithoutClienteInput[] | FacturaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: FacturaCreateOrConnectWithoutClienteInput | FacturaCreateOrConnectWithoutClienteInput[]
    upsert?: FacturaUpsertWithWhereUniqueWithoutClienteInput | FacturaUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: FacturaCreateManyClienteInputEnvelope
    set?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
    disconnect?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
    delete?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
    connect?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
    update?: FacturaUpdateWithWhereUniqueWithoutClienteInput | FacturaUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: FacturaUpdateManyWithWhereWithoutClienteInput | FacturaUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: FacturaScalarWhereInput | FacturaScalarWhereInput[]
  }

  export type FacturaCreateNestedOneWithoutDetalleFacturaInput = {
    create?: XOR<FacturaCreateWithoutDetalleFacturaInput, FacturaUncheckedCreateWithoutDetalleFacturaInput>
    connectOrCreate?: FacturaCreateOrConnectWithoutDetalleFacturaInput
    connect?: FacturaWhereUniqueInput
  }

  export type LibroCreateNestedOneWithoutDetallesInput = {
    create?: XOR<LibroCreateWithoutDetallesInput, LibroUncheckedCreateWithoutDetallesInput>
    connectOrCreate?: LibroCreateOrConnectWithoutDetallesInput
    connect?: LibroWhereUniqueInput
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type FacturaUpdateOneWithoutDetalleFacturaNestedInput = {
    create?: XOR<FacturaCreateWithoutDetalleFacturaInput, FacturaUncheckedCreateWithoutDetalleFacturaInput>
    connectOrCreate?: FacturaCreateOrConnectWithoutDetalleFacturaInput
    upsert?: FacturaUpsertWithoutDetalleFacturaInput
    disconnect?: FacturaWhereInput | boolean
    delete?: FacturaWhereInput | boolean
    connect?: FacturaWhereUniqueInput
    update?: XOR<XOR<FacturaUpdateToOneWithWhereWithoutDetalleFacturaInput, FacturaUpdateWithoutDetalleFacturaInput>, FacturaUncheckedUpdateWithoutDetalleFacturaInput>
  }

  export type LibroUpdateOneWithoutDetallesNestedInput = {
    create?: XOR<LibroCreateWithoutDetallesInput, LibroUncheckedCreateWithoutDetallesInput>
    connectOrCreate?: LibroCreateOrConnectWithoutDetallesInput
    upsert?: LibroUpsertWithoutDetallesInput
    disconnect?: LibroWhereInput | boolean
    delete?: LibroWhereInput | boolean
    connect?: LibroWhereUniqueInput
    update?: XOR<XOR<LibroUpdateToOneWithWhereWithoutDetallesInput, LibroUpdateWithoutDetallesInput>, LibroUncheckedUpdateWithoutDetallesInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LibroCreateNestedManyWithoutEditorialInput = {
    create?: XOR<LibroCreateWithoutEditorialInput, LibroUncheckedCreateWithoutEditorialInput> | LibroCreateWithoutEditorialInput[] | LibroUncheckedCreateWithoutEditorialInput[]
    connectOrCreate?: LibroCreateOrConnectWithoutEditorialInput | LibroCreateOrConnectWithoutEditorialInput[]
    createMany?: LibroCreateManyEditorialInputEnvelope
    connect?: LibroWhereUniqueInput | LibroWhereUniqueInput[]
  }

  export type LibroUncheckedCreateNestedManyWithoutEditorialInput = {
    create?: XOR<LibroCreateWithoutEditorialInput, LibroUncheckedCreateWithoutEditorialInput> | LibroCreateWithoutEditorialInput[] | LibroUncheckedCreateWithoutEditorialInput[]
    connectOrCreate?: LibroCreateOrConnectWithoutEditorialInput | LibroCreateOrConnectWithoutEditorialInput[]
    createMany?: LibroCreateManyEditorialInputEnvelope
    connect?: LibroWhereUniqueInput | LibroWhereUniqueInput[]
  }

  export type LibroUpdateManyWithoutEditorialNestedInput = {
    create?: XOR<LibroCreateWithoutEditorialInput, LibroUncheckedCreateWithoutEditorialInput> | LibroCreateWithoutEditorialInput[] | LibroUncheckedCreateWithoutEditorialInput[]
    connectOrCreate?: LibroCreateOrConnectWithoutEditorialInput | LibroCreateOrConnectWithoutEditorialInput[]
    upsert?: LibroUpsertWithWhereUniqueWithoutEditorialInput | LibroUpsertWithWhereUniqueWithoutEditorialInput[]
    createMany?: LibroCreateManyEditorialInputEnvelope
    set?: LibroWhereUniqueInput | LibroWhereUniqueInput[]
    disconnect?: LibroWhereUniqueInput | LibroWhereUniqueInput[]
    delete?: LibroWhereUniqueInput | LibroWhereUniqueInput[]
    connect?: LibroWhereUniqueInput | LibroWhereUniqueInput[]
    update?: LibroUpdateWithWhereUniqueWithoutEditorialInput | LibroUpdateWithWhereUniqueWithoutEditorialInput[]
    updateMany?: LibroUpdateManyWithWhereWithoutEditorialInput | LibroUpdateManyWithWhereWithoutEditorialInput[]
    deleteMany?: LibroScalarWhereInput | LibroScalarWhereInput[]
  }

  export type LibroUncheckedUpdateManyWithoutEditorialNestedInput = {
    create?: XOR<LibroCreateWithoutEditorialInput, LibroUncheckedCreateWithoutEditorialInput> | LibroCreateWithoutEditorialInput[] | LibroUncheckedCreateWithoutEditorialInput[]
    connectOrCreate?: LibroCreateOrConnectWithoutEditorialInput | LibroCreateOrConnectWithoutEditorialInput[]
    upsert?: LibroUpsertWithWhereUniqueWithoutEditorialInput | LibroUpsertWithWhereUniqueWithoutEditorialInput[]
    createMany?: LibroCreateManyEditorialInputEnvelope
    set?: LibroWhereUniqueInput | LibroWhereUniqueInput[]
    disconnect?: LibroWhereUniqueInput | LibroWhereUniqueInput[]
    delete?: LibroWhereUniqueInput | LibroWhereUniqueInput[]
    connect?: LibroWhereUniqueInput | LibroWhereUniqueInput[]
    update?: LibroUpdateWithWhereUniqueWithoutEditorialInput | LibroUpdateWithWhereUniqueWithoutEditorialInput[]
    updateMany?: LibroUpdateManyWithWhereWithoutEditorialInput | LibroUpdateManyWithWhereWithoutEditorialInput[]
    deleteMany?: LibroScalarWhereInput | LibroScalarWhereInput[]
  }

  export type DetalleFacturaCreateNestedManyWithoutFacturaInput = {
    create?: XOR<DetalleFacturaCreateWithoutFacturaInput, DetalleFacturaUncheckedCreateWithoutFacturaInput> | DetalleFacturaCreateWithoutFacturaInput[] | DetalleFacturaUncheckedCreateWithoutFacturaInput[]
    connectOrCreate?: DetalleFacturaCreateOrConnectWithoutFacturaInput | DetalleFacturaCreateOrConnectWithoutFacturaInput[]
    createMany?: DetalleFacturaCreateManyFacturaInputEnvelope
    connect?: DetalleFacturaWhereUniqueInput | DetalleFacturaWhereUniqueInput[]
  }

  export type ClienteCreateNestedOneWithoutFacturasInput = {
    create?: XOR<ClienteCreateWithoutFacturasInput, ClienteUncheckedCreateWithoutFacturasInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutFacturasInput
    connect?: ClienteWhereUniqueInput
  }

  export type DetalleFacturaUncheckedCreateNestedManyWithoutFacturaInput = {
    create?: XOR<DetalleFacturaCreateWithoutFacturaInput, DetalleFacturaUncheckedCreateWithoutFacturaInput> | DetalleFacturaCreateWithoutFacturaInput[] | DetalleFacturaUncheckedCreateWithoutFacturaInput[]
    connectOrCreate?: DetalleFacturaCreateOrConnectWithoutFacturaInput | DetalleFacturaCreateOrConnectWithoutFacturaInput[]
    createMany?: DetalleFacturaCreateManyFacturaInputEnvelope
    connect?: DetalleFacturaWhereUniqueInput | DetalleFacturaWhereUniqueInput[]
  }

  export type DetalleFacturaUpdateManyWithoutFacturaNestedInput = {
    create?: XOR<DetalleFacturaCreateWithoutFacturaInput, DetalleFacturaUncheckedCreateWithoutFacturaInput> | DetalleFacturaCreateWithoutFacturaInput[] | DetalleFacturaUncheckedCreateWithoutFacturaInput[]
    connectOrCreate?: DetalleFacturaCreateOrConnectWithoutFacturaInput | DetalleFacturaCreateOrConnectWithoutFacturaInput[]
    upsert?: DetalleFacturaUpsertWithWhereUniqueWithoutFacturaInput | DetalleFacturaUpsertWithWhereUniqueWithoutFacturaInput[]
    createMany?: DetalleFacturaCreateManyFacturaInputEnvelope
    set?: DetalleFacturaWhereUniqueInput | DetalleFacturaWhereUniqueInput[]
    disconnect?: DetalleFacturaWhereUniqueInput | DetalleFacturaWhereUniqueInput[]
    delete?: DetalleFacturaWhereUniqueInput | DetalleFacturaWhereUniqueInput[]
    connect?: DetalleFacturaWhereUniqueInput | DetalleFacturaWhereUniqueInput[]
    update?: DetalleFacturaUpdateWithWhereUniqueWithoutFacturaInput | DetalleFacturaUpdateWithWhereUniqueWithoutFacturaInput[]
    updateMany?: DetalleFacturaUpdateManyWithWhereWithoutFacturaInput | DetalleFacturaUpdateManyWithWhereWithoutFacturaInput[]
    deleteMany?: DetalleFacturaScalarWhereInput | DetalleFacturaScalarWhereInput[]
  }

  export type ClienteUpdateOneWithoutFacturasNestedInput = {
    create?: XOR<ClienteCreateWithoutFacturasInput, ClienteUncheckedCreateWithoutFacturasInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutFacturasInput
    upsert?: ClienteUpsertWithoutFacturasInput
    disconnect?: ClienteWhereInput | boolean
    delete?: ClienteWhereInput | boolean
    connect?: ClienteWhereUniqueInput
    update?: XOR<XOR<ClienteUpdateToOneWithWhereWithoutFacturasInput, ClienteUpdateWithoutFacturasInput>, ClienteUncheckedUpdateWithoutFacturasInput>
  }

  export type DetalleFacturaUncheckedUpdateManyWithoutFacturaNestedInput = {
    create?: XOR<DetalleFacturaCreateWithoutFacturaInput, DetalleFacturaUncheckedCreateWithoutFacturaInput> | DetalleFacturaCreateWithoutFacturaInput[] | DetalleFacturaUncheckedCreateWithoutFacturaInput[]
    connectOrCreate?: DetalleFacturaCreateOrConnectWithoutFacturaInput | DetalleFacturaCreateOrConnectWithoutFacturaInput[]
    upsert?: DetalleFacturaUpsertWithWhereUniqueWithoutFacturaInput | DetalleFacturaUpsertWithWhereUniqueWithoutFacturaInput[]
    createMany?: DetalleFacturaCreateManyFacturaInputEnvelope
    set?: DetalleFacturaWhereUniqueInput | DetalleFacturaWhereUniqueInput[]
    disconnect?: DetalleFacturaWhereUniqueInput | DetalleFacturaWhereUniqueInput[]
    delete?: DetalleFacturaWhereUniqueInput | DetalleFacturaWhereUniqueInput[]
    connect?: DetalleFacturaWhereUniqueInput | DetalleFacturaWhereUniqueInput[]
    update?: DetalleFacturaUpdateWithWhereUniqueWithoutFacturaInput | DetalleFacturaUpdateWithWhereUniqueWithoutFacturaInput[]
    updateMany?: DetalleFacturaUpdateManyWithWhereWithoutFacturaInput | DetalleFacturaUpdateManyWithWhereWithoutFacturaInput[]
    deleteMany?: DetalleFacturaScalarWhereInput | DetalleFacturaScalarWhereInput[]
  }

  export type DetalleFacturaCreateNestedManyWithoutLibroInput = {
    create?: XOR<DetalleFacturaCreateWithoutLibroInput, DetalleFacturaUncheckedCreateWithoutLibroInput> | DetalleFacturaCreateWithoutLibroInput[] | DetalleFacturaUncheckedCreateWithoutLibroInput[]
    connectOrCreate?: DetalleFacturaCreateOrConnectWithoutLibroInput | DetalleFacturaCreateOrConnectWithoutLibroInput[]
    createMany?: DetalleFacturaCreateManyLibroInputEnvelope
    connect?: DetalleFacturaWhereUniqueInput | DetalleFacturaWhereUniqueInput[]
  }

  export type EditorialCreateNestedOneWithoutLibrosInput = {
    create?: XOR<EditorialCreateWithoutLibrosInput, EditorialUncheckedCreateWithoutLibrosInput>
    connectOrCreate?: EditorialCreateOrConnectWithoutLibrosInput
    connect?: EditorialWhereUniqueInput
  }

  export type Libro_AutorCreateNestedManyWithoutLibroInput = {
    create?: XOR<Libro_AutorCreateWithoutLibroInput, Libro_AutorUncheckedCreateWithoutLibroInput> | Libro_AutorCreateWithoutLibroInput[] | Libro_AutorUncheckedCreateWithoutLibroInput[]
    connectOrCreate?: Libro_AutorCreateOrConnectWithoutLibroInput | Libro_AutorCreateOrConnectWithoutLibroInput[]
    createMany?: Libro_AutorCreateManyLibroInputEnvelope
    connect?: Libro_AutorWhereUniqueInput | Libro_AutorWhereUniqueInput[]
  }

  export type CategoriaCreateNestedOneWithoutLibrosInput = {
    create?: XOR<CategoriaCreateWithoutLibrosInput, CategoriaUncheckedCreateWithoutLibrosInput>
    connectOrCreate?: CategoriaCreateOrConnectWithoutLibrosInput
    connect?: CategoriaWhereUniqueInput
  }

  export type DetalleFacturaUncheckedCreateNestedManyWithoutLibroInput = {
    create?: XOR<DetalleFacturaCreateWithoutLibroInput, DetalleFacturaUncheckedCreateWithoutLibroInput> | DetalleFacturaCreateWithoutLibroInput[] | DetalleFacturaUncheckedCreateWithoutLibroInput[]
    connectOrCreate?: DetalleFacturaCreateOrConnectWithoutLibroInput | DetalleFacturaCreateOrConnectWithoutLibroInput[]
    createMany?: DetalleFacturaCreateManyLibroInputEnvelope
    connect?: DetalleFacturaWhereUniqueInput | DetalleFacturaWhereUniqueInput[]
  }

  export type Libro_AutorUncheckedCreateNestedManyWithoutLibroInput = {
    create?: XOR<Libro_AutorCreateWithoutLibroInput, Libro_AutorUncheckedCreateWithoutLibroInput> | Libro_AutorCreateWithoutLibroInput[] | Libro_AutorUncheckedCreateWithoutLibroInput[]
    connectOrCreate?: Libro_AutorCreateOrConnectWithoutLibroInput | Libro_AutorCreateOrConnectWithoutLibroInput[]
    createMany?: Libro_AutorCreateManyLibroInputEnvelope
    connect?: Libro_AutorWhereUniqueInput | Libro_AutorWhereUniqueInput[]
  }

  export type NullableEnumLibro_EstadoFieldUpdateOperationsInput = {
    set?: $Enums.Libro_Estado | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DetalleFacturaUpdateManyWithoutLibroNestedInput = {
    create?: XOR<DetalleFacturaCreateWithoutLibroInput, DetalleFacturaUncheckedCreateWithoutLibroInput> | DetalleFacturaCreateWithoutLibroInput[] | DetalleFacturaUncheckedCreateWithoutLibroInput[]
    connectOrCreate?: DetalleFacturaCreateOrConnectWithoutLibroInput | DetalleFacturaCreateOrConnectWithoutLibroInput[]
    upsert?: DetalleFacturaUpsertWithWhereUniqueWithoutLibroInput | DetalleFacturaUpsertWithWhereUniqueWithoutLibroInput[]
    createMany?: DetalleFacturaCreateManyLibroInputEnvelope
    set?: DetalleFacturaWhereUniqueInput | DetalleFacturaWhereUniqueInput[]
    disconnect?: DetalleFacturaWhereUniqueInput | DetalleFacturaWhereUniqueInput[]
    delete?: DetalleFacturaWhereUniqueInput | DetalleFacturaWhereUniqueInput[]
    connect?: DetalleFacturaWhereUniqueInput | DetalleFacturaWhereUniqueInput[]
    update?: DetalleFacturaUpdateWithWhereUniqueWithoutLibroInput | DetalleFacturaUpdateWithWhereUniqueWithoutLibroInput[]
    updateMany?: DetalleFacturaUpdateManyWithWhereWithoutLibroInput | DetalleFacturaUpdateManyWithWhereWithoutLibroInput[]
    deleteMany?: DetalleFacturaScalarWhereInput | DetalleFacturaScalarWhereInput[]
  }

  export type EditorialUpdateOneWithoutLibrosNestedInput = {
    create?: XOR<EditorialCreateWithoutLibrosInput, EditorialUncheckedCreateWithoutLibrosInput>
    connectOrCreate?: EditorialCreateOrConnectWithoutLibrosInput
    upsert?: EditorialUpsertWithoutLibrosInput
    disconnect?: EditorialWhereInput | boolean
    delete?: EditorialWhereInput | boolean
    connect?: EditorialWhereUniqueInput
    update?: XOR<XOR<EditorialUpdateToOneWithWhereWithoutLibrosInput, EditorialUpdateWithoutLibrosInput>, EditorialUncheckedUpdateWithoutLibrosInput>
  }

  export type Libro_AutorUpdateManyWithoutLibroNestedInput = {
    create?: XOR<Libro_AutorCreateWithoutLibroInput, Libro_AutorUncheckedCreateWithoutLibroInput> | Libro_AutorCreateWithoutLibroInput[] | Libro_AutorUncheckedCreateWithoutLibroInput[]
    connectOrCreate?: Libro_AutorCreateOrConnectWithoutLibroInput | Libro_AutorCreateOrConnectWithoutLibroInput[]
    upsert?: Libro_AutorUpsertWithWhereUniqueWithoutLibroInput | Libro_AutorUpsertWithWhereUniqueWithoutLibroInput[]
    createMany?: Libro_AutorCreateManyLibroInputEnvelope
    set?: Libro_AutorWhereUniqueInput | Libro_AutorWhereUniqueInput[]
    disconnect?: Libro_AutorWhereUniqueInput | Libro_AutorWhereUniqueInput[]
    delete?: Libro_AutorWhereUniqueInput | Libro_AutorWhereUniqueInput[]
    connect?: Libro_AutorWhereUniqueInput | Libro_AutorWhereUniqueInput[]
    update?: Libro_AutorUpdateWithWhereUniqueWithoutLibroInput | Libro_AutorUpdateWithWhereUniqueWithoutLibroInput[]
    updateMany?: Libro_AutorUpdateManyWithWhereWithoutLibroInput | Libro_AutorUpdateManyWithWhereWithoutLibroInput[]
    deleteMany?: Libro_AutorScalarWhereInput | Libro_AutorScalarWhereInput[]
  }

  export type CategoriaUpdateOneWithoutLibrosNestedInput = {
    create?: XOR<CategoriaCreateWithoutLibrosInput, CategoriaUncheckedCreateWithoutLibrosInput>
    connectOrCreate?: CategoriaCreateOrConnectWithoutLibrosInput
    upsert?: CategoriaUpsertWithoutLibrosInput
    disconnect?: CategoriaWhereInput | boolean
    delete?: CategoriaWhereInput | boolean
    connect?: CategoriaWhereUniqueInput
    update?: XOR<XOR<CategoriaUpdateToOneWithWhereWithoutLibrosInput, CategoriaUpdateWithoutLibrosInput>, CategoriaUncheckedUpdateWithoutLibrosInput>
  }

  export type DetalleFacturaUncheckedUpdateManyWithoutLibroNestedInput = {
    create?: XOR<DetalleFacturaCreateWithoutLibroInput, DetalleFacturaUncheckedCreateWithoutLibroInput> | DetalleFacturaCreateWithoutLibroInput[] | DetalleFacturaUncheckedCreateWithoutLibroInput[]
    connectOrCreate?: DetalleFacturaCreateOrConnectWithoutLibroInput | DetalleFacturaCreateOrConnectWithoutLibroInput[]
    upsert?: DetalleFacturaUpsertWithWhereUniqueWithoutLibroInput | DetalleFacturaUpsertWithWhereUniqueWithoutLibroInput[]
    createMany?: DetalleFacturaCreateManyLibroInputEnvelope
    set?: DetalleFacturaWhereUniqueInput | DetalleFacturaWhereUniqueInput[]
    disconnect?: DetalleFacturaWhereUniqueInput | DetalleFacturaWhereUniqueInput[]
    delete?: DetalleFacturaWhereUniqueInput | DetalleFacturaWhereUniqueInput[]
    connect?: DetalleFacturaWhereUniqueInput | DetalleFacturaWhereUniqueInput[]
    update?: DetalleFacturaUpdateWithWhereUniqueWithoutLibroInput | DetalleFacturaUpdateWithWhereUniqueWithoutLibroInput[]
    updateMany?: DetalleFacturaUpdateManyWithWhereWithoutLibroInput | DetalleFacturaUpdateManyWithWhereWithoutLibroInput[]
    deleteMany?: DetalleFacturaScalarWhereInput | DetalleFacturaScalarWhereInput[]
  }

  export type Libro_AutorUncheckedUpdateManyWithoutLibroNestedInput = {
    create?: XOR<Libro_AutorCreateWithoutLibroInput, Libro_AutorUncheckedCreateWithoutLibroInput> | Libro_AutorCreateWithoutLibroInput[] | Libro_AutorUncheckedCreateWithoutLibroInput[]
    connectOrCreate?: Libro_AutorCreateOrConnectWithoutLibroInput | Libro_AutorCreateOrConnectWithoutLibroInput[]
    upsert?: Libro_AutorUpsertWithWhereUniqueWithoutLibroInput | Libro_AutorUpsertWithWhereUniqueWithoutLibroInput[]
    createMany?: Libro_AutorCreateManyLibroInputEnvelope
    set?: Libro_AutorWhereUniqueInput | Libro_AutorWhereUniqueInput[]
    disconnect?: Libro_AutorWhereUniqueInput | Libro_AutorWhereUniqueInput[]
    delete?: Libro_AutorWhereUniqueInput | Libro_AutorWhereUniqueInput[]
    connect?: Libro_AutorWhereUniqueInput | Libro_AutorWhereUniqueInput[]
    update?: Libro_AutorUpdateWithWhereUniqueWithoutLibroInput | Libro_AutorUpdateWithWhereUniqueWithoutLibroInput[]
    updateMany?: Libro_AutorUpdateManyWithWhereWithoutLibroInput | Libro_AutorUpdateManyWithWhereWithoutLibroInput[]
    deleteMany?: Libro_AutorScalarWhereInput | Libro_AutorScalarWhereInput[]
  }

  export type LibroCreateNestedManyWithoutCategoriaInput = {
    create?: XOR<LibroCreateWithoutCategoriaInput, LibroUncheckedCreateWithoutCategoriaInput> | LibroCreateWithoutCategoriaInput[] | LibroUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: LibroCreateOrConnectWithoutCategoriaInput | LibroCreateOrConnectWithoutCategoriaInput[]
    createMany?: LibroCreateManyCategoriaInputEnvelope
    connect?: LibroWhereUniqueInput | LibroWhereUniqueInput[]
  }

  export type LibroUncheckedCreateNestedManyWithoutCategoriaInput = {
    create?: XOR<LibroCreateWithoutCategoriaInput, LibroUncheckedCreateWithoutCategoriaInput> | LibroCreateWithoutCategoriaInput[] | LibroUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: LibroCreateOrConnectWithoutCategoriaInput | LibroCreateOrConnectWithoutCategoriaInput[]
    createMany?: LibroCreateManyCategoriaInputEnvelope
    connect?: LibroWhereUniqueInput | LibroWhereUniqueInput[]
  }

  export type LibroUpdateManyWithoutCategoriaNestedInput = {
    create?: XOR<LibroCreateWithoutCategoriaInput, LibroUncheckedCreateWithoutCategoriaInput> | LibroCreateWithoutCategoriaInput[] | LibroUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: LibroCreateOrConnectWithoutCategoriaInput | LibroCreateOrConnectWithoutCategoriaInput[]
    upsert?: LibroUpsertWithWhereUniqueWithoutCategoriaInput | LibroUpsertWithWhereUniqueWithoutCategoriaInput[]
    createMany?: LibroCreateManyCategoriaInputEnvelope
    set?: LibroWhereUniqueInput | LibroWhereUniqueInput[]
    disconnect?: LibroWhereUniqueInput | LibroWhereUniqueInput[]
    delete?: LibroWhereUniqueInput | LibroWhereUniqueInput[]
    connect?: LibroWhereUniqueInput | LibroWhereUniqueInput[]
    update?: LibroUpdateWithWhereUniqueWithoutCategoriaInput | LibroUpdateWithWhereUniqueWithoutCategoriaInput[]
    updateMany?: LibroUpdateManyWithWhereWithoutCategoriaInput | LibroUpdateManyWithWhereWithoutCategoriaInput[]
    deleteMany?: LibroScalarWhereInput | LibroScalarWhereInput[]
  }

  export type LibroUncheckedUpdateManyWithoutCategoriaNestedInput = {
    create?: XOR<LibroCreateWithoutCategoriaInput, LibroUncheckedCreateWithoutCategoriaInput> | LibroCreateWithoutCategoriaInput[] | LibroUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: LibroCreateOrConnectWithoutCategoriaInput | LibroCreateOrConnectWithoutCategoriaInput[]
    upsert?: LibroUpsertWithWhereUniqueWithoutCategoriaInput | LibroUpsertWithWhereUniqueWithoutCategoriaInput[]
    createMany?: LibroCreateManyCategoriaInputEnvelope
    set?: LibroWhereUniqueInput | LibroWhereUniqueInput[]
    disconnect?: LibroWhereUniqueInput | LibroWhereUniqueInput[]
    delete?: LibroWhereUniqueInput | LibroWhereUniqueInput[]
    connect?: LibroWhereUniqueInput | LibroWhereUniqueInput[]
    update?: LibroUpdateWithWhereUniqueWithoutCategoriaInput | LibroUpdateWithWhereUniqueWithoutCategoriaInput[]
    updateMany?: LibroUpdateManyWithWhereWithoutCategoriaInput | LibroUpdateManyWithWhereWithoutCategoriaInput[]
    deleteMany?: LibroScalarWhereInput | LibroScalarWhereInput[]
  }

  export type LibroCreateNestedOneWithoutLibro_AutorInput = {
    create?: XOR<LibroCreateWithoutLibro_AutorInput, LibroUncheckedCreateWithoutLibro_AutorInput>
    connectOrCreate?: LibroCreateOrConnectWithoutLibro_AutorInput
    connect?: LibroWhereUniqueInput
  }

  export type AutorCreateNestedOneWithoutLibro_AutorInput = {
    create?: XOR<AutorCreateWithoutLibro_AutorInput, AutorUncheckedCreateWithoutLibro_AutorInput>
    connectOrCreate?: AutorCreateOrConnectWithoutLibro_AutorInput
    connect?: AutorWhereUniqueInput
  }

  export type LibroUpdateOneRequiredWithoutLibro_AutorNestedInput = {
    create?: XOR<LibroCreateWithoutLibro_AutorInput, LibroUncheckedCreateWithoutLibro_AutorInput>
    connectOrCreate?: LibroCreateOrConnectWithoutLibro_AutorInput
    upsert?: LibroUpsertWithoutLibro_AutorInput
    connect?: LibroWhereUniqueInput
    update?: XOR<XOR<LibroUpdateToOneWithWhereWithoutLibro_AutorInput, LibroUpdateWithoutLibro_AutorInput>, LibroUncheckedUpdateWithoutLibro_AutorInput>
  }

  export type AutorUpdateOneRequiredWithoutLibro_AutorNestedInput = {
    create?: XOR<AutorCreateWithoutLibro_AutorInput, AutorUncheckedCreateWithoutLibro_AutorInput>
    connectOrCreate?: AutorCreateOrConnectWithoutLibro_AutorInput
    upsert?: AutorUpsertWithoutLibro_AutorInput
    connect?: AutorWhereUniqueInput
    update?: XOR<XOR<AutorUpdateToOneWithWhereWithoutLibro_AutorInput, AutorUpdateWithoutLibro_AutorInput>, AutorUncheckedUpdateWithoutLibro_AutorInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumAutor_EstadoNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Autor_Estado | EnumAutor_EstadoFieldRefInput<$PrismaModel> | null
    in?: $Enums.Autor_Estado[] | null
    notIn?: $Enums.Autor_Estado[] | null
    not?: NestedEnumAutor_EstadoNullableFilter<$PrismaModel> | $Enums.Autor_Estado | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumAutor_EstadoNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Autor_Estado | EnumAutor_EstadoFieldRefInput<$PrismaModel> | null
    in?: $Enums.Autor_Estado[] | null
    notIn?: $Enums.Autor_Estado[] | null
    not?: NestedEnumAutor_EstadoNullableWithAggregatesFilter<$PrismaModel> | $Enums.Autor_Estado | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumAutor_EstadoNullableFilter<$PrismaModel>
    _max?: NestedEnumAutor_EstadoNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumCliente_EstadoNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Cliente_Estado | EnumCliente_EstadoFieldRefInput<$PrismaModel> | null
    in?: $Enums.Cliente_Estado[] | null
    notIn?: $Enums.Cliente_Estado[] | null
    not?: NestedEnumCliente_EstadoNullableFilter<$PrismaModel> | $Enums.Cliente_Estado | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumCliente_EstadoNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Cliente_Estado | EnumCliente_EstadoFieldRefInput<$PrismaModel> | null
    in?: $Enums.Cliente_Estado[] | null
    notIn?: $Enums.Cliente_Estado[] | null
    not?: NestedEnumCliente_EstadoNullableWithAggregatesFilter<$PrismaModel> | $Enums.Cliente_Estado | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumCliente_EstadoNullableFilter<$PrismaModel>
    _max?: NestedEnumCliente_EstadoNullableFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumLibro_EstadoNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Libro_Estado | EnumLibro_EstadoFieldRefInput<$PrismaModel> | null
    in?: $Enums.Libro_Estado[] | null
    notIn?: $Enums.Libro_Estado[] | null
    not?: NestedEnumLibro_EstadoNullableFilter<$PrismaModel> | $Enums.Libro_Estado | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumLibro_EstadoNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Libro_Estado | EnumLibro_EstadoFieldRefInput<$PrismaModel> | null
    in?: $Enums.Libro_Estado[] | null
    notIn?: $Enums.Libro_Estado[] | null
    not?: NestedEnumLibro_EstadoNullableWithAggregatesFilter<$PrismaModel> | $Enums.Libro_Estado | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumLibro_EstadoNullableFilter<$PrismaModel>
    _max?: NestedEnumLibro_EstadoNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type Libro_AutorCreateWithoutAutorInput = {
    Libro: LibroCreateNestedOneWithoutLibro_AutorInput
  }

  export type Libro_AutorUncheckedCreateWithoutAutorInput = {
    id_Libro: number
  }

  export type Libro_AutorCreateOrConnectWithoutAutorInput = {
    where: Libro_AutorWhereUniqueInput
    create: XOR<Libro_AutorCreateWithoutAutorInput, Libro_AutorUncheckedCreateWithoutAutorInput>
  }

  export type Libro_AutorCreateManyAutorInputEnvelope = {
    data: Libro_AutorCreateManyAutorInput | Libro_AutorCreateManyAutorInput[]
    skipDuplicates?: boolean
  }

  export type Libro_AutorUpsertWithWhereUniqueWithoutAutorInput = {
    where: Libro_AutorWhereUniqueInput
    update: XOR<Libro_AutorUpdateWithoutAutorInput, Libro_AutorUncheckedUpdateWithoutAutorInput>
    create: XOR<Libro_AutorCreateWithoutAutorInput, Libro_AutorUncheckedCreateWithoutAutorInput>
  }

  export type Libro_AutorUpdateWithWhereUniqueWithoutAutorInput = {
    where: Libro_AutorWhereUniqueInput
    data: XOR<Libro_AutorUpdateWithoutAutorInput, Libro_AutorUncheckedUpdateWithoutAutorInput>
  }

  export type Libro_AutorUpdateManyWithWhereWithoutAutorInput = {
    where: Libro_AutorScalarWhereInput
    data: XOR<Libro_AutorUpdateManyMutationInput, Libro_AutorUncheckedUpdateManyWithoutAutorInput>
  }

  export type Libro_AutorScalarWhereInput = {
    AND?: Libro_AutorScalarWhereInput | Libro_AutorScalarWhereInput[]
    OR?: Libro_AutorScalarWhereInput[]
    NOT?: Libro_AutorScalarWhereInput | Libro_AutorScalarWhereInput[]
    id_Libro?: IntFilter<"Libro_Autor"> | number
    id_Autor?: IntFilter<"Libro_Autor"> | number
  }

  export type FacturaCreateWithoutClienteInput = {
    fecha_compra?: Date | string | null
    total: Decimal | DecimalJsLike | number | string
    DetalleFactura?: DetalleFacturaCreateNestedManyWithoutFacturaInput
  }

  export type FacturaUncheckedCreateWithoutClienteInput = {
    id_Compra?: number
    fecha_compra?: Date | string | null
    total: Decimal | DecimalJsLike | number | string
    DetalleFactura?: DetalleFacturaUncheckedCreateNestedManyWithoutFacturaInput
  }

  export type FacturaCreateOrConnectWithoutClienteInput = {
    where: FacturaWhereUniqueInput
    create: XOR<FacturaCreateWithoutClienteInput, FacturaUncheckedCreateWithoutClienteInput>
  }

  export type FacturaCreateManyClienteInputEnvelope = {
    data: FacturaCreateManyClienteInput | FacturaCreateManyClienteInput[]
    skipDuplicates?: boolean
  }

  export type FacturaUpsertWithWhereUniqueWithoutClienteInput = {
    where: FacturaWhereUniqueInput
    update: XOR<FacturaUpdateWithoutClienteInput, FacturaUncheckedUpdateWithoutClienteInput>
    create: XOR<FacturaCreateWithoutClienteInput, FacturaUncheckedCreateWithoutClienteInput>
  }

  export type FacturaUpdateWithWhereUniqueWithoutClienteInput = {
    where: FacturaWhereUniqueInput
    data: XOR<FacturaUpdateWithoutClienteInput, FacturaUncheckedUpdateWithoutClienteInput>
  }

  export type FacturaUpdateManyWithWhereWithoutClienteInput = {
    where: FacturaScalarWhereInput
    data: XOR<FacturaUpdateManyMutationInput, FacturaUncheckedUpdateManyWithoutClienteInput>
  }

  export type FacturaScalarWhereInput = {
    AND?: FacturaScalarWhereInput | FacturaScalarWhereInput[]
    OR?: FacturaScalarWhereInput[]
    NOT?: FacturaScalarWhereInput | FacturaScalarWhereInput[]
    id_Compra?: IntFilter<"Factura"> | number
    fecha_compra?: DateTimeNullableFilter<"Factura"> | Date | string | null
    total?: DecimalFilter<"Factura"> | Decimal | DecimalJsLike | number | string
    id_Cliente?: IntNullableFilter<"Factura"> | number | null
  }

  export type FacturaCreateWithoutDetalleFacturaInput = {
    fecha_compra?: Date | string | null
    total: Decimal | DecimalJsLike | number | string
    cliente?: ClienteCreateNestedOneWithoutFacturasInput
  }

  export type FacturaUncheckedCreateWithoutDetalleFacturaInput = {
    id_Compra?: number
    fecha_compra?: Date | string | null
    total: Decimal | DecimalJsLike | number | string
    id_Cliente?: number | null
  }

  export type FacturaCreateOrConnectWithoutDetalleFacturaInput = {
    where: FacturaWhereUniqueInput
    create: XOR<FacturaCreateWithoutDetalleFacturaInput, FacturaUncheckedCreateWithoutDetalleFacturaInput>
  }

  export type LibroCreateWithoutDetallesInput = {
    Titulo: string
    Fechap?: Date | string | null
    preciov: Decimal | DecimalJsLike | number | string
    cantidad?: number | null
    Estado?: $Enums.Libro_Estado | null
    ISBN: string
    BestSellers?: boolean
    editorial?: EditorialCreateNestedOneWithoutLibrosInput
    Libro_Autor?: Libro_AutorCreateNestedManyWithoutLibroInput
    categoria?: CategoriaCreateNestedOneWithoutLibrosInput
  }

  export type LibroUncheckedCreateWithoutDetallesInput = {
    id_Libro?: number
    Titulo: string
    Fechap?: Date | string | null
    preciov: Decimal | DecimalJsLike | number | string
    cantidad?: number | null
    id_Editorial?: number | null
    Estado?: $Enums.Libro_Estado | null
    ISBN: string
    BestSellers?: boolean
    id_Categoria?: number | null
    Libro_Autor?: Libro_AutorUncheckedCreateNestedManyWithoutLibroInput
  }

  export type LibroCreateOrConnectWithoutDetallesInput = {
    where: LibroWhereUniqueInput
    create: XOR<LibroCreateWithoutDetallesInput, LibroUncheckedCreateWithoutDetallesInput>
  }

  export type FacturaUpsertWithoutDetalleFacturaInput = {
    update: XOR<FacturaUpdateWithoutDetalleFacturaInput, FacturaUncheckedUpdateWithoutDetalleFacturaInput>
    create: XOR<FacturaCreateWithoutDetalleFacturaInput, FacturaUncheckedCreateWithoutDetalleFacturaInput>
    where?: FacturaWhereInput
  }

  export type FacturaUpdateToOneWithWhereWithoutDetalleFacturaInput = {
    where?: FacturaWhereInput
    data: XOR<FacturaUpdateWithoutDetalleFacturaInput, FacturaUncheckedUpdateWithoutDetalleFacturaInput>
  }

  export type FacturaUpdateWithoutDetalleFacturaInput = {
    fecha_compra?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cliente?: ClienteUpdateOneWithoutFacturasNestedInput
  }

  export type FacturaUncheckedUpdateWithoutDetalleFacturaInput = {
    id_Compra?: IntFieldUpdateOperationsInput | number
    fecha_compra?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    id_Cliente?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LibroUpsertWithoutDetallesInput = {
    update: XOR<LibroUpdateWithoutDetallesInput, LibroUncheckedUpdateWithoutDetallesInput>
    create: XOR<LibroCreateWithoutDetallesInput, LibroUncheckedCreateWithoutDetallesInput>
    where?: LibroWhereInput
  }

  export type LibroUpdateToOneWithWhereWithoutDetallesInput = {
    where?: LibroWhereInput
    data: XOR<LibroUpdateWithoutDetallesInput, LibroUncheckedUpdateWithoutDetallesInput>
  }

  export type LibroUpdateWithoutDetallesInput = {
    Titulo?: StringFieldUpdateOperationsInput | string
    Fechap?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preciov?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cantidad?: NullableIntFieldUpdateOperationsInput | number | null
    Estado?: NullableEnumLibro_EstadoFieldUpdateOperationsInput | $Enums.Libro_Estado | null
    ISBN?: StringFieldUpdateOperationsInput | string
    BestSellers?: BoolFieldUpdateOperationsInput | boolean
    editorial?: EditorialUpdateOneWithoutLibrosNestedInput
    Libro_Autor?: Libro_AutorUpdateManyWithoutLibroNestedInput
    categoria?: CategoriaUpdateOneWithoutLibrosNestedInput
  }

  export type LibroUncheckedUpdateWithoutDetallesInput = {
    id_Libro?: IntFieldUpdateOperationsInput | number
    Titulo?: StringFieldUpdateOperationsInput | string
    Fechap?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preciov?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cantidad?: NullableIntFieldUpdateOperationsInput | number | null
    id_Editorial?: NullableIntFieldUpdateOperationsInput | number | null
    Estado?: NullableEnumLibro_EstadoFieldUpdateOperationsInput | $Enums.Libro_Estado | null
    ISBN?: StringFieldUpdateOperationsInput | string
    BestSellers?: BoolFieldUpdateOperationsInput | boolean
    id_Categoria?: NullableIntFieldUpdateOperationsInput | number | null
    Libro_Autor?: Libro_AutorUncheckedUpdateManyWithoutLibroNestedInput
  }

  export type LibroCreateWithoutEditorialInput = {
    Titulo: string
    Fechap?: Date | string | null
    preciov: Decimal | DecimalJsLike | number | string
    cantidad?: number | null
    Estado?: $Enums.Libro_Estado | null
    ISBN: string
    BestSellers?: boolean
    detalles?: DetalleFacturaCreateNestedManyWithoutLibroInput
    Libro_Autor?: Libro_AutorCreateNestedManyWithoutLibroInput
    categoria?: CategoriaCreateNestedOneWithoutLibrosInput
  }

  export type LibroUncheckedCreateWithoutEditorialInput = {
    id_Libro?: number
    Titulo: string
    Fechap?: Date | string | null
    preciov: Decimal | DecimalJsLike | number | string
    cantidad?: number | null
    Estado?: $Enums.Libro_Estado | null
    ISBN: string
    BestSellers?: boolean
    id_Categoria?: number | null
    detalles?: DetalleFacturaUncheckedCreateNestedManyWithoutLibroInput
    Libro_Autor?: Libro_AutorUncheckedCreateNestedManyWithoutLibroInput
  }

  export type LibroCreateOrConnectWithoutEditorialInput = {
    where: LibroWhereUniqueInput
    create: XOR<LibroCreateWithoutEditorialInput, LibroUncheckedCreateWithoutEditorialInput>
  }

  export type LibroCreateManyEditorialInputEnvelope = {
    data: LibroCreateManyEditorialInput | LibroCreateManyEditorialInput[]
    skipDuplicates?: boolean
  }

  export type LibroUpsertWithWhereUniqueWithoutEditorialInput = {
    where: LibroWhereUniqueInput
    update: XOR<LibroUpdateWithoutEditorialInput, LibroUncheckedUpdateWithoutEditorialInput>
    create: XOR<LibroCreateWithoutEditorialInput, LibroUncheckedCreateWithoutEditorialInput>
  }

  export type LibroUpdateWithWhereUniqueWithoutEditorialInput = {
    where: LibroWhereUniqueInput
    data: XOR<LibroUpdateWithoutEditorialInput, LibroUncheckedUpdateWithoutEditorialInput>
  }

  export type LibroUpdateManyWithWhereWithoutEditorialInput = {
    where: LibroScalarWhereInput
    data: XOR<LibroUpdateManyMutationInput, LibroUncheckedUpdateManyWithoutEditorialInput>
  }

  export type LibroScalarWhereInput = {
    AND?: LibroScalarWhereInput | LibroScalarWhereInput[]
    OR?: LibroScalarWhereInput[]
    NOT?: LibroScalarWhereInput | LibroScalarWhereInput[]
    id_Libro?: IntFilter<"Libro"> | number
    Titulo?: StringFilter<"Libro"> | string
    Fechap?: DateTimeNullableFilter<"Libro"> | Date | string | null
    preciov?: DecimalFilter<"Libro"> | Decimal | DecimalJsLike | number | string
    cantidad?: IntNullableFilter<"Libro"> | number | null
    id_Editorial?: IntNullableFilter<"Libro"> | number | null
    Estado?: EnumLibro_EstadoNullableFilter<"Libro"> | $Enums.Libro_Estado | null
    ISBN?: StringFilter<"Libro"> | string
    BestSellers?: BoolFilter<"Libro"> | boolean
    id_Categoria?: IntNullableFilter<"Libro"> | number | null
  }

  export type DetalleFacturaCreateWithoutFacturaInput = {
    cantidad: number
    precio_uni: Decimal | DecimalJsLike | number | string
    libro?: LibroCreateNestedOneWithoutDetallesInput
  }

  export type DetalleFacturaUncheckedCreateWithoutFacturaInput = {
    id_Detalle?: number
    cantidad: number
    precio_uni: Decimal | DecimalJsLike | number | string
    id_Libro?: number | null
  }

  export type DetalleFacturaCreateOrConnectWithoutFacturaInput = {
    where: DetalleFacturaWhereUniqueInput
    create: XOR<DetalleFacturaCreateWithoutFacturaInput, DetalleFacturaUncheckedCreateWithoutFacturaInput>
  }

  export type DetalleFacturaCreateManyFacturaInputEnvelope = {
    data: DetalleFacturaCreateManyFacturaInput | DetalleFacturaCreateManyFacturaInput[]
    skipDuplicates?: boolean
  }

  export type ClienteCreateWithoutFacturasInput = {
    Cedula: string
    Nombre: string
    Apellido: string
    FechaN?: Date | string | null
    Direccion?: string | null
    Telefono?: string | null
    Estado?: $Enums.Cliente_Estado | null
  }

  export type ClienteUncheckedCreateWithoutFacturasInput = {
    id_Cliente?: number
    Cedula: string
    Nombre: string
    Apellido: string
    FechaN?: Date | string | null
    Direccion?: string | null
    Telefono?: string | null
    Estado?: $Enums.Cliente_Estado | null
  }

  export type ClienteCreateOrConnectWithoutFacturasInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutFacturasInput, ClienteUncheckedCreateWithoutFacturasInput>
  }

  export type DetalleFacturaUpsertWithWhereUniqueWithoutFacturaInput = {
    where: DetalleFacturaWhereUniqueInput
    update: XOR<DetalleFacturaUpdateWithoutFacturaInput, DetalleFacturaUncheckedUpdateWithoutFacturaInput>
    create: XOR<DetalleFacturaCreateWithoutFacturaInput, DetalleFacturaUncheckedCreateWithoutFacturaInput>
  }

  export type DetalleFacturaUpdateWithWhereUniqueWithoutFacturaInput = {
    where: DetalleFacturaWhereUniqueInput
    data: XOR<DetalleFacturaUpdateWithoutFacturaInput, DetalleFacturaUncheckedUpdateWithoutFacturaInput>
  }

  export type DetalleFacturaUpdateManyWithWhereWithoutFacturaInput = {
    where: DetalleFacturaScalarWhereInput
    data: XOR<DetalleFacturaUpdateManyMutationInput, DetalleFacturaUncheckedUpdateManyWithoutFacturaInput>
  }

  export type DetalleFacturaScalarWhereInput = {
    AND?: DetalleFacturaScalarWhereInput | DetalleFacturaScalarWhereInput[]
    OR?: DetalleFacturaScalarWhereInput[]
    NOT?: DetalleFacturaScalarWhereInput | DetalleFacturaScalarWhereInput[]
    id_Detalle?: IntFilter<"DetalleFactura"> | number
    cantidad?: IntFilter<"DetalleFactura"> | number
    precio_uni?: DecimalFilter<"DetalleFactura"> | Decimal | DecimalJsLike | number | string
    id_Compra?: IntNullableFilter<"DetalleFactura"> | number | null
    id_Libro?: IntNullableFilter<"DetalleFactura"> | number | null
  }

  export type ClienteUpsertWithoutFacturasInput = {
    update: XOR<ClienteUpdateWithoutFacturasInput, ClienteUncheckedUpdateWithoutFacturasInput>
    create: XOR<ClienteCreateWithoutFacturasInput, ClienteUncheckedCreateWithoutFacturasInput>
    where?: ClienteWhereInput
  }

  export type ClienteUpdateToOneWithWhereWithoutFacturasInput = {
    where?: ClienteWhereInput
    data: XOR<ClienteUpdateWithoutFacturasInput, ClienteUncheckedUpdateWithoutFacturasInput>
  }

  export type ClienteUpdateWithoutFacturasInput = {
    Cedula?: StringFieldUpdateOperationsInput | string
    Nombre?: StringFieldUpdateOperationsInput | string
    Apellido?: StringFieldUpdateOperationsInput | string
    FechaN?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Direccion?: NullableStringFieldUpdateOperationsInput | string | null
    Telefono?: NullableStringFieldUpdateOperationsInput | string | null
    Estado?: NullableEnumCliente_EstadoFieldUpdateOperationsInput | $Enums.Cliente_Estado | null
  }

  export type ClienteUncheckedUpdateWithoutFacturasInput = {
    id_Cliente?: IntFieldUpdateOperationsInput | number
    Cedula?: StringFieldUpdateOperationsInput | string
    Nombre?: StringFieldUpdateOperationsInput | string
    Apellido?: StringFieldUpdateOperationsInput | string
    FechaN?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Direccion?: NullableStringFieldUpdateOperationsInput | string | null
    Telefono?: NullableStringFieldUpdateOperationsInput | string | null
    Estado?: NullableEnumCliente_EstadoFieldUpdateOperationsInput | $Enums.Cliente_Estado | null
  }

  export type DetalleFacturaCreateWithoutLibroInput = {
    cantidad: number
    precio_uni: Decimal | DecimalJsLike | number | string
    Factura?: FacturaCreateNestedOneWithoutDetalleFacturaInput
  }

  export type DetalleFacturaUncheckedCreateWithoutLibroInput = {
    id_Detalle?: number
    cantidad: number
    precio_uni: Decimal | DecimalJsLike | number | string
    id_Compra?: number | null
  }

  export type DetalleFacturaCreateOrConnectWithoutLibroInput = {
    where: DetalleFacturaWhereUniqueInput
    create: XOR<DetalleFacturaCreateWithoutLibroInput, DetalleFacturaUncheckedCreateWithoutLibroInput>
  }

  export type DetalleFacturaCreateManyLibroInputEnvelope = {
    data: DetalleFacturaCreateManyLibroInput | DetalleFacturaCreateManyLibroInput[]
    skipDuplicates?: boolean
  }

  export type EditorialCreateWithoutLibrosInput = {
    Nombre: string
    Telefono?: string | null
    Email?: string | null
    SitioWeb?: string | null
  }

  export type EditorialUncheckedCreateWithoutLibrosInput = {
    id_Editorial?: number
    Nombre: string
    Telefono?: string | null
    Email?: string | null
    SitioWeb?: string | null
  }

  export type EditorialCreateOrConnectWithoutLibrosInput = {
    where: EditorialWhereUniqueInput
    create: XOR<EditorialCreateWithoutLibrosInput, EditorialUncheckedCreateWithoutLibrosInput>
  }

  export type Libro_AutorCreateWithoutLibroInput = {
    Autor: AutorCreateNestedOneWithoutLibro_AutorInput
  }

  export type Libro_AutorUncheckedCreateWithoutLibroInput = {
    id_Autor: number
  }

  export type Libro_AutorCreateOrConnectWithoutLibroInput = {
    where: Libro_AutorWhereUniqueInput
    create: XOR<Libro_AutorCreateWithoutLibroInput, Libro_AutorUncheckedCreateWithoutLibroInput>
  }

  export type Libro_AutorCreateManyLibroInputEnvelope = {
    data: Libro_AutorCreateManyLibroInput | Libro_AutorCreateManyLibroInput[]
    skipDuplicates?: boolean
  }

  export type CategoriaCreateWithoutLibrosInput = {
    Nombre: string
  }

  export type CategoriaUncheckedCreateWithoutLibrosInput = {
    id_Categoria?: number
    Nombre: string
  }

  export type CategoriaCreateOrConnectWithoutLibrosInput = {
    where: CategoriaWhereUniqueInput
    create: XOR<CategoriaCreateWithoutLibrosInput, CategoriaUncheckedCreateWithoutLibrosInput>
  }

  export type DetalleFacturaUpsertWithWhereUniqueWithoutLibroInput = {
    where: DetalleFacturaWhereUniqueInput
    update: XOR<DetalleFacturaUpdateWithoutLibroInput, DetalleFacturaUncheckedUpdateWithoutLibroInput>
    create: XOR<DetalleFacturaCreateWithoutLibroInput, DetalleFacturaUncheckedCreateWithoutLibroInput>
  }

  export type DetalleFacturaUpdateWithWhereUniqueWithoutLibroInput = {
    where: DetalleFacturaWhereUniqueInput
    data: XOR<DetalleFacturaUpdateWithoutLibroInput, DetalleFacturaUncheckedUpdateWithoutLibroInput>
  }

  export type DetalleFacturaUpdateManyWithWhereWithoutLibroInput = {
    where: DetalleFacturaScalarWhereInput
    data: XOR<DetalleFacturaUpdateManyMutationInput, DetalleFacturaUncheckedUpdateManyWithoutLibroInput>
  }

  export type EditorialUpsertWithoutLibrosInput = {
    update: XOR<EditorialUpdateWithoutLibrosInput, EditorialUncheckedUpdateWithoutLibrosInput>
    create: XOR<EditorialCreateWithoutLibrosInput, EditorialUncheckedCreateWithoutLibrosInput>
    where?: EditorialWhereInput
  }

  export type EditorialUpdateToOneWithWhereWithoutLibrosInput = {
    where?: EditorialWhereInput
    data: XOR<EditorialUpdateWithoutLibrosInput, EditorialUncheckedUpdateWithoutLibrosInput>
  }

  export type EditorialUpdateWithoutLibrosInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    Telefono?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    SitioWeb?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EditorialUncheckedUpdateWithoutLibrosInput = {
    id_Editorial?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Telefono?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    SitioWeb?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Libro_AutorUpsertWithWhereUniqueWithoutLibroInput = {
    where: Libro_AutorWhereUniqueInput
    update: XOR<Libro_AutorUpdateWithoutLibroInput, Libro_AutorUncheckedUpdateWithoutLibroInput>
    create: XOR<Libro_AutorCreateWithoutLibroInput, Libro_AutorUncheckedCreateWithoutLibroInput>
  }

  export type Libro_AutorUpdateWithWhereUniqueWithoutLibroInput = {
    where: Libro_AutorWhereUniqueInput
    data: XOR<Libro_AutorUpdateWithoutLibroInput, Libro_AutorUncheckedUpdateWithoutLibroInput>
  }

  export type Libro_AutorUpdateManyWithWhereWithoutLibroInput = {
    where: Libro_AutorScalarWhereInput
    data: XOR<Libro_AutorUpdateManyMutationInput, Libro_AutorUncheckedUpdateManyWithoutLibroInput>
  }

  export type CategoriaUpsertWithoutLibrosInput = {
    update: XOR<CategoriaUpdateWithoutLibrosInput, CategoriaUncheckedUpdateWithoutLibrosInput>
    create: XOR<CategoriaCreateWithoutLibrosInput, CategoriaUncheckedCreateWithoutLibrosInput>
    where?: CategoriaWhereInput
  }

  export type CategoriaUpdateToOneWithWhereWithoutLibrosInput = {
    where?: CategoriaWhereInput
    data: XOR<CategoriaUpdateWithoutLibrosInput, CategoriaUncheckedUpdateWithoutLibrosInput>
  }

  export type CategoriaUpdateWithoutLibrosInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriaUncheckedUpdateWithoutLibrosInput = {
    id_Categoria?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
  }

  export type LibroCreateWithoutCategoriaInput = {
    Titulo: string
    Fechap?: Date | string | null
    preciov: Decimal | DecimalJsLike | number | string
    cantidad?: number | null
    Estado?: $Enums.Libro_Estado | null
    ISBN: string
    BestSellers?: boolean
    detalles?: DetalleFacturaCreateNestedManyWithoutLibroInput
    editorial?: EditorialCreateNestedOneWithoutLibrosInput
    Libro_Autor?: Libro_AutorCreateNestedManyWithoutLibroInput
  }

  export type LibroUncheckedCreateWithoutCategoriaInput = {
    id_Libro?: number
    Titulo: string
    Fechap?: Date | string | null
    preciov: Decimal | DecimalJsLike | number | string
    cantidad?: number | null
    id_Editorial?: number | null
    Estado?: $Enums.Libro_Estado | null
    ISBN: string
    BestSellers?: boolean
    detalles?: DetalleFacturaUncheckedCreateNestedManyWithoutLibroInput
    Libro_Autor?: Libro_AutorUncheckedCreateNestedManyWithoutLibroInput
  }

  export type LibroCreateOrConnectWithoutCategoriaInput = {
    where: LibroWhereUniqueInput
    create: XOR<LibroCreateWithoutCategoriaInput, LibroUncheckedCreateWithoutCategoriaInput>
  }

  export type LibroCreateManyCategoriaInputEnvelope = {
    data: LibroCreateManyCategoriaInput | LibroCreateManyCategoriaInput[]
    skipDuplicates?: boolean
  }

  export type LibroUpsertWithWhereUniqueWithoutCategoriaInput = {
    where: LibroWhereUniqueInput
    update: XOR<LibroUpdateWithoutCategoriaInput, LibroUncheckedUpdateWithoutCategoriaInput>
    create: XOR<LibroCreateWithoutCategoriaInput, LibroUncheckedCreateWithoutCategoriaInput>
  }

  export type LibroUpdateWithWhereUniqueWithoutCategoriaInput = {
    where: LibroWhereUniqueInput
    data: XOR<LibroUpdateWithoutCategoriaInput, LibroUncheckedUpdateWithoutCategoriaInput>
  }

  export type LibroUpdateManyWithWhereWithoutCategoriaInput = {
    where: LibroScalarWhereInput
    data: XOR<LibroUpdateManyMutationInput, LibroUncheckedUpdateManyWithoutCategoriaInput>
  }

  export type LibroCreateWithoutLibro_AutorInput = {
    Titulo: string
    Fechap?: Date | string | null
    preciov: Decimal | DecimalJsLike | number | string
    cantidad?: number | null
    Estado?: $Enums.Libro_Estado | null
    ISBN: string
    BestSellers?: boolean
    detalles?: DetalleFacturaCreateNestedManyWithoutLibroInput
    editorial?: EditorialCreateNestedOneWithoutLibrosInput
    categoria?: CategoriaCreateNestedOneWithoutLibrosInput
  }

  export type LibroUncheckedCreateWithoutLibro_AutorInput = {
    id_Libro?: number
    Titulo: string
    Fechap?: Date | string | null
    preciov: Decimal | DecimalJsLike | number | string
    cantidad?: number | null
    id_Editorial?: number | null
    Estado?: $Enums.Libro_Estado | null
    ISBN: string
    BestSellers?: boolean
    id_Categoria?: number | null
    detalles?: DetalleFacturaUncheckedCreateNestedManyWithoutLibroInput
  }

  export type LibroCreateOrConnectWithoutLibro_AutorInput = {
    where: LibroWhereUniqueInput
    create: XOR<LibroCreateWithoutLibro_AutorInput, LibroUncheckedCreateWithoutLibro_AutorInput>
  }

  export type AutorCreateWithoutLibro_AutorInput = {
    Nombre: string
    Email?: string | null
    Estado?: $Enums.Autor_Estado | null
  }

  export type AutorUncheckedCreateWithoutLibro_AutorInput = {
    id_Autor?: number
    Nombre: string
    Email?: string | null
    Estado?: $Enums.Autor_Estado | null
  }

  export type AutorCreateOrConnectWithoutLibro_AutorInput = {
    where: AutorWhereUniqueInput
    create: XOR<AutorCreateWithoutLibro_AutorInput, AutorUncheckedCreateWithoutLibro_AutorInput>
  }

  export type LibroUpsertWithoutLibro_AutorInput = {
    update: XOR<LibroUpdateWithoutLibro_AutorInput, LibroUncheckedUpdateWithoutLibro_AutorInput>
    create: XOR<LibroCreateWithoutLibro_AutorInput, LibroUncheckedCreateWithoutLibro_AutorInput>
    where?: LibroWhereInput
  }

  export type LibroUpdateToOneWithWhereWithoutLibro_AutorInput = {
    where?: LibroWhereInput
    data: XOR<LibroUpdateWithoutLibro_AutorInput, LibroUncheckedUpdateWithoutLibro_AutorInput>
  }

  export type LibroUpdateWithoutLibro_AutorInput = {
    Titulo?: StringFieldUpdateOperationsInput | string
    Fechap?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preciov?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cantidad?: NullableIntFieldUpdateOperationsInput | number | null
    Estado?: NullableEnumLibro_EstadoFieldUpdateOperationsInput | $Enums.Libro_Estado | null
    ISBN?: StringFieldUpdateOperationsInput | string
    BestSellers?: BoolFieldUpdateOperationsInput | boolean
    detalles?: DetalleFacturaUpdateManyWithoutLibroNestedInput
    editorial?: EditorialUpdateOneWithoutLibrosNestedInput
    categoria?: CategoriaUpdateOneWithoutLibrosNestedInput
  }

  export type LibroUncheckedUpdateWithoutLibro_AutorInput = {
    id_Libro?: IntFieldUpdateOperationsInput | number
    Titulo?: StringFieldUpdateOperationsInput | string
    Fechap?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preciov?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cantidad?: NullableIntFieldUpdateOperationsInput | number | null
    id_Editorial?: NullableIntFieldUpdateOperationsInput | number | null
    Estado?: NullableEnumLibro_EstadoFieldUpdateOperationsInput | $Enums.Libro_Estado | null
    ISBN?: StringFieldUpdateOperationsInput | string
    BestSellers?: BoolFieldUpdateOperationsInput | boolean
    id_Categoria?: NullableIntFieldUpdateOperationsInput | number | null
    detalles?: DetalleFacturaUncheckedUpdateManyWithoutLibroNestedInput
  }

  export type AutorUpsertWithoutLibro_AutorInput = {
    update: XOR<AutorUpdateWithoutLibro_AutorInput, AutorUncheckedUpdateWithoutLibro_AutorInput>
    create: XOR<AutorCreateWithoutLibro_AutorInput, AutorUncheckedCreateWithoutLibro_AutorInput>
    where?: AutorWhereInput
  }

  export type AutorUpdateToOneWithWhereWithoutLibro_AutorInput = {
    where?: AutorWhereInput
    data: XOR<AutorUpdateWithoutLibro_AutorInput, AutorUncheckedUpdateWithoutLibro_AutorInput>
  }

  export type AutorUpdateWithoutLibro_AutorInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    Estado?: NullableEnumAutor_EstadoFieldUpdateOperationsInput | $Enums.Autor_Estado | null
  }

  export type AutorUncheckedUpdateWithoutLibro_AutorInput = {
    id_Autor?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    Estado?: NullableEnumAutor_EstadoFieldUpdateOperationsInput | $Enums.Autor_Estado | null
  }

  export type Libro_AutorCreateManyAutorInput = {
    id_Libro: number
  }

  export type Libro_AutorUpdateWithoutAutorInput = {
    Libro?: LibroUpdateOneRequiredWithoutLibro_AutorNestedInput
  }

  export type Libro_AutorUncheckedUpdateWithoutAutorInput = {
    id_Libro?: IntFieldUpdateOperationsInput | number
  }

  export type Libro_AutorUncheckedUpdateManyWithoutAutorInput = {
    id_Libro?: IntFieldUpdateOperationsInput | number
  }

  export type FacturaCreateManyClienteInput = {
    id_Compra?: number
    fecha_compra?: Date | string | null
    total: Decimal | DecimalJsLike | number | string
  }

  export type FacturaUpdateWithoutClienteInput = {
    fecha_compra?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    DetalleFactura?: DetalleFacturaUpdateManyWithoutFacturaNestedInput
  }

  export type FacturaUncheckedUpdateWithoutClienteInput = {
    id_Compra?: IntFieldUpdateOperationsInput | number
    fecha_compra?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    DetalleFactura?: DetalleFacturaUncheckedUpdateManyWithoutFacturaNestedInput
  }

  export type FacturaUncheckedUpdateManyWithoutClienteInput = {
    id_Compra?: IntFieldUpdateOperationsInput | number
    fecha_compra?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type LibroCreateManyEditorialInput = {
    id_Libro?: number
    Titulo: string
    Fechap?: Date | string | null
    preciov: Decimal | DecimalJsLike | number | string
    cantidad?: number | null
    Estado?: $Enums.Libro_Estado | null
    ISBN: string
    BestSellers?: boolean
    id_Categoria?: number | null
  }

  export type LibroUpdateWithoutEditorialInput = {
    Titulo?: StringFieldUpdateOperationsInput | string
    Fechap?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preciov?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cantidad?: NullableIntFieldUpdateOperationsInput | number | null
    Estado?: NullableEnumLibro_EstadoFieldUpdateOperationsInput | $Enums.Libro_Estado | null
    ISBN?: StringFieldUpdateOperationsInput | string
    BestSellers?: BoolFieldUpdateOperationsInput | boolean
    detalles?: DetalleFacturaUpdateManyWithoutLibroNestedInput
    Libro_Autor?: Libro_AutorUpdateManyWithoutLibroNestedInput
    categoria?: CategoriaUpdateOneWithoutLibrosNestedInput
  }

  export type LibroUncheckedUpdateWithoutEditorialInput = {
    id_Libro?: IntFieldUpdateOperationsInput | number
    Titulo?: StringFieldUpdateOperationsInput | string
    Fechap?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preciov?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cantidad?: NullableIntFieldUpdateOperationsInput | number | null
    Estado?: NullableEnumLibro_EstadoFieldUpdateOperationsInput | $Enums.Libro_Estado | null
    ISBN?: StringFieldUpdateOperationsInput | string
    BestSellers?: BoolFieldUpdateOperationsInput | boolean
    id_Categoria?: NullableIntFieldUpdateOperationsInput | number | null
    detalles?: DetalleFacturaUncheckedUpdateManyWithoutLibroNestedInput
    Libro_Autor?: Libro_AutorUncheckedUpdateManyWithoutLibroNestedInput
  }

  export type LibroUncheckedUpdateManyWithoutEditorialInput = {
    id_Libro?: IntFieldUpdateOperationsInput | number
    Titulo?: StringFieldUpdateOperationsInput | string
    Fechap?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preciov?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cantidad?: NullableIntFieldUpdateOperationsInput | number | null
    Estado?: NullableEnumLibro_EstadoFieldUpdateOperationsInput | $Enums.Libro_Estado | null
    ISBN?: StringFieldUpdateOperationsInput | string
    BestSellers?: BoolFieldUpdateOperationsInput | boolean
    id_Categoria?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DetalleFacturaCreateManyFacturaInput = {
    id_Detalle?: number
    cantidad: number
    precio_uni: Decimal | DecimalJsLike | number | string
    id_Libro?: number | null
  }

  export type DetalleFacturaUpdateWithoutFacturaInput = {
    cantidad?: IntFieldUpdateOperationsInput | number
    precio_uni?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    libro?: LibroUpdateOneWithoutDetallesNestedInput
  }

  export type DetalleFacturaUncheckedUpdateWithoutFacturaInput = {
    id_Detalle?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precio_uni?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    id_Libro?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DetalleFacturaUncheckedUpdateManyWithoutFacturaInput = {
    id_Detalle?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precio_uni?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    id_Libro?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DetalleFacturaCreateManyLibroInput = {
    id_Detalle?: number
    cantidad: number
    precio_uni: Decimal | DecimalJsLike | number | string
    id_Compra?: number | null
  }

  export type Libro_AutorCreateManyLibroInput = {
    id_Autor: number
  }

  export type DetalleFacturaUpdateWithoutLibroInput = {
    cantidad?: IntFieldUpdateOperationsInput | number
    precio_uni?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Factura?: FacturaUpdateOneWithoutDetalleFacturaNestedInput
  }

  export type DetalleFacturaUncheckedUpdateWithoutLibroInput = {
    id_Detalle?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precio_uni?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    id_Compra?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DetalleFacturaUncheckedUpdateManyWithoutLibroInput = {
    id_Detalle?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precio_uni?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    id_Compra?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type Libro_AutorUpdateWithoutLibroInput = {
    Autor?: AutorUpdateOneRequiredWithoutLibro_AutorNestedInput
  }

  export type Libro_AutorUncheckedUpdateWithoutLibroInput = {
    id_Autor?: IntFieldUpdateOperationsInput | number
  }

  export type Libro_AutorUncheckedUpdateManyWithoutLibroInput = {
    id_Autor?: IntFieldUpdateOperationsInput | number
  }

  export type LibroCreateManyCategoriaInput = {
    id_Libro?: number
    Titulo: string
    Fechap?: Date | string | null
    preciov: Decimal | DecimalJsLike | number | string
    cantidad?: number | null
    id_Editorial?: number | null
    Estado?: $Enums.Libro_Estado | null
    ISBN: string
    BestSellers?: boolean
  }

  export type LibroUpdateWithoutCategoriaInput = {
    Titulo?: StringFieldUpdateOperationsInput | string
    Fechap?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preciov?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cantidad?: NullableIntFieldUpdateOperationsInput | number | null
    Estado?: NullableEnumLibro_EstadoFieldUpdateOperationsInput | $Enums.Libro_Estado | null
    ISBN?: StringFieldUpdateOperationsInput | string
    BestSellers?: BoolFieldUpdateOperationsInput | boolean
    detalles?: DetalleFacturaUpdateManyWithoutLibroNestedInput
    editorial?: EditorialUpdateOneWithoutLibrosNestedInput
    Libro_Autor?: Libro_AutorUpdateManyWithoutLibroNestedInput
  }

  export type LibroUncheckedUpdateWithoutCategoriaInput = {
    id_Libro?: IntFieldUpdateOperationsInput | number
    Titulo?: StringFieldUpdateOperationsInput | string
    Fechap?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preciov?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cantidad?: NullableIntFieldUpdateOperationsInput | number | null
    id_Editorial?: NullableIntFieldUpdateOperationsInput | number | null
    Estado?: NullableEnumLibro_EstadoFieldUpdateOperationsInput | $Enums.Libro_Estado | null
    ISBN?: StringFieldUpdateOperationsInput | string
    BestSellers?: BoolFieldUpdateOperationsInput | boolean
    detalles?: DetalleFacturaUncheckedUpdateManyWithoutLibroNestedInput
    Libro_Autor?: Libro_AutorUncheckedUpdateManyWithoutLibroNestedInput
  }

  export type LibroUncheckedUpdateManyWithoutCategoriaInput = {
    id_Libro?: IntFieldUpdateOperationsInput | number
    Titulo?: StringFieldUpdateOperationsInput | string
    Fechap?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preciov?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cantidad?: NullableIntFieldUpdateOperationsInput | number | null
    id_Editorial?: NullableIntFieldUpdateOperationsInput | number | null
    Estado?: NullableEnumLibro_EstadoFieldUpdateOperationsInput | $Enums.Libro_Estado | null
    ISBN?: StringFieldUpdateOperationsInput | string
    BestSellers?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}